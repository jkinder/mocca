/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. de/tum/mocca/parser/\CtplParser.jj */
/*@egen*/options {
LOOKAHEAD=2;
}

PARSER_BEGIN(CtplParser)

package de.tum.mocca.parser;
import de.tum.mocca.ctpl.*;

public class CtplParser/*@bgen(jjtree)*/implements CtplParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTCtplParserState jjtree = new JJTCtplParserState();

/*@egen*/
	
    public static void main(String args[]) throws ParseException {
		CtplParser parser = new CtplParser(System.in);
		while (true) {
		    System.out.print("Enter Expression: ");
		    System.out.flush();
		    try {
				SimpleNode n = parser.oneline();
				// Skip first node
				n = (SimpleNode)n.jjtGetChild(0);
				System.out.println(convertToCtplTree(n));
		    } catch (Exception e) {
		    	System.out.println("Parse Error: " + e.getMessage());
				System.out.println("Exiting.");
				System.exit(1);
		    }
		}
    }
    
    public CtplParser(String s) {
    	this(new java.io.StringReader(s));
    }
    
    public CtplTreeNode parseIntoTree() throws ParseException {
		SimpleNode n = oneline();
		// Skip first node
		n = (SimpleNode)n.jjtGetChild(0);
		return convertToCtplTree(n);
    }

	/**
	 * Helper function that converts the simple tree structure
	 * to a CtlTree. Does simple predicate parsing.
	 */
	private static CtplTreeNode convertToCtplTree(SimpleNode simple) throws ParseException {
		CtplTreeNode root;
		if (simple.id == CtplParserTreeConstants.JJTPREDICATE) {
			String body = simple.textValue;
			String[] params;
			if (simple.children != null) {
				params = new String[simple.children.length];
				for (int i=0; i<simple.children.length; i++)
					if (((SimpleNode)simple.children[i]).id == CtplParserTreeConstants.JJTPARAMETER)
						params[i] = ((SimpleNode)simple.children[i]).textValue;
					else throw new ParseException(((SimpleNode)simple.children[i]).textValue + " is not a valid parameter!"); 
			} else params = new String[0];
			root = new CtplTreeNode(
					new CtplPredicate(body, params)
					);
		} else if (/*(simple.id == CtlParserTreeConstants.JJTALL) ||*/
			(simple.id == CtplParserTreeConstants.JJTEXISTS)) {
				
			if ((simple.children == null) || (simple.children.length != 2)) throw new ParseException("Wrong number of arguments for quantifier " + simple.textValue);
			root = new CtplTreeNode(new CtplQuantifier(simple.id, ((SimpleNode)simple.children[0]).textValue));
			root.addChild(convertToCtplTree((SimpleNode)simple.children[1]));
		}
		else {
			root = new CtplTreeNode(new CtplOperator(simple.id));
			if (simple.children != null)
				for (int i=0; i<simple.children.length; i++)
					root.addChild(convertToCtplTree((SimpleNode)simple.children[i]));
		}
		return root;
	}
}
	
PARSER_END(CtplParser)

<*> SKIP :
{
 	" "
|	"\t"
}

<*> TOKEN :
{
	< EOL: "\n" | "\r\n" >
|	< #SPC: " " | "\t" >
}

<*> TOKEN : /* SEPARATORS */
{
	< LPARENT: "(" >
|	< RPARENT: ")" > : DEFAULT
|	< COMMA: "," >
}

TOKEN : /* OPERATORS */
{
	< ALL: "A" >
|	< FINALLY: "F" >
|	< EXISTS: "E" >
|	< NEXT: "X" >
|	< GLOBALLY: "G" >
|	< UNTIL: "U" >
|	< AND: "&" >
|	< OR: "|" >
|	< NOT: "-" >
//|	< QALL: "all" >
|	< QEXISTS: "exists" >
}

TOKEN : /* PREDICATES */
{
	< #LETTER : ["a"-"z","A"-"Z","_"] >
|	< #DIGIT : ["0"-"9"] >
|	< PREDICATE: (["a"-"z","#"]) (<LETTER> | <DIGIT>)* > : WithinPredicate
}

<*> TOKEN : /* VARIABLES */
{
	< VARIABLE : ["$"] (["*"] | (<LETTER> (<LETTER> | <DIGIT> )*)) >
}

<WithinPredicate> TOKEN : /* PARAMETERS */
{
	< IDENTIFIER : ((<LETTER> | <DIGIT> | ["["]) ( <LETTER> | <DIGIT> | ["[","]","+",":"])*) >
}

SimpleNode oneline() : {/*@bgen(jjtree) oneline */
  SimpleNode jjtn000 = new SimpleNode(JJTONELINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) oneline */
  try {
/*@egen*/
  term() (<EOL> | <EOF>)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void term()       : {}
{
	disjunction()
}

void disjunction()       : {}
{/*@bgen(jjtree) #or(> 1) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
    	conjunction() (<OR> disjunction())?
    )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

void conjunction()       : {}
{/*@bgen(jjtree) #and(> 1) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTAND);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
    	until() (<AND> conjunction())?
    )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

void until()       :
{
}
{
	(
	    temporal() 
	|/*@bgen(jjtree) AU */
                {
                  SimpleNode jjtn001 = new SimpleNode(JJTAU);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/	(<ALL> temporal() <UNTIL> until())/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/
	|/*@bgen(jjtree) EU */
                {
                  SimpleNode jjtn002 = new SimpleNode(JJTEU);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/	(<EXISTS> temporal() <UNTIL> until())/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
                }
/*@egen*/
	)
}

void temporal()       :
{
}
{
	(
		not()
	|/*@bgen(jjtree) AX */
                {
                  SimpleNode jjtn001 = new SimpleNode(JJTAX);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/	(<ALL><NEXT> not())/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/
	|/*@bgen(jjtree) AF */
                {
                  SimpleNode jjtn002 = new SimpleNode(JJTAF);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/	(<ALL><FINALLY> not())/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
                }
/*@egen*/
	|/*@bgen(jjtree) AG */
                {
                  SimpleNode jjtn003 = new SimpleNode(JJTAG);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                }
                try {
/*@egen*/	(<ALL><GLOBALLY> not())/*@bgen(jjtree)*/
                } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    throw (RuntimeException)jjte003;
                  }
                  if (jjte003 instanceof ParseException) {
                    throw (ParseException)jjte003;
                  }
                  throw (Error)jjte003;
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003, true);
                  }
                }
/*@egen*/
	|/*@bgen(jjtree) EX */
                {
                  SimpleNode jjtn004 = new SimpleNode(JJTEX);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
                }
                try {
/*@egen*/	(<EXISTS><NEXT> not())/*@bgen(jjtree)*/
                } catch (Throwable jjte004) {
                  if (jjtc004) {
                    jjtree.clearNodeScope(jjtn004);
                    jjtc004 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte004 instanceof RuntimeException) {
                    throw (RuntimeException)jjte004;
                  }
                  if (jjte004 instanceof ParseException) {
                    throw (ParseException)jjte004;
                  }
                  throw (Error)jjte004;
                } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004, true);
                  }
                }
/*@egen*/
	|/*@bgen(jjtree) EF */
                {
                  SimpleNode jjtn005 = new SimpleNode(JJTEF);
                  boolean jjtc005 = true;
                  jjtree.openNodeScope(jjtn005);
                }
                try {
/*@egen*/	(<EXISTS><FINALLY> not())/*@bgen(jjtree)*/
                } catch (Throwable jjte005) {
                  if (jjtc005) {
                    jjtree.clearNodeScope(jjtn005);
                    jjtc005 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte005 instanceof RuntimeException) {
                    throw (RuntimeException)jjte005;
                  }
                  if (jjte005 instanceof ParseException) {
                    throw (ParseException)jjte005;
                  }
                  throw (Error)jjte005;
                } finally {
                  if (jjtc005) {
                    jjtree.closeNodeScope(jjtn005, true);
                  }
                }
/*@egen*/
	|/*@bgen(jjtree) EG */
                {
                  SimpleNode jjtn006 = new SimpleNode(JJTEG);
                  boolean jjtc006 = true;
                  jjtree.openNodeScope(jjtn006);
                }
                try {
/*@egen*/	(<EXISTS><GLOBALLY> not())/*@bgen(jjtree)*/
                } catch (Throwable jjte006) {
                  if (jjtc006) {
                    jjtree.clearNodeScope(jjtn006);
                    jjtc006 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte006 instanceof RuntimeException) {
                    throw (RuntimeException)jjte006;
                  }
                  if (jjte006 instanceof ParseException) {
                    throw (ParseException)jjte006;
                  }
                  throw (Error)jjte006;
                } finally {
                  if (jjtc006) {
                    jjtree.closeNodeScope(jjtn006, true);
                  }
                }
/*@egen*/
	|/*@bgen(jjtree) exists */
                {
                  SimpleNode jjtn007 = new SimpleNode(JJTEXISTS);
                  boolean jjtc007 = true;
                  jjtree.openNodeScope(jjtn007);
                }
                try {
/*@egen*/	(<QEXISTS> variable() term())/*@bgen(jjtree)*/
                } catch (Throwable jjte007) {
                  if (jjtc007) {
                    jjtree.clearNodeScope(jjtn007);
                    jjtc007 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte007 instanceof RuntimeException) {
                    throw (RuntimeException)jjte007;
                  }
                  if (jjte007 instanceof ParseException) {
                    throw (ParseException)jjte007;
                  }
                  throw (Error)jjte007;
                } finally {
                  if (jjtc007) {
                    jjtree.closeNodeScope(jjtn007, true);
                  }
                }
/*@egen*/
//	|	(<QALL> variable() term()) #all
	)
}

void not()       :
{
}
{
	(
		atom()
	|/*@bgen(jjtree) not */
                {
                  SimpleNode jjtn001 = new SimpleNode(JJTNOT);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/	( <NOT> not() )/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/
	)
}

void atom()       : {}
{
	(
    	predicate()
    |	<LPARENT> term() <RPARENT>
	)
}

void predicate() : {/*@bgen(jjtree) predicate */
                     SimpleNode jjtn000 = new SimpleNode(JJTPREDICATE);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) predicate */
        try {
/*@egen*/
	(
	t=<PREDICATE> (<LPARENT>(( parameter() (<COMMA> parameter() )*))? <RPARENT>)
	)/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {
		jjtn000.textValue = t.image;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void parameter() : {/*@bgen(jjtree) parameter */
                     SimpleNode jjtn000 = new SimpleNode(JJTPARAMETER);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) parameter */
        try {
/*@egen*/
	(
	t=<IDENTIFIER> | t=<VARIABLE>
	)/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {
		jjtn000.textValue = t.image;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void variable() : {/*@bgen(jjtree) variable */
                    SimpleNode jjtn000 = new SimpleNode(JJTVARIABLE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) variable */
        try {
/*@egen*/
	(
	t=<VARIABLE>
	)/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {
		jjtn000.textValue = t.image;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
